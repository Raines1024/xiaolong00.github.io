<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>乱七八槽的常用命令</title>
    <link href="/2021/01/07/2021-01-03-hodgepodge/"/>
    <url>/2021/01/07/2021-01-03-hodgepodge/</url>
    
    <content type="html"><![CDATA[<h2 id="redis、nginx"><a href="#redis、nginx" class="headerlink" title="redis、nginx"></a>redis、nginx</h2><h2 id="redis-通配符-批量删除key"><a href="#redis-通配符-批量删除key" class="headerlink" title="redis 通配符 批量删除key"></a>redis 通配符 批量删除key</h2><h3 id="redis-模糊搜索前缀为FILE的key"><a href="#redis-模糊搜索前缀为FILE的key" class="headerlink" title="redis 模糊搜索前缀为FILE的key"></a>redis 模糊搜索前缀为FILE的key</h3><p>./redis-cli keys “FILE*”  </p><h3 id="Redis-中-DEL指令支持多个key作为参数进行删除但不支持通配符，无法通过通配符批量删除key，不过我们可以借助Linux的管道和-xargs-指令来完成这个动作。"><a href="#Redis-中-DEL指令支持多个key作为参数进行删除但不支持通配符，无法通过通配符批量删除key，不过我们可以借助Linux的管道和-xargs-指令来完成这个动作。" class="headerlink" title="Redis 中 DEL指令支持多个key作为参数进行删除但不支持通配符，无法通过通配符批量删除key，不过我们可以借助Linux的管道和 xargs 指令来完成这个动作。"></a>Redis 中 DEL指令支持多个key作为参数进行删除但不支持通配符，无法通过通配符批量删除key，不过我们可以借助Linux的管道和 xargs 指令来完成这个动作。</h3><p>比如要删除所有以FILE开头的key 可以这样实现：<br>[root@dev_opayredis src]# ./redis-cli keys “FILE*”     </p><ol><li>“user1”    </li><li>“user2”<br>[root@dev_opayredis src]# ./redis-cli keys “FILE*” | xargs ./redis-cli del<br>(integer) 2<br>删除成功   </li></ol><h2 id="nginx-nginx-conf-更改配置client-max-body-size修改默认限制上传附件大小"><a href="#nginx-nginx-conf-更改配置client-max-body-size修改默认限制上传附件大小" class="headerlink" title="nginx nginx.conf 更改配置client_max_body_size修改默认限制上传附件大小"></a>nginx nginx.conf 更改配置client_max_body_size修改默认限制上传附件大小</h2><p>client_max_body_size 200m;</p><h3 id="Nginx-上传大文件超时解决办法"><a href="#Nginx-上传大文件超时解决办法" class="headerlink" title="Nginx 上传大文件超时解决办法"></a>Nginx 上传大文件超时解决办法</h3><ul><li>情况如下：用nginx作代理服务器，上传大文件时（本人测试上传50m的文件），提示上传超时或文件过大。<br>原因是nginx对上传文件大小有限制，而且默认是1M。另外，若上传文件很大，还要适当调整上传超时时间。<br>解决方法是在nginx的配置文件下，加上以下配置：</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">client_max_body_size</span>     <span class="hljs-number">50</span>m; //文件大小限制，默认<span class="hljs-number">1</span>m<br><br><span class="hljs-attribute">client_header_timeout</span>    <span class="hljs-number">1</span>m;<br><br><span class="hljs-attribute">client_body_timeout</span>      <span class="hljs-number">1</span>m;<br><br><span class="hljs-attribute">proxy_connect_timeout</span>     <span class="hljs-number">60</span>s;<br><br><span class="hljs-attribute">proxy_read_timeout</span>      <span class="hljs-number">1</span>m;<br><br><span class="hljs-attribute">proxy_send_timeout</span>      <span class="hljs-number">1</span>m;<br></code></pre></td></tr></table></figure><p>每个参数的意思：</p><p>client_max_body_size</p><p>限制请求体的大小，若超过所设定的大小，返回413错误。</p><p>client_header_timeout</p><p>读取请求头的超时时间，若超过所设定的大小，返回408错误。</p><p>client_body_timeout</p><p>读取请求实体的超时时间，若超过所设定的大小，返回413错误。</p><p>proxy_connect_timeout</p><p>http请求无法立即被容器(tomcat, netty等)处理，被放在nginx的待处理池中等待被处理。此参数为等待的最长时间，默认为60秒，官方推荐最长不要超过75秒。</p><p>proxy_read_timeout</p><p>http请求被容器(tomcat, netty等)处理后，nginx会等待处理结果，也就是容器返回的response。此参数即为服务器响应时间，默认60秒。</p><p>proxy_send_timeout</p><p>http请求被服务器处理完后，把数据传返回给Nginx的用时，默认60秒。</p><hr><p>nginx.conf</p><p>在nginx使用过程中，上传文件的过程中，通常需要设置nginx报文大小限制。避免出现413 Request Entity Too Large。</p><p>于是奇葩的问题被我们遇到了，详细配置请参考下面。我们的问题是，无论client_max_body_size设置在哪里，nginx －s reload后，依然一直报413.多次尝试reload，始终无效。最终决定kill 进程，restart，终于好了。</p><p>由此可见，nginx reload并不一定好使。有时候，为了保险起见。restart比较靠谱。</p><p>可以选择在http{ }中设置：client_max_body_size   20m;</p><p>也可以选择在server{ }中设置：client_max_body_size   20m;</p><p>还可以选择在location{ }中设置：client_max_body_size   20m;</p><p>三者到区别是：http{} 中控制着所有nginx收到的请求。而报文大小限制设置在server｛｝中，则控制该server收到的请求报文大小，同理，如果配置在location中，则报文大小限制，只对匹配了location 路由规则的请求生效。</p><h2 id="nginx-连接超时的配置"><a href="#nginx-连接超时的配置" class="headerlink" title="nginx 连接超时的配置"></a>nginx 连接超时的配置</h2><p>proxy_read_timeout  后端服务器处理请求的时间<br>默认60s<br>可设置在http, server, location块中。  </p>]]></content>
    
    
    
    <tags>
      
      <tag>工作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试一下</title>
    <link href="/2021/01/07/post-title/"/>
    <url>/2021/01/07/post-title/</url>
    
    <content type="html"><![CDATA[<h2 id="ds"><a href="#ds" class="headerlink" title="ds"></a>ds</h2><p><strong>jiacu</strong>sdf</p><p>sad<br>f</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>工作中的Spring</title>
    <link href="/2021/01/07/2020-12-22-springboot/"/>
    <url>/2021/01/07/2020-12-22-springboot/</url>
    
    <content type="html"><![CDATA[<h2 id="Springboot项目上传大文件所需配置"><a href="#Springboot项目上传大文件所需配置" class="headerlink" title="Springboot项目上传大文件所需配置"></a>Springboot项目上传大文件所需配置</h2><p>application.properties配置：<br>spring.servlet.multipart.max-file-size=128MB<br>spring.servlet.multipart.max-request-size=128MB<br>spring.servlet.multipart.enabled=true</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Flink之Data transformation(转换)</title>
    <link href="/2021/01/07/2020-11-25-flink5/"/>
    <url>/2021/01/07/2020-11-25-flink5/</url>
    
    <content type="html"><![CDATA[<h2 id="Flink-应用程序结构"><a href="#Flink-应用程序结构" class="headerlink" title="Flink 应用程序结构"></a>Flink 应用程序结构</h2><p>1、Source: 数据源，Flink 在流处理和批处理上的 source 大概有 4 类：基于本地集合的 source、基于文件的 source、基于网络套接字的 source、自定义的 source。自定义的 source 常见的有 Apache kafka、Amazon Kinesis Streams、RabbitMQ、Twitter Streaming API、Apache NiFi 等，当然你也可以定义自己的 source。<br>2、Transformation：数据转换的各种操作，有 Map / FlatMap / Filter / KeyBy / Reduce / Fold / Aggregations / Window / WindowAll / Union / Window join / Split / Select / Project 等，操作很多，可以将数据转换计算成你想要的数据。<br>3、Sink：接收器，Flink 将转换计算后的数据发送的地点 ，你可能需要存储下来，Flink 常见的 Sink 大概有如下几类：写入文件、打印出来、写入 socket 、自定义的 sink 。自定义的 sink 常见的有 Apache kafka、RabbitMQ、MySQL、ElasticSearch、Apache Cassandra、Hadoop FileSystem 等，同理你也可以定义自己的 Sink。   </p><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>这是最简单的转换之一，其中输入是一个数据流，输出的也是一个数据流：<br>还是拿上一篇文章的案例来将数据进行 map 转换操作：<br>将每个人的年龄都增加 5 岁，其他不变。  </p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs processing">SingleOutputStreamOperator&lt;Student&gt; <span class="hljs-built_in">map</span> = student.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">new</span> MapFunction&lt;Student, Student&gt;() &#123;<br>    @Override<br>    <span class="hljs-keyword">public</span> Student <span class="hljs-built_in">map</span>(Student value) <span class="hljs-keyword">throws</span> Exception &#123;<br>        Student s1 = <span class="hljs-keyword">new</span> Student();<br>        s1.id = value.id;<br>        s1.name = value.name;<br>        s1.password = value.password;<br>        s1.age = value.age + <span class="hljs-number">5</span>;<br>        <span class="hljs-keyword">return</span> s1;<br>    &#125;<br>&#125;);<br><span class="hljs-built_in">map</span>.<span class="hljs-built_in">print</span>();<br></code></pre></td></tr></table></figure><h3 id="FlatMap"><a href="#FlatMap" class="headerlink" title="FlatMap"></a>FlatMap</h3><p>FlatMap 采用一条记录并输出零个，一个或多个记录。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">SingleOutputStreamOperator&lt;Student&gt; flatMap = student.flatMap(<span class="hljs-keyword">new</span> FlatMapFunction&lt;Student, Student&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">flatMap</span><span class="hljs-params">(Student value, Collector&lt;Student&gt; out)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">if</span> (value.id % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>            out.collect(value);<br>        &#125;<br>    &#125;<br>&#125;);<br>flatMap.print();<br></code></pre></td></tr></table></figure><p>这里将 id 为偶数的聚集出来。  </p><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><p>Filter 函数根据条件判断出结果。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs processing">SingleOutputStreamOperator&lt;Student&gt; <span class="hljs-built_in">filter</span> = student.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">new</span> FilterFunction&lt;Student&gt;() &#123;<br>    @Override<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-built_in">filter</span>(Student value) <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">if</span> (value.id &gt; <span class="hljs-number">95</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;);<br><span class="hljs-built_in">filter</span>.<span class="hljs-built_in">print</span>();<br></code></pre></td></tr></table></figure><p>这里将 id 大于 95 的过滤出来，然后打印出来。  </p><h3 id="KeyBy"><a href="#KeyBy" class="headerlink" title="KeyBy"></a>KeyBy</h3><p>KeyBy 在逻辑上是基于 key 对流进行分区。在内部，它使用 hash 函数对流进行分区。它返回 KeyedDataStream 数据流。  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">KeyedStream&lt;Student, <span class="hljs-keyword">Integer</span>&gt; keyBy = student.keyBy(<span class="hljs-keyword">new</span> KeySelector&lt;Student, <span class="hljs-keyword">Integer</span>&gt;() &#123;<br>    @Override<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">Integer</span> getKey(Student value) throws <span class="hljs-built_in">Exception</span> &#123;<br>        <span class="hljs-keyword">return</span> value.age;<br>    &#125;<br>&#125;);<br>keyBy.<span class="hljs-keyword">print</span>();<br></code></pre></td></tr></table></figure><p>上面对 student 的 age 做 KeyBy 操作分区  </p><h3 id="Reduce"><a href="#Reduce" class="headerlink" title="Reduce"></a>Reduce</h3><p>Reduce 返回单个的结果值，并且 reduce 操作每处理一个元素总是创建一个新值。常用的方法有 average, sum, min, max, count，使用 reduce 方法都可实现。  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">SingleOutputStreamOperator&lt;Student&gt; reduce = student.keyBy(<span class="hljs-built_in">new</span> KeySelector&lt;Student, <span class="hljs-type">Integer</span>&gt;() &#123;<br>    @Override<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">Integer</span> getKey(Student <span class="hljs-keyword">value</span>) throws <span class="hljs-keyword">Exception</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">value</span>.age;<br>    &#125;<br>&#125;).reduce(<span class="hljs-built_in">new</span> ReduceFunction&lt;Student&gt;() &#123;<br>    @Override<br>    <span class="hljs-built_in">public</span> Student reduce(Student value1, Student value2) throws <span class="hljs-keyword">Exception</span> &#123;<br>        Student student1 = <span class="hljs-built_in">new</span> Student();<br>        student1.name = value1.name + value2.name;<br>        student1.id = (value1.id + value2.id) / <span class="hljs-number">2</span>;<br>        student1.<span class="hljs-keyword">password</span> = value1.<span class="hljs-keyword">password</span> + value2.<span class="hljs-keyword">password</span>;<br>        student1.age = (value1.age + value2.age) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">return</span> student1;<br>    &#125;<br>&#125;);<br>reduce.print();<br></code></pre></td></tr></table></figure><p>上面先将数据流进行 keyby 操作，因为执行 reduce 操作只能是 KeyedStream，然后将 student 对象的 age 做了一个求平均值的操作。  </p><h3 id="Fold"><a href="#Fold" class="headerlink" title="Fold"></a>Fold</h3><p>Fold 通过将最后一个文件夹流与当前记录组合来推出 KeyedStream。 它会发回数据流。  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">KeyedStream.fold(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-keyword">new</span> FoldFunction&lt;<span class="hljs-keyword">Integer</span>, <span class="hljs-keyword">String</span>&gt;() &#123;<br>    @Override<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> fold(<span class="hljs-keyword">String</span> accumulator, <span class="hljs-keyword">Integer</span> value) throws <span class="hljs-built_in">Exception</span> &#123;<br>        <span class="hljs-keyword">return</span> accumulator + <span class="hljs-string">&quot;=&quot;</span> + value;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="Aggregations"><a href="#Aggregations" class="headerlink" title="Aggregations"></a>Aggregations</h3><p>DataStream API 支持各种聚合，例如 min，max，sum 等。 这些函数可以应用于 KeyedStream 以获得 Aggregations 聚合。  </p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">KeyedStream</span>.</span></span>sum(<span class="hljs-number">0</span>) <br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">KeyedStream</span>.</span></span>sum(<span class="hljs-string">&quot;key&quot;</span>) <br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">KeyedStream</span>.</span></span>min(<span class="hljs-number">0</span>) <br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">KeyedStream</span>.</span></span>min(<span class="hljs-string">&quot;key&quot;</span>) <br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">KeyedStream</span>.</span></span>max(<span class="hljs-number">0</span>) <br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">KeyedStream</span>.</span></span>max(<span class="hljs-string">&quot;key&quot;</span>) <br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">KeyedStream</span>.</span></span>min<span class="hljs-constructor">By(0)</span> <br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">KeyedStream</span>.</span></span>min<span class="hljs-constructor">By(<span class="hljs-string">&quot;key&quot;</span>)</span> <br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">KeyedStream</span>.</span></span>max<span class="hljs-constructor">By(0)</span> <br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">KeyedStream</span>.</span></span>max<span class="hljs-constructor">By(<span class="hljs-string">&quot;key&quot;</span>)</span><br></code></pre></td></tr></table></figure><p>max 和 maxBy 之间的区别在于 max 返回流中的最大值，但 maxBy 返回具有最大值的键， min 和 minBy 同理。  </p><h3 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h3><p>Window 函数允许按时间或其他条件对现有 KeyedStream 进行分组。 以下是以 10 秒的时间窗口聚合：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">inputStream</span><span class="hljs-selector-class">.keyBy</span>(0)<span class="hljs-selector-class">.window</span>(<span class="hljs-selector-tag">Time</span><span class="hljs-selector-class">.seconds</span>(10));<br></code></pre></td></tr></table></figure><p>Flink 定义数据片段以便（可能）处理无限数据流。 这些切片称为窗口。 此切片有助于通过应用转换处理数据块。    要对流进行窗口化，我们需要分配一个可以进行分发的键和一个描述要对窗口化流执行哪些转换的函数<br>要将流切片到窗口，我们可以使用 Flink 自带的窗口分配器。 我们有选项，如 tumbling windows, sliding windows, global 和 session windows。Flink还允许您通过扩展WindowAssginer类来编写自定义窗口分配器。 这里先预留下篇文章来讲解这些不同的 windows 是如何工作的。   </p><h3 id="WindowAll"><a href="#WindowAll" class="headerlink" title="WindowAll"></a>WindowAll</h3><p>windowAll 函数允许对常规数据流进行分组。 通常，这是非并行数据转换，因为它在非分区数据流上运行。<br>与常规数据流功能类似，我们也有窗口数据流功能。 唯一的区别是它们处理窗口数据流。 所以窗口缩小就像 Reduce 函数一样，Window fold 就像 Fold 函数一样，并且还有聚合。    </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">inputStream</span><span class="hljs-selector-class">.keyBy</span>(0)<span class="hljs-selector-class">.windowAll</span>(<span class="hljs-selector-tag">Time</span><span class="hljs-selector-class">.seconds</span>(10));<br></code></pre></td></tr></table></figure><h3 id="Union"><a href="#Union" class="headerlink" title="Union"></a>Union</h3><p>Union 函数将两个或多个数据流结合在一起。 这样就可以并行地组合数据流。 如果我们将一个流与自身组合，那么它会输出每个记录两次。   </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">inputStream</span>.union(inputStream<span class="hljs-number">1</span>, inputStream<span class="hljs-number">2</span>, ...);<br></code></pre></td></tr></table></figure><h3 id="Window-join"><a href="#Window-join" class="headerlink" title="Window join"></a>Window join</h3><p>我们可以通过一些 key 将同一个 window 的两个数据流 join 起来。</p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nim">inputStream.join(inputStream1)<br>           .where(<span class="hljs-number">0</span>).equalTo(<span class="hljs-number">1</span>)<br>           .window(<span class="hljs-type">Time</span>.seconds(<span class="hljs-number">5</span>))     <br>           .apply (new <span class="hljs-type">JoinFunction</span> () <span class="hljs-meta">&#123;...&#125;</span>);<br></code></pre></td></tr></table></figure><p>以上示例是在 5 秒的窗口中连接两个流，其中第一个流的第一个属性的连接条件等于另一个流的第二个属性。</p><h3 id="Split"><a href="#Split" class="headerlink" title="Split"></a>Split</h3><p>此功能根据条件将流拆分为两个或多个流。 当您获得混合流并且您可能希望单独处理每个数据流时，可以使用此方法。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs processing">SplitStream&lt;Integer&gt; <span class="hljs-built_in">split</span> = inputStream.<span class="hljs-built_in">split</span>(<span class="hljs-keyword">new</span> OutputSelector&lt;Integer&gt;() &#123;<br>    @Override<br>    <span class="hljs-keyword">public</span> Iterable&lt;<span class="hljs-keyword">String</span>&gt; select(Integer value) &#123;<br>        List&lt;<span class="hljs-keyword">String</span>&gt; output = <span class="hljs-keyword">new</span> ArrayList&lt;<span class="hljs-keyword">String</span>&gt;(); <br>        <span class="hljs-keyword">if</span> (value % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>            output.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;even&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            output.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;odd&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> output;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h3><p>此功能允许您从拆分流中选择特定流。   </p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lasso">SplitStream&lt;<span class="hljs-built_in">Integer</span>&gt; split;<br>DataStream&lt;<span class="hljs-built_in">Integer</span>&gt; even = split.<span class="hljs-keyword">select</span>(<span class="hljs-string">&quot;even&quot;</span>); <br>DataStream&lt;<span class="hljs-built_in">Integer</span>&gt; odd = split.<span class="hljs-keyword">select</span>(<span class="hljs-string">&quot;odd&quot;</span>); <br>DataStream&lt;<span class="hljs-built_in">Integer</span>&gt; <span class="hljs-literal">all</span> = split.<span class="hljs-keyword">select</span>(<span class="hljs-string">&quot;even&quot;</span>,<span class="hljs-string">&quot;odd&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="Project"><a href="#Project" class="headerlink" title="Project"></a>Project</h3><p>Project 函数允许您从事件流中选择属性子集，并仅将所选元素发送到下一个处理流。  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">DataStream&lt;Tuple4&lt;<span class="hljs-keyword">Integer</span>, <span class="hljs-keyword">Double</span>, <span class="hljs-keyword">String</span>, <span class="hljs-keyword">String</span>&gt;&gt; in = <span class="hljs-comment">// [...] </span><br>DataStream&lt;Tuple2&lt;<span class="hljs-keyword">String</span>, <span class="hljs-keyword">String</span>&gt;&gt; out = in.project(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p>上述函数从给定记录中选择属性号 2 和 3。 以下是示例输入和输出记录：  </p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">(1,10.0,A,B)</span>=&gt; <span class="hljs-comment">(B,A)</span><br><span class="hljs-comment">(2,20.0,C,D)</span>=&gt; <span class="hljs-comment">(D,C)</span><br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文主要介绍了 Flink Data 的常用转换方式：Map、FlatMap、Filter、KeyBy、Reduce、Fold、Aggregations、Window、WindowAll、Union、Window Join、Split、Select、Project 等。并用了点简单的 demo 介绍了如何使用，具体在项目中该如何将数据流转换成我们想要的格式，还需要根据实际情况对待。</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>单例模式</title>
    <link href="/2021/01/07/2020-12-30-design4/"/>
    <url>/2021/01/07/2020-12-30-design4/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>单例模式确保一个类只有一个实例，并提供一个全局访问点。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul><li>使用”急切”创建实例（饿汉式）<br>在JVM加载类时创建单例。保证了线程安全。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;<br>    <span class="hljs-comment">//静态初始化</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton uniqueInstance = <span class="hljs-keyword">new</span> Singleton();<br> <br><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-title">Singleton</span>(<span class="hljs-params"></span>)</span> &#123;&#125;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-function"><span class="hljs-title">getInstance</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> uniqueInstance;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用”双重检查加锁”，延迟实例化创建实例（懒汉式）<br>检查实例，如果不存在就进入同步代码块。进入代码块后，再检查一次，如果仍是null，才创建实例。<br>注意：只有第一次才彻底执行同步代码块的代码，大大减少getInstance方法的时候耗费。<br>volatile 关键词确保，当uniqueInstance变量被初始化成Singleton实例时，多个线程正确的处理uniqueInstance变量。  </li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;<br><span class="hljs-keyword">private</span> volatile <span class="hljs-keyword">static</span> Singleton uniqueInstance;<br> <br><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-title">Singleton</span>(<span class="hljs-params"></span>)</span> &#123;&#125;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-function"><span class="hljs-title">getInstance</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">if</span> (uniqueInstance == <span class="hljs-literal">null</span>) &#123;<br>synchronized (Singleton.class) &#123;<br><span class="hljs-keyword">if</span> (uniqueInstance == <span class="hljs-literal">null</span>) &#123;<br>uniqueInstance = <span class="hljs-keyword">new</span> Singleton();<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> uniqueInstance;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonClient</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span> &#123;<br>Singleton singleton = Singleton.getInstance();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JetBrains 开发IDE 2020.4 以下版本最新全家桶系列产品激活破解方法</title>
    <link href="/2021/01/07/2020-12-30-JetBrainsActivate/"/>
    <url>/2021/01/07/2020-12-30-JetBrainsActivate/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>2020-11-26日更新通知，jetbrains-agent这个项目停止了！但现在zhile.io大佬提供了一个新的思路方法大家可以试下！感谢zhile.io大佬这么多年的辛苦工作，希望大家也能理解！  </p><h2 id="新的思路方法"><a href="#新的思路方法" class="headerlink" title="新的思路方法"></a>新的思路方法</h2><p>Jetbrains家的产品有一个很良心的地方，他会允许你试用30天（这个数字写死在代码里了）以评估是否你真的需要为它而付费。<br>但很多时候会出现一种情况：IDE并不能按照我们实际的试用时间来计算。<br>我举个例子：如果我们开始了试用，然后媳妇生孩子要你回去陪产！陪产时我们并无空闲对IDE试用评估，它依旧算试用时间。（只是举个例子，或许你并没有女朋友）<br>发现了吗？你未能真的有30天来对它进行全面的试用评估，你甚至无法作出是否付费的决定。此时你会想要延长试用时间，然而Jetbrains并未提供相关功能，该怎么办？</p><p>事实上有一款插件可以实现这个功能，你或许可以用它来重置一下试用时间。但切记不要无休止的一直试用，这并不是这个插件的本意！  </p><h2 id="如何安装"><a href="#如何安装" class="headerlink" title="如何安装"></a>如何安装</h2><h3 id="插件市场安装："><a href="#插件市场安装：" class="headerlink" title="插件市场安装："></a>插件市场安装：</h3><p>在Settings/Preferences… -&gt; Plugins 内手动添加第三方插件仓库地址：<a href="https://plugins.zhile.io/">https://plugins.zhile.io</a><br>搜索：IDE Eval Reset插件进行安装。如果搜索不到请注意是否做好了上一步？网络是否通畅？<br>插件会提示安装成功。</p><h3 id="下载安装："><a href="#下载安装：" class="headerlink" title="下载安装："></a>下载安装：</h3><p>下载插件的zip包(联系我）<br>通常可以直接把zip包拖进IDE的窗口来进行插件的安装。如果无法拖动安装，你可以在Settings/Preferences… -&gt; Plugins 里手动安装插件（Install Plugin From Disk…）<br>插件会提示安装成功。</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>一般来说，在IDE窗口切出去或切回来时（窗口失去/得到焦点）会触发事件，检测是否长时间（25天）没有重置，给通知让你选择。（初次安装因为无法获取上次重置时间，会直接给予提示）<br>也可以手动唤出插件的主界面：<br>如果IDE没有打开项目，在Welcome界面点击菜单：Get Help -&gt; Eval Reset<br>如果IDE打开了项目，点击菜单：Help -&gt; Eval Reset<br>唤出的插件主界面中包含了一些显示信息，2个按钮，1个勾选项：<br>按钮：Reload 用来刷新界面上的显示信息。<br>按钮：Reset 点击会询问是否重置试用信息并重启IDE。选择Yes则执行重置操作并重启IDE生效，选择No则什么也不做。（此为手动重置方式）<br>勾选项：Auto reset before per restart 如果勾选了，则自勾选后每次重启/退出IDE时会自动重置试用信息，你无需做额外的事情。（此为自动重置方式）</p><h2 id="如何更新"><a href="#如何更新" class="headerlink" title="如何更新"></a>如何更新</h2><p>1). 插件更新机制（推荐）：<br>IDE会自行检测其自身和所安装插件的更新并给予提示。如果本插件有更新，你会收到提示看到更新日志，自行选择是否更新。<br>点击IDE的Check for Updates… 菜单手动检测IDE和所安装插件的更新。如果本插件有更新，你会收到提示看到更新日志，自行选择是否更新。<br>插件更新可能会需要重启IDE。<br>2). 手动更新：<br>从本页面下载最新的插件zip包安装更新。参考本文：下载安装小节。<br>插件更新需要重启IDE。</p><h2 id="一些说明"><a href="#一些说明" class="headerlink" title="一些说明"></a>一些说明</h2><p>本插件默认不会显示其主界面，如果你需要，参考本文：如何使用小节。<br>市场付费插件的试用信息也会一并重置。<br>对于某些付费插件（如: Iedis 2, MinBatis）来说，你可能需要去取掉javaagent配置（如果有）后重启IDE：<br>如果IDE没有打开项目，在Welcome界面点击菜单：Configure -&gt; Edit Custom VM Options… -&gt; 移除 -javaagent: 开头的行。<br>如果IDE打开了项目，点击菜单：Help -&gt; Edit Custom VM Options… -&gt; 移除 -javaagent: 开头的行。<br>重置需要重启IDE生效！<br>重置后并不弹出Licenses对话框让你选择输入License或试用，这和之前的重置脚本/插件不同（省去这烦人的一步）。<br>如果长达25天不曾有任何重置动作，IDE会有通知询问你是否进行重置。<br>如果勾选：Auto reset before per restart ，重置是静默无感知的。<br>简单来说：勾选了Auto reset before per restart则无需再管，一劳永逸。</p><h2 id="开源地址：https-gitee-com-pengzhile-ide-eval-resetter"><a href="#开源地址：https-gitee-com-pengzhile-ide-eval-resetter" class="headerlink" title="开源地址：https://gitee.com/pengzhile/ide-eval-resetter"></a>开源地址：<a href="https://gitee.com/pengzhile/ide-eval-resetter">https://gitee.com/pengzhile/ide-eval-resetter</a></h2>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>工厂模式</title>
    <link href="/2021/01/07/2020-12-29-design3/"/>
    <url>/2021/01/07/2020-12-29-design3/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>工厂方法和抽象工厂模式可以将对象的创建封装起来，以便于得到更松耦合、更有弹性的设计。</p><h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><p>定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类。</p><h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><p>提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。</p><h2 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h2><ul><li>所有的工厂都是用来封装对象的创建。  </li><li>工厂方法使用继承：把对象的创建委托给子类，子类实现工厂方法来创建对象。</li><li>抽象工厂使用对象组合：对象的创建被实现在工厂接口所暴露出来的方法中。</li><li>所有的工厂模式都通过减少应用程序和具体类之间的依赖促进松耦合。</li><li>工厂方法允许类将实例化延迟到子类进行。</li><li>抽象工厂创建相关的对象家族，而不需要依赖它们的具体类。</li><li>依赖倒置原则，指导我们避免依赖具体类型，而要尽量依赖抽象。</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>顾客从芝加哥或纽约披萨店购买不同风味的披萨。</p><h3 id="定义比萨、披萨店、原料工厂抽象类"><a href="#定义比萨、披萨店、原料工厂抽象类" class="headerlink" title="定义比萨、披萨店、原料工厂抽象类"></a>定义比萨、披萨店、原料工厂抽象类</h3><ul><li>定义比萨抽象类  </li></ul><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 比萨抽象类（比萨店的产品，客户只依赖这个抽象类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> class Pizza &#123;<br><span class="hljs-keyword">String</span> name;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 比萨会用到的原料</span><br><span class="hljs-comment"> */</span><br>Dough dough;<br>Sauce sauce;<br>Veggies veggies[];<br>Cheese cheese;<br>Pepperoni pepperoni;<br>Clams clam;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 把prepare方法声明成抽象，在这个方法中，我们需要收集比萨所需的原料，原料来自原料工厂</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> prepare();<br><br><span class="hljs-keyword">void</span> bake() &#123;<br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Bake for 25 minutes at 350&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">void</span> cut() &#123;<br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Cutting the pizza into diagonal slices&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-built_in">box</span>() &#123;<br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Place pizza in official PizzaStore box&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">void</span> setName(<span class="hljs-keyword">String</span> name) &#123;<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><br><span class="hljs-keyword">String</span> getName() &#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> toString() &#123;<br>StringBuffer result = <span class="hljs-keyword">new</span> StringBuffer();<br>result.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;---- &quot;</span> + name + <span class="hljs-string">&quot; ----\n&quot;</span>);<br><span class="hljs-keyword">if</span> (dough != <span class="hljs-keyword">null</span>) &#123;<br>result.<span class="hljs-built_in">append</span>(dough);<br>result.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (sauce != <span class="hljs-keyword">null</span>) &#123;<br>result.<span class="hljs-built_in">append</span>(sauce);<br>result.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (cheese != <span class="hljs-keyword">null</span>) &#123;<br>result.<span class="hljs-built_in">append</span>(cheese);<br>result.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (veggies != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; veggies.length; i++) &#123;<br>result.<span class="hljs-built_in">append</span>(veggies[i]);<br><span class="hljs-keyword">if</span> (i &lt; veggies.length<span class="hljs-number">-1</span>) &#123;<br>result.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;, &quot;</span>);<br>&#125;<br>&#125;<br>result.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (clam != <span class="hljs-keyword">null</span>) &#123;<br>result.<span class="hljs-built_in">append</span>(clam);<br>result.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (pepperoni != <span class="hljs-keyword">null</span>) &#123;<br>result.<span class="hljs-built_in">append</span>(pepperoni);<br>result.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> result.toString();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>定义披萨店抽象类  </li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 披萨店抽象类（工厂方法：提供一个抽象接口来创建一个产品）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PizzaStore</span> </span>&#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建不同风味的披萨（工厂方法，子类由工厂方法实例化）</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param </span>item 以披萨类型作为参数，可以返回许多类型的比萨产品</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> Pizza createPizza(<span class="hljs-built_in">String</span> item);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 披萨共有处理流程</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> Pizza <span class="hljs-function"><span class="hljs-title">orderPizza</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> <span class="hljs-keyword">type</span></span>)</span> &#123;<br><span class="hljs-comment">//获取一个比萨，开=【poui涉及3原料工厂</span><br>Pizza pizza = createPizza(<span class="hljs-keyword">type</span>);<br>System.out.println(<span class="hljs-string">&quot;--- Making a &quot;</span> + pizza.getName() + <span class="hljs-string">&quot; ---&quot;</span>);<br><span class="hljs-comment">//工厂将被要求准备原料</span><br>pizza.prepare();<br><span class="hljs-comment">//烘烤</span><br>pizza.bake();<br><span class="hljs-comment">//切片</span><br>pizza.cut();<br><span class="hljs-comment">//装盒</span><br>pizza.box();<br><span class="hljs-keyword">return</span> pizza;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>定义原料工厂抽象类</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 原料工厂(抽象工厂）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">PizzaIngredientFactory</span> &#123;<br><br><span class="hljs-comment">//面团</span><br><span class="hljs-function">Dough <span class="hljs-title">createDough</span>(<span class="hljs-params"></span>)</span>;<br><br><span class="hljs-comment">//酱</span><br><span class="hljs-function">Sauce <span class="hljs-title">createSauce</span>(<span class="hljs-params"></span>)</span>;<br><br><span class="hljs-comment">//芝士</span><br><span class="hljs-function">Cheese <span class="hljs-title">createCheese</span>(<span class="hljs-params"></span>)</span>;<br><br><span class="hljs-comment">//蔬菜</span><br><span class="hljs-function">Veggies[] <span class="hljs-title">createVeggies</span>(<span class="hljs-params"></span>)</span>;<br><br><span class="hljs-comment">//香肠</span><br><span class="hljs-function">Pepperoni <span class="hljs-title">createPepperoni</span>(<span class="hljs-params"></span>)</span>;<br><br><span class="hljs-comment">//蛤蜊</span><br><span class="hljs-function">Clams <span class="hljs-title">createClam</span>(<span class="hljs-params"></span>)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="定义原料抽象"><a href="#定义原料抽象" class="headerlink" title="定义原料抽象"></a>定义原料抽象</h3><ul><li><p>面团   </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 面团（原料）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">Dough</span> &#123;<br>String toString();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>酱</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 酱</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">Sauce</span> &#123;<br>String toString();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>芝士</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 芝士</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">Cheese</span> &#123;<br>String toString();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>蔬菜</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 蔬菜（工厂原料）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">Veggies</span> &#123;<br>String toString();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>香肠</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 香肠</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">Pepperoni</span> &#123;<br>String toString();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>蛤蜊</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 蛤蜊</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">Clams</span> &#123;<br>String toString();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实现原料"><a href="#实现原料" class="headerlink" title="实现原料"></a>实现原料</h3></li><li><p>定义二种面团  </p></li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 一种面团</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThickCrustDough</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Dough</span></span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> toString() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ThickCrust style extra thick crust dough&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>另一种  </p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 另一种面团</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThinCrustDough</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Dough</span></span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> toString() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Thin Crust Dough&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>定义二种酱</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 梅子西红柿酱</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PlumTomatoSauce</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Sauce</span></span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> toString() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Tomato sauce with plum tomatoes&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>另一种</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 意大利西红柿酱</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MarinaraSauce</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Sauce</span></span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> toString() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Marinara Sauce&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>定义三种芝士</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 一种芝士</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MozzarellaCheese</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Cheese</span></span> </span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> toString() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Shredded Mozzarella&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>另一种</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 另一种芝士</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ParmesanCheese</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Cheese</span></span> </span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> toString() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Shredded Parmesan&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>另一种</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 另一种芝士</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReggianoCheese</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Cheese</span></span> </span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> toString() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Reggiano Cheese&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>定义七种蔬菜</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 黑橄榄</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BlackOlives</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Veggies</span></span> </span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> toString() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Black Olives&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>另一种</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 茄子</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Eggplant</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Veggies</span></span> </span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> toString() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Eggplant&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>另一种</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 大蒜</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Garlic</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Veggies</span></span> </span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> toString() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Garlic&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>另一种</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 蘑菇</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mushroom</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Veggies</span></span> </span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> toString() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Mushrooms&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>另一种</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 洋葱</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Onion</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Veggies</span></span> </span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> toString() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Onion&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>另一种</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 辣椒</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedPepper</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Veggies</span></span> </span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> toString() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Red Pepper&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>另一种</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 菠菜</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Spinach</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Veggies</span></span> </span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> toString() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Spinach&quot;</span>;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>定义香肠</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SlicedPepperoni</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Pepperoni</span></span> </span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> toString() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Sliced Pepperoni&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>定义二种蛤蜊</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FrozenClams</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Clams</span></span> </span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> toString() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Frozen Clams from Chesapeake Bay&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>另一种</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FreshClams</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Clams</span></span> </span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> toString() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Fresh Clams from Long Island Sound&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实现四种披萨"><a href="#实现四种披萨" class="headerlink" title="实现四种披萨"></a>实现四种披萨</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CheesePizza</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Pizza</span> </span>&#123;<br><span class="hljs-type">PizzaIngredientFactory</span> ingredientFactory;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 要制作比萨，需要工厂提供原料，所以每个比萨类都需要从构造器参数中得到一个工厂，并把这个工厂存储在一个实例变量中</span><br><span class="hljs-comment"> * @param ingredientFactory</span><br><span class="hljs-comment"> */</span><br>public <span class="hljs-type">CheesePizza</span>(<span class="hljs-type">PizzaIngredientFactory</span> ingredientFactory) &#123;<br><span class="hljs-keyword">this</span>.ingredientFactory = ingredientFactory;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建比萨所需的原料</span><br><span class="hljs-comment"> */</span><br>void prepare() &#123;<br><span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;Preparing &quot;</span> + name);<br>dough = ingredientFactory.createDough();<br>sauce = ingredientFactory.createSauce();<br>cheese = ingredientFactory.createCheese();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PepperoniPizza</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Pizza</span> </span>&#123;<br><span class="hljs-type">PizzaIngredientFactory</span> ingredientFactory;<br> <br>public <span class="hljs-type">PepperoniPizza</span>(<span class="hljs-type">PizzaIngredientFactory</span> ingredientFactory) &#123;<br><span class="hljs-keyword">this</span>.ingredientFactory = ingredientFactory;<br>&#125;<br> <br>void prepare() &#123;<br><span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;Preparing &quot;</span> + name);<br>dough = ingredientFactory.createDough();<br>sauce = ingredientFactory.createSauce();<br>cheese = ingredientFactory.createCheese();<br>veggies = ingredientFactory.createVeggies();<br>pepperoni = ingredientFactory.createPepperoni();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VeggiePizza</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Pizza</span> </span>&#123;<br><span class="hljs-type">PizzaIngredientFactory</span> ingredientFactory;<br> <br>public <span class="hljs-type">VeggiePizza</span>(<span class="hljs-type">PizzaIngredientFactory</span> ingredientFactory) &#123;<br><span class="hljs-keyword">this</span>.ingredientFactory = ingredientFactory;<br>&#125;<br> <br>void prepare() &#123;<br><span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;Preparing &quot;</span> + name);<br>dough = ingredientFactory.createDough();<br>sauce = ingredientFactory.createSauce();<br>cheese = ingredientFactory.createCheese();<br>veggies = ingredientFactory.createVeggies();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClamPizza</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Pizza</span> </span>&#123;<br><span class="hljs-type">PizzaIngredientFactory</span> ingredientFactory;<br> <br>public <span class="hljs-type">ClamPizza</span>(<span class="hljs-type">PizzaIngredientFactory</span> ingredientFactory) &#123;<br><span class="hljs-keyword">this</span>.ingredientFactory = ingredientFactory;<br>&#125;<br> <br>void prepare() &#123;<br><span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;Preparing &quot;</span> + name);<br>dough = ingredientFactory.createDough();<br>sauce = ingredientFactory.createSauce();<br>cheese = ingredientFactory.createCheese();<br>clam = ingredientFactory.createClam();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实现芝加哥、纽约披萨店"><a href="#实现芝加哥、纽约披萨店" class="headerlink" title="实现芝加哥、纽约披萨店"></a>实现芝加哥、纽约披萨店</h3><ul><li>芝加哥披萨店</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 芝加哥披萨店</span><br><span class="hljs-comment"> */</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChicagoPizzaStore</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">PizzaStore</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 选择原料工厂，创建不同原料的相同风味披萨</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">Pizza</span> createPizza(<span class="hljs-type">String</span> item) &#123;<br>        <span class="hljs-type">Pizza</span> pizza = <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">//芝加哥披萨店会用到芝加哥比萨原料工厂，由改原料工厂负责生产所有芝加哥风味比萨所需要的原料</span><br>        <span class="hljs-type">PizzaIngredientFactory</span> ingredientFactory = <span class="hljs-keyword">new</span> <span class="hljs-type">ChicagoPizzaIngredientFactory</span>();<br><br>        <span class="hljs-keyword">if</span> (item.equals(<span class="hljs-string">&quot;cheese&quot;</span>)) &#123;<br>            <span class="hljs-comment">//把原料工厂传递给每一个比萨，以便比萨能从工厂中取得原料</span><br>            pizza = <span class="hljs-keyword">new</span> <span class="hljs-type">CheesePizza</span>(ingredientFactory);<br>            pizza.setName(<span class="hljs-string">&quot;Chicago Style Cheese Pizza&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.equals(<span class="hljs-string">&quot;veggie&quot;</span>)) &#123;<br>            pizza = <span class="hljs-keyword">new</span> <span class="hljs-type">VeggiePizza</span>(ingredientFactory);<br>            pizza.setName(<span class="hljs-string">&quot;Chicago Style Veggie Pizza&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.equals(<span class="hljs-string">&quot;clam&quot;</span>)) &#123;<br>            pizza = <span class="hljs-keyword">new</span> <span class="hljs-type">ClamPizza</span>(ingredientFactory);<br>            pizza.setName(<span class="hljs-string">&quot;Chicago Style Clam Pizza&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.equals(<span class="hljs-string">&quot;pepperoni&quot;</span>)) &#123;<br>            pizza = <span class="hljs-keyword">new</span> <span class="hljs-type">PepperoniPizza</span>(ingredientFactory);<br>            pizza.setName(<span class="hljs-string">&quot;Chicago Style Pepperoni Pizza&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> pizza;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>纽约披萨店</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> NYPizzaStore extends PizzaStore &#123;<br> <br>protected Pizza create<span class="hljs-constructor">Pizza(String <span class="hljs-params">item</span>)</span> &#123;<br>Pizza pizza = null;<br>PizzaIngredientFactory ingredientFactory = <span class="hljs-keyword">new</span> <span class="hljs-constructor">NYPizzaIngredientFactory()</span>;<br> <br><span class="hljs-keyword">if</span> (item.equals(<span class="hljs-string">&quot;cheese&quot;</span>)) &#123;<br>  <br>pizza = <span class="hljs-keyword">new</span> <span class="hljs-constructor">CheesePizza(<span class="hljs-params">ingredientFactory</span>)</span>;<br>pizza.set<span class="hljs-constructor">Name(<span class="hljs-string">&quot;New York Style Cheese Pizza&quot;</span>)</span>;<br>  <br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.equals(<span class="hljs-string">&quot;veggie&quot;</span>)) &#123;<br> <br>pizza = <span class="hljs-keyword">new</span> <span class="hljs-constructor">VeggiePizza(<span class="hljs-params">ingredientFactory</span>)</span>;<br>pizza.set<span class="hljs-constructor">Name(<span class="hljs-string">&quot;New York Style Veggie Pizza&quot;</span>)</span>;<br> <br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.equals(<span class="hljs-string">&quot;clam&quot;</span>)) &#123;<br> <br>pizza = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ClamPizza(<span class="hljs-params">ingredientFactory</span>)</span>;<br>pizza.set<span class="hljs-constructor">Name(<span class="hljs-string">&quot;New York Style Clam Pizza&quot;</span>)</span>;<br> <br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.equals(<span class="hljs-string">&quot;pepperoni&quot;</span>)) &#123;<br><br>pizza = <span class="hljs-keyword">new</span> <span class="hljs-constructor">PepperoniPizza(<span class="hljs-params">ingredientFactory</span>)</span>;<br>pizza.set<span class="hljs-constructor">Name(<span class="hljs-string">&quot;New York Style Pepperoni Pizza&quot;</span>)</span>;<br> <br>&#125; <br>return pizza;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实现芝加哥、纽约原料工厂"><a href="#实现芝加哥、纽约原料工厂" class="headerlink" title="实现芝加哥、纽约原料工厂"></a>实现芝加哥、纽约原料工厂</h3><ul><li>芝加哥原料工厂</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 芝加哥披萨原料工厂</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChicagoPizzaIngredientFactory</span> <span class="hljs-title">implements</span> <span class="hljs-title">PizzaIngredientFactory</span> </span>&#123;<br><br><span class="hljs-keyword">public</span> Dough <span class="hljs-function"><span class="hljs-title">createDough</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ThickCrustDough();<br>&#125;<br><br><span class="hljs-keyword">public</span> Sauce <span class="hljs-function"><span class="hljs-title">createSauce</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> PlumTomatoSauce();<br>&#125;<br><br><span class="hljs-keyword">public</span> Cheese <span class="hljs-function"><span class="hljs-title">createCheese</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MozzarellaCheese();<br>&#125;<br><br><span class="hljs-keyword">public</span> Veggies[] <span class="hljs-function"><span class="hljs-title">createVeggies</span>(<span class="hljs-params"></span>)</span> &#123;<br>Veggies veggies[] = &#123; <span class="hljs-keyword">new</span> BlackOlives(), <br>                      <span class="hljs-keyword">new</span> Spinach(), <br>                      <span class="hljs-keyword">new</span> Eggplant() &#125;;<br><span class="hljs-keyword">return</span> veggies;<br>&#125;<br><br><span class="hljs-keyword">public</span> Pepperoni <span class="hljs-function"><span class="hljs-title">createPepperoni</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> SlicedPepperoni();<br>&#125;<br><br><span class="hljs-keyword">public</span> Clams <span class="hljs-function"><span class="hljs-title">createClam</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> FrozenClams();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>纽约原料工厂</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NYPizzaIngredientFactory</span> <span class="hljs-title">implements</span> <span class="hljs-title">PizzaIngredientFactory</span> </span>&#123;<br> <br><span class="hljs-keyword">public</span> Dough <span class="hljs-function"><span class="hljs-title">createDough</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ThinCrustDough();<br>&#125;<br> <br><span class="hljs-keyword">public</span> Sauce <span class="hljs-function"><span class="hljs-title">createSauce</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MarinaraSauce();<br>&#125;<br> <br><span class="hljs-keyword">public</span> Cheese <span class="hljs-function"><span class="hljs-title">createCheese</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ReggianoCheese();<br>&#125;<br> <br><span class="hljs-keyword">public</span> Veggies[] <span class="hljs-function"><span class="hljs-title">createVeggies</span>(<span class="hljs-params"></span>)</span> &#123;<br>Veggies veggies[] = &#123; <span class="hljs-keyword">new</span> Garlic(), <span class="hljs-keyword">new</span> Onion(), <span class="hljs-keyword">new</span> Mushroom(), <span class="hljs-keyword">new</span> RedPepper() &#125;;<br><span class="hljs-keyword">return</span> veggies;<br>&#125;<br> <br><span class="hljs-keyword">public</span> Pepperoni <span class="hljs-function"><span class="hljs-title">createPepperoni</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> SlicedPepperoni();<br>&#125;<br><br><span class="hljs-keyword">public</span> Clams <span class="hljs-function"><span class="hljs-title">createClam</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> FreshClams();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> PizzaTestDrive &#123;<br> <br>public static void main(String<span class="hljs-literal">[]</span> args) &#123;<br>PizzaStore nyStore = <span class="hljs-keyword">new</span> <span class="hljs-constructor">NYPizzaStore()</span>;<br><span class="hljs-comment">//一个芝加哥比萨店</span><br>PizzaStore chicagoStore = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ChicagoPizzaStore()</span>;<br> <br>Pizza pizza = nyStore.order<span class="hljs-constructor">Pizza(<span class="hljs-string">&quot;cheese&quot;</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;Ethan ordered a &quot;</span> + pizza + <span class="hljs-string">&quot;\n&quot;</span>);<br><br><span class="hljs-comment">//接受订单</span><br>pizza = chicagoStore.order<span class="hljs-constructor">Pizza(<span class="hljs-string">&quot;cheese&quot;</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;Joel ordered a &quot;</span> + pizza + <span class="hljs-string">&quot;\n&quot;</span>);<br><br>pizza = nyStore.order<span class="hljs-constructor">Pizza(<span class="hljs-string">&quot;clam&quot;</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;Ethan ordered a &quot;</span> + pizza + <span class="hljs-string">&quot;\n&quot;</span>);<br> <br>pizza = chicagoStore.order<span class="hljs-constructor">Pizza(<span class="hljs-string">&quot;clam&quot;</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;Joel ordered a &quot;</span> + pizza + <span class="hljs-string">&quot;\n&quot;</span>);<br><br>pizza = nyStore.order<span class="hljs-constructor">Pizza(<span class="hljs-string">&quot;pepperoni&quot;</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;Ethan ordered a &quot;</span> + pizza + <span class="hljs-string">&quot;\n&quot;</span>);<br> <br>pizza = chicagoStore.order<span class="hljs-constructor">Pizza(<span class="hljs-string">&quot;pepperoni&quot;</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;Joel ordered a &quot;</span> + pizza + <span class="hljs-string">&quot;\n&quot;</span>);<br><br>pizza = nyStore.order<span class="hljs-constructor">Pizza(<span class="hljs-string">&quot;veggie&quot;</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;Ethan ordered a &quot;</span> + pizza + <span class="hljs-string">&quot;\n&quot;</span>);<br> <br>pizza = chicagoStore.order<span class="hljs-constructor">Pizza(<span class="hljs-string">&quot;veggie&quot;</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;Joel ordered a &quot;</span> + pizza + <span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>python 多进程初探</title>
    <link href="/2021/01/07/2020-12-26-pyparallel/"/>
    <url>/2021/01/07/2020-12-26-pyparallel/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>装饰者模式</title>
    <link href="/2021/01/07/2020-12-23-design2/"/>
    <url>/2021/01/07/2020-12-23-design2/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。装饰者模式动态地将责任附加到对象上，若要扩展功能，装饰者提供了比继承更有弹性的替代方案。  </p><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p>Componet<br><img src="/images/design/Component.png" alt="avatar"><br>每个组件（ConcreteComponent）都可以单独使用，或者被装饰者包起来使用</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="定义抽象组件（超类）"><a href="#定义抽象组件（超类）" class="headerlink" title="定义抽象组件（超类）"></a>定义抽象组件（超类）</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php">package decorate;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 超类：抽象组件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Beverage</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 饮料描述</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">String</span> description = <span class="hljs-string">&quot;Unknown Beverage&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> getDescription()&#123;<span class="hljs-keyword">return</span> description;&#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 饮料价钱</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">double</span> cost();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="定义装饰者抽象类"><a href="#定义装饰者抽象类" class="headerlink" title="定义装饰者抽象类"></a>定义装饰者抽象类</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> decorate;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 抽象装饰者</span><br><span class="hljs-comment"> * 装饰者抽象类</span><br><span class="hljs-comment"> */</span><br>public <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CondimentDecorator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Beverage</span></span>&#123;<br><br>    public <span class="hljs-keyword">abstract</span> <span class="hljs-type">String</span> getDescription();<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建三种被装饰者（具体组件）"><a href="#创建三种被装饰者（具体组件）" class="headerlink" title="创建三种被装饰者（具体组件）"></a>创建三种被装饰者（具体组件）</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> decorate;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 具体组件</span><br><span class="hljs-comment"> * 扩展自Beverage，因为是饮料：另一种咖啡</span><br><span class="hljs-comment"> */</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DarkRoast</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Beverage</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置饮料描述</span><br><span class="hljs-comment">     */</span><br>    public <span class="hljs-type">DarkRoast</span>()&#123;<br>        description = <span class="hljs-string">&quot;Dark Roast Coffee&quot;</span>;<br>    &#125;<br><br>    public double cost()&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0.99</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>另一个被装饰者</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> decorate;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 具体组件</span><br><span class="hljs-comment"> * 扩展自Beverage，因为是饮料：浓缩咖啡</span><br><span class="hljs-comment"> */</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Espresso</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Beverage</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置饮料描述</span><br><span class="hljs-comment">     */</span><br>    public <span class="hljs-type">Espresso</span>()&#123;<br>        description = <span class="hljs-string">&quot;Espresso&quot;</span>;<br>    &#125;<br><br>    public double cost()&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1.99</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>另一个被装饰者</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> decorate;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 具体组件</span><br><span class="hljs-comment"> * 另一种饮料：综合咖啡</span><br><span class="hljs-comment"> */</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HouseBlend</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Beverage</span></span>&#123;<br><br>    public <span class="hljs-type">HouseBlend</span>()&#123;<br>        description = <span class="hljs-string">&quot;House Blend Coffee&quot;</span>;<br>    &#125;<br><br>    public double cost()&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0.89</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建三种装饰者（具体装饰者）"><a href="#创建三种装饰者（具体装饰者）" class="headerlink" title="创建三种装饰者（具体装饰者）"></a>创建三种装饰者（具体装饰者）</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> decorate;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 具体装饰者，扩展自装饰者抽象</span><br><span class="hljs-comment"> * 摩卡</span><br><span class="hljs-comment"> */</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mocha</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">CondimentDecorator</span> </span>&#123;<br>    <span class="hljs-comment">//用一个实例变量记录饮料</span><br>    <span class="hljs-type">Beverage</span> beverage;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 让被装饰者（饮料）当作构造器的参数被记录到实例变量</span><br><span class="hljs-comment">     * @param beverage 被装饰者</span><br><span class="hljs-comment">     */</span><br>    public <span class="hljs-type">Mocha</span>(<span class="hljs-type">Beverage</span> beverage)&#123;<br>        <span class="hljs-keyword">this</span>.beverage = beverage;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 完成描述饮料及调料</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    public <span class="hljs-type">String</span> getDescription()&#123;<br>        <span class="hljs-keyword">return</span> beverage.getDescription() + <span class="hljs-string">&quot;,Mocha&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 调用被装饰对象cost以计算价钱，然后再加上mocha的价钱，得到最后结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    public double cost() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0.20</span>+beverage.cost();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>另一个装饰者</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package decorate;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 另一个装饰者（调料）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Soy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">CondimentDecorator</span></span>&#123;<br>    <span class="hljs-keyword">private</span> Beverage beverage;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">Soy</span>(<span class="hljs-params">Beverage beverage</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.beverage = beverage;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> double <span class="hljs-function"><span class="hljs-title">cost</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0.5</span>+beverage.cost();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getDescription</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> beverage.getDescription() + <span class="hljs-string">&quot;,Soy&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>另一个装饰者</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package decorate;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 另一个装饰者（调料）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Whip</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">CondimentDecorator</span></span>&#123;<br>    <span class="hljs-keyword">private</span> Beverage beverage;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">Whip</span>(<span class="hljs-params">Beverage beverage</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.beverage = beverage;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> double <span class="hljs-function"><span class="hljs-title">cost</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0.9</span>+beverage.cost();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getDescription</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> beverage.getDescription() + <span class="hljs-string">&quot;,Whip&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试装饰者模式"><a href="#测试装饰者模式" class="headerlink" title="测试装饰者模式"></a>测试装饰者模式</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">package decorate;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 测试装饰者模式</span><br><span class="hljs-comment"> * 组件（咖啡）+各种装饰者（调料）</span><br><span class="hljs-comment"> */</span><br>public <span class="hljs-keyword">class</span> StarbuzzCoffee &#123;<br> <br>public static void main(String args<span class="hljs-literal">[]</span>) &#123;<br>Beverage beverage = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Espresso()</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(beverage.get<span class="hljs-constructor">Description()</span> <br>+ <span class="hljs-string">&quot; $&quot;</span> + beverage.cost<span class="hljs-literal">()</span>);<br> <br>Beverage beverage2 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">DarkRoast()</span>;<br>beverage2 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Mocha(<span class="hljs-params">beverage2</span>)</span>;<br>beverage2 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Mocha(<span class="hljs-params">beverage2</span>)</span>;<br>beverage2 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Whip(<span class="hljs-params">beverage2</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(beverage2.get<span class="hljs-constructor">Description()</span><br>+ <span class="hljs-string">&quot; $&quot;</span> + beverage2.cost<span class="hljs-literal">()</span>);<br> <br>Beverage beverage3 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">HouseBlend()</span>;<br>beverage3 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Soy(<span class="hljs-params">beverage3</span>)</span>;<br>beverage3 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Mocha(<span class="hljs-params">beverage3</span>)</span>;<br>beverage3 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Whip(<span class="hljs-params">beverage3</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(beverage3.get<span class="hljs-constructor">Description()</span> <br>+ <span class="hljs-string">&quot; $&quot;</span> + beverage3.cost<span class="hljs-literal">()</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/01/07/hello-world/"/>
    <url>/2021/01/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="部署到远程站点"><a href="#部署到远程站点" class="headerlink" title="部署到远程站点"></a>部署到远程站点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>观察者模式</title>
    <link href="/2021/01/07/2020-12-21-design1/"/>
    <url>/2021/01/07/2020-12-21-design1/</url>
    
    <content type="html"><![CDATA[<h2 id="创建被观察对象"><a href="#创建被观察对象" class="headerlink" title="创建被观察对象"></a>创建被观察对象</h2><h3 id="抽象主题接口"><a href="#抽象主题接口" class="headerlink" title="抽象主题接口"></a>抽象主题接口</h3><ul><li>对观察者的操作。必需功能有观察者的注册、删除以及主题状态发生改变时通知观察者</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package watch;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 主题</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">Subject</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 注册观察者</span><br><span class="hljs-comment">     * @param o 观察者</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">registerObserver</span>(<span class="hljs-params">Observer o</span>)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除观察者</span><br><span class="hljs-comment">     * @param o 观察者</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">removeObserver</span>(<span class="hljs-params">Observer o</span>)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 主题状态改变通知观察者</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">notifyObservers</span>(<span class="hljs-params"></span>)</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="实现主题接口"><a href="#实现主题接口" class="headerlink" title="实现主题接口"></a>实现主题接口</h3><ul><li>创建主题时初始化观察者集合，维护所有观察者；</li><li>注册时把观察者放入集合；</li><li>删除时把观察者从集合中移除；</li><li>主题状态发生改变时遍历观察者集合，通知观察者。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> watch;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实现主题接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WeatherData</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Subject</span> </span>&#123;<br><br>    <span class="hljs-comment">//观察者list，构造器中建立</span><br>    <span class="hljs-keyword">private</span> List&lt;Observer&gt; observers;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">float</span> temperature;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">float</span> humidity;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">float</span> pressure;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">WeatherData</span><span class="hljs-params">()</span></span>&#123;<br>        observers = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerObserver</span><span class="hljs-params">(Observer o)</span> </span>&#123;<br>        observers.add(o);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removeObserver</span><span class="hljs-params">(Observer o)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> i = observers.indexOf(o);<br>        <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">0</span>) &#123;<br>            observers.remove(i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 观察者都实现了 update 方法，所以我们知道如何通知他们</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">notifyObservers</span><span class="hljs-params">()</span> </span>&#123;<br>        observers.forEach(observer -&gt; observer.update(temperature, humidity, pressure));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 当从气象站得到更新观测值，我们通知观察者</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">measurementsChanged</span><span class="hljs-params">()</span> </span>&#123;<br>        notifyObservers();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试布告板</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> temperature</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> humidity</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pressure</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMeasurements</span><span class="hljs-params">(<span class="hljs-keyword">float</span> temperature, <span class="hljs-keyword">float</span> humidity, <span class="hljs-keyword">float</span> pressure)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.temperature = temperature;<br>        <span class="hljs-keyword">this</span>.humidity = humidity;<br>        <span class="hljs-keyword">this</span>.pressure = pressure;<br>        measurementsChanged();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">float</span> <span class="hljs-title">getTemperature</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> temperature;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">float</span> <span class="hljs-title">getHumidity</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> humidity;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">float</span> <span class="hljs-title">getPressure</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> pressure;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="创建观察者对象"><a href="#创建观察者对象" class="headerlink" title="创建观察者对象"></a>创建观察者对象</h2><h3 id="抽象观察者接口"><a href="#抽象观察者接口" class="headerlink" title="抽象观察者接口"></a>抽象观察者接口</h3><p>所有观察者都该实现 update 接口，以接收主题状态改动后接收通知  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> watch;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 观察者</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Observer</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 接收更新通知</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> temp</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> humidity</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pressure</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">float</span> temp, <span class="hljs-keyword">float</span> humidity, <span class="hljs-keyword">float</span> pressure)</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="抽象布告板接口"><a href="#抽象布告板接口" class="headerlink" title="抽象布告板接口"></a>抽象布告板接口</h3><p>布告板接口的作用就只是把状态改动后的结果显示出来  </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">package watch;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 布告板接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">DisplayElement</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 当布告板需要显示时</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-built_in">void</span> display();<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="观察者同时实现观察者和布告板接口"><a href="#观察者同时实现观察者和布告板接口" class="headerlink" title="观察者同时实现观察者和布告板接口"></a>观察者同时实现观察者和布告板接口</h3><ul><li>创建观察者时需传入主题对象，以作注册之用</li><li>实现布告板接口，把状态改动后的结果显示出来</li><li>实现观察者 update 接口，对数据进行处理，并调用布告遍接口使接口显示出来</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> watch;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实现布告板</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CurrentConditionsDisplay</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Observer</span>,<span class="hljs-title">DisplayElement</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">float</span> temperature;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">float</span> humidity;<br>    <span class="hljs-keyword">private</span> Subject weatherData;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造器需要主题作为注册之用</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> weatherData</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CurrentConditionsDisplay</span><span class="hljs-params">(Subject weatherData)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.weatherData = weatherData;<br>        weatherData.registerObserver(<span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 温度显示</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;现状: &quot;</span> + temperature<br>                + <span class="hljs-string">&quot; 度 和 &quot;</span> + humidity + <span class="hljs-string">&quot;% 湿度&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 把温度和湿度保存起来，然后调用显示方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> temp</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> humidity</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pressure</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">float</span> temp, <span class="hljs-keyword">float</span> humidity, <span class="hljs-keyword">float</span> pressure)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.temperature = temp;<br>        <span class="hljs-keyword">this</span>.humidity = humidity;<br>        display();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试程序"><a href="#测试程序" class="headerlink" title="测试程序"></a>测试程序</h2><ul><li>首先，建立一个主题对象 weatherData；</li><li>然后，建立布告板对象 currentDisplay，并把主题对象传给它们</li><li>最后，模拟新的踢气象测量</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package watch;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WeatherStation</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span> &#123;<br>        <span class="hljs-comment">//创建主题</span><br>        WeatherData weatherData = <span class="hljs-keyword">new</span> WeatherData();<br>        <span class="hljs-comment">//建立布告板</span><br>        CurrentConditionsDisplay currentDisplay = <span class="hljs-keyword">new</span> CurrentConditionsDisplay(weatherData);<br>        <span class="hljs-comment">//......其他布告板</span><br><br>        <span class="hljs-comment">//模拟天气数据</span><br>        weatherData.setMeasurements(<span class="hljs-number">80</span>, <span class="hljs-number">65</span>, <span class="hljs-number">30.</span>4f);<br>        weatherData.setMeasurements(<span class="hljs-number">82</span>, <span class="hljs-number">70</span>, <span class="hljs-number">29.</span>2f);<br>        weatherData.setMeasurements(<span class="hljs-number">78</span>, <span class="hljs-number">90</span>, <span class="hljs-number">29.</span>2f);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>maven-shade-plugin入门指南</title>
    <link href="/2021/01/07/2020-12-09-mvnshade/"/>
    <url>/2021/01/07/2020-12-09-mvnshade/</url>
    
    <content type="html"><![CDATA[<p>有时候，需要将复杂的项目，包括各种xml文件属性文件， 类， jar等等打包到一个可以执行的jar包中， 然后用java -jar  xxx.jar 来运行项目，这样简单方便，特别是在编写一些测试工具时，尤为重要。<br>但是经常发现打包后的项目无法启动， 其中一大类是您项目有问题， 但是这个相对好解决。<br>通过 maven-shade-plugin 生成的jar包，它包含所有的依赖 jar 包。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="配置-maven-shade-plugin"><a href="#配置-maven-shade-plugin" class="headerlink" title="配置 maven-shade-plugin"></a>配置 maven-shade-plugin</h3><p>maven-shade-plugin 将 goal shade:shade 绑定到 phase package 上。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span></span><br><span class="xml">     </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span></span><br><span class="xml">         </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="xml">             </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">             </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-shade-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">             </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">             </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="xml">                <span class="hljs-comment">&lt;!-- put your configurations here --&gt;</span></span><br><span class="xml">             <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="xml">             </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span></span><br><span class="xml">                 </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span></span><br><span class="xml">                     </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span></span><br><span class="xml">                     </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span></span><br><span class="xml">                        </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>shade<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span></span><br><span class="xml">                     <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span></span><br><span class="xml">                 <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span></span><br><span class="xml">             <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span></span><br><span class="xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span></span><br><span class="xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>执行命令：mvn clean package</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>将该工程依赖的部分 Jar(fastjson) 包 include/exclude 掉。</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-shade-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span></span><br><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span></span><br><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span></span><br><span class="xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>shade<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span></span><br><span class="xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span></span><br><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">minimizeJar</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">minimizeJar</span>&gt;</span></span><br><span class="xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">artifactSet</span>&gt;</span></span><br><span class="xml">                            <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span></span><br><span class="xml">                                <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>com.alibaba:fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span></span><br><span class="xml">                            <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span></span><br><span class="xml">                        <span class="hljs-tag">&lt;/<span class="hljs-name">artifactSet</span>&gt;</span></span><br><span class="xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="configuration的层级问题"><a href="#configuration的层级问题" class="headerlink" title="configuration的层级问题"></a>configuration的层级问题</h3><p><a href="https://stackoverflow.com/questions/33908315/what-is-the-difference-between-executions-and-configurations-in-a-maven-plugin">https://stackoverflow.com/questions/33908315/what-is-the-difference-between-executions-and-configurations-in-a-maven-plugin</a></p><h3 id="maven-shade-plugin-自动将所有不使用的类全部排除掉，将-uber-jar-最小化。"><a href="#maven-shade-plugin-自动将所有不使用的类全部排除掉，将-uber-jar-最小化。" class="headerlink" title="maven-shade-plugin 自动将所有不使用的类全部排除掉，将 uber-jar 最小化。"></a>maven-shade-plugin 自动将所有不使用的类全部排除掉，将 uber-jar 最小化。</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">minimizeJar</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">minimizeJar</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="默认会生成一个Jar包和一个以-“original-”为前缀的original-jar包，可以通过配置来指定original-jar的后缀名。"><a href="#默认会生成一个Jar包和一个以-“original-”为前缀的original-jar包，可以通过配置来指定original-jar的后缀名。" class="headerlink" title="默认会生成一个Jar包和一个以 “original-”为前缀的original-jar包，可以通过配置来指定original-jar的后缀名。"></a>默认会生成一个Jar包和一个以 “original-”为前缀的original-jar包，可以通过配置来指定original-jar的后缀名。</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="xml">    </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">shadedArtifactAttached</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">shadedArtifactAttached</span>&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- 名称会作为后缀在shade构件jar包后 --&gt;</span></span><br><span class="xml">    </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">shadedClassifierName</span>&gt;</span>jackofall<span class="hljs-tag">&lt;/<span class="hljs-name">shadedClassifierName</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>搭建Flink-1.11.2集群</title>
    <link href="/2021/01/07/2020-12-03-flink/"/>
    <url>/2021/01/07/2020-12-03-flink/</url>
    
    <content type="html"><![CDATA[<h2 id="以Flink-on-YARN模式启动"><a href="#以Flink-on-YARN模式启动" class="headerlink" title="以Flink on YARN模式启动"></a>以Flink on YARN模式启动</h2><p>把 Flink 运行在 YARN 上有两种方式，第一种方式是建立一个长期运行的 Flink YARN Session，然后向这个 Session 提交 Flink Job，多个任务同时运行时会共享资源。第二种方式是为单个任务启动一个 Flink 集群，这个任务会独占 Flink 集群的所有资源，任务结束即代表集群被回收。<br>另外，Flink on YARN 模式需要系统中设置了 YARN_CONF_DIR 或 HADOOP_CONF_DIR 环境变量，如果未设置，请在 ~/.profile 中加入以下内容，然后使用 source ~/.profile 命令使修改立即生效。  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 在这条命令前定义HADOOP_HOME环境变量</span><br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">HADOOP_CONF_DIR</span>=<span class="hljs-variable">$&#123;HADOOP_HOME&#125;</span>/etc/hadoop<br></code></pre></td></tr></table></figure><h3 id="Flink-YARN-Session"><a href="#Flink-YARN-Session" class="headerlink" title="Flink YARN Session"></a>Flink YARN Session</h3><p>添加环境变量（Flink 1.11必需）<br>vim ~/.bash_profile  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">HADOOP_CLASSPATH</span>=`hadoop classpath`<br></code></pre></td></tr></table></figure><p>使用下列命令来启动一个拥有 2 个 TaskManager 的 Flink 集群，每个 TaskManager 有 2 GB 内存，2 个 slot。<br>./bin/yarn-session.sh -n 2 -jm 1024m -tm 2048<br>启动 YARN Session 以后会输出 JobManager 的 Web Interface 地址.<br>仔细一看，Task Managers，Task Slots 怎么都是 0 呢？难道是哪里出了问题？其实并没有问题，从某个版本开始 Flink 允许动态分配资源，在没有任务的时候不分配 TaskManager。接下来我们就提交一个任务试试。<br>因为启动 YARN Session 以后 Flink Client 会一直在前台运行，所以先用 Ctrl + Z 快捷键把 Client 转到后台，然后再提交任务。   </p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">.<span class="hljs-regexp">/bin/</span>flink run .<span class="hljs-regexp">/examples/</span>batch/WordCount.jar<br></code></pre></td></tr></table></figure><h3 id="Single-Flink-job-on-YARN"><a href="#Single-Flink-job-on-YARN" class="headerlink" title="Single Flink job on YARN"></a>Single Flink job on YARN</h3><p>下面这条命令会为 wordcount 任务启动一个独占的 Flink 集群，任务结束集群即被回收。其中 -m 选项指定 Flink 集群的启动模式，-yn 选项指定 TaskManager 的数目。  </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/bin/</span>flink run -m YARN-cluster -yn <span class="hljs-number">2</span> .<span class="hljs-regexp">/examples/</span>batch/WordCount.jar<br></code></pre></td></tr></table></figure><h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><h3 id="虚拟内存不够-https-stackoverflow-com-questions-21005643-container-is-running-beyond-memory-limits"><a href="#虚拟内存不够-https-stackoverflow-com-questions-21005643-container-is-running-beyond-memory-limits" class="headerlink" title="虚拟内存不够(https://stackoverflow.com/questions/21005643/container-is-running-beyond-memory-limits)"></a>虚拟内存不够(<a href="https://stackoverflow.com/questions/21005643/container-is-running-beyond-memory-limits">https://stackoverflow.com/questions/21005643/container-is-running-beyond-memory-limits</a>)</h3><ul><li>mapred-site.xml</li></ul><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mojolicious"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.map.memory.mb<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>2048<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.reduce.memory.mb<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>2048<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.reduce.java.opts<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>-Xmx1638m<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.map.java.opts<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>-Xmx1638m<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ul><li>yarn-site.xml</li></ul><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.vmem-check-enabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>搭建Hadoop-2.9.2集群</title>
    <link href="/2021/01/07/2020-12-02-bigdataBuild/"/>
    <url>/2021/01/07/2020-12-02-bigdataBuild/</url>
    
    <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="在安装-Hadoop-之前，请确认集群的每台机器上均安装-JDK，以及搭配环境变量。"><a href="#在安装-Hadoop-之前，请确认集群的每台机器上均安装-JDK，以及搭配环境变量。" class="headerlink" title="在安装 Hadoop 之前，请确认集群的每台机器上均安装 JDK，以及搭配环境变量。"></a>在安装 Hadoop 之前，请确认集群的每台机器上均安装 JDK，以及搭配环境变量。</h3><ul><li>添加Java环境变量<br>vim ~/.bash_profile  </li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># Java Environment</span><br><span class="hljs-attribute">JAVA_HOME</span>=/usr/java/latest<br><span class="hljs-attribute">JRE_HOME</span>=<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/jre<br><span class="hljs-attribute">CLASSPATH</span>=.:$&#123;JAVA_HOME&#125;/lib:<span class="hljs-variable">$&#123;JRE_HOME&#125;</span>/lib<br><span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/bin:$PATH<br><span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:$HOME/bin<br><br><span class="hljs-builtin-name">export</span> PATH<br>```   <br><br>- 生效  <br>source ~/.bash_profile    <br><br><span class="hljs-comment">### 在三台机器/etc/hosts写入对应机器,修改对应 hostname</span><br><br></code></pre></td></tr></table></figure><p>172.29.32.21 openshift1<br>172.29.32.22 openshift2<br>172.29.32.23 openshift3</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>### 配置ssh无密码登陆（见之前文章）<br><br>### CentOS7关闭防火墙<br>- 查看防火墙状态<br>firewall-cmd --state<br>- 停止firewall<br>systemctl stop firewalld.service<br>- 禁止firewall开机启动<br>systemctl disable firewalld.service <br><br>## 下载二进制文件<br><br></code></pre></td></tr></table></figure><p>cd /opt<br>wget <a href="https://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/hadoop-2.9.2/hadoop-2.9.2.tar.gz">https://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/hadoop-2.9.2/hadoop-2.9.2.tar.gz</a><br>tar -zxvf hadoop-2.9.2.tar.gz -C .</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vala"><br><span class="hljs-meta">## 修改配置文件</span><br><br></code></pre></td></tr></table></figure><p>vim /etc/profile</p><h1 id="Flink-Environment"><a href="#Flink-Environment" class="headerlink" title="Flink Environment"></a>Flink Environment</h1><p>export HADOOP_HOME=/opt/hadoop-2.9.2<br>export PATH=$PATH:${HADOOP_HOME}/bin:${HADOOP_HOME}/sbin</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>### core-site.xml<br>指定 NameNode 的 IP 地址和端口号<br><br></code></pre></td></tr></table></figure><configuration>  <property>    <name>fs.default.name</name>    <value>hdfs://openshift1:9000</value>  </property></configuration><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><br>### <span class="hljs-selector-tag">hdfs-site</span><span class="hljs-selector-class">.xml</span><br><span class="hljs-selector-tag">dfs</span><span class="hljs-selector-class">.replication</span> 指定备份数目为 3，<span class="hljs-selector-tag">dfs</span><span class="hljs-selector-class">.name</span><span class="hljs-selector-class">.dir</span> 指定 <span class="hljs-selector-tag">NameNode</span> 的文件存储路径，<span class="hljs-selector-tag">dfs</span><span class="hljs-selector-class">.data</span><span class="hljs-selector-class">.dir</span> 指定 <span class="hljs-selector-tag">DataNode</span> 的文件存储路径。<br><br></code></pre></td></tr></table></figure><configuration>  <property>    <name>dfs.replication</name>    <value>3</value>  </property>  <property>    <name>dfs.namenode.name.dir</name>    <value>file:/opt/hadoop-2.9.2/data/namenode</value>  </property>  <property>    <name>dfs.datanode.data.dir</name>    <value>file:/opt/hadoop-2.9.2/data/datanode</value>  </property></configuration><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><br>### <span class="hljs-selector-tag">mapred-site</span><span class="hljs-selector-class">.xml</span><br><span class="hljs-selector-tag">cp</span> <span class="hljs-selector-tag">mapred-site</span><span class="hljs-selector-class">.xml</span><span class="hljs-selector-class">.template</span> <span class="hljs-selector-tag">mapred-site</span><span class="hljs-selector-class">.xml</span><br>然后修改<span class="hljs-selector-tag">mapred-site</span><span class="hljs-selector-class">.xml</span>的内容<br><br></code></pre></td></tr></table></figure><configuration>  <property>    <name>mapreduce.framework.name</name>    <value>yarn</value>  </property></configuration><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>### yarn-site.xml<br><br></code></pre></td></tr></table></figure><configuration><!-- Site specific YARN configuration properties -->  <property>    <name>yarn.nodemanager.aux-services</name>    <value>mapreduce_shuffle</value>  </property>  <property>    <name>yarn.nodemanager.aux-services.mapreduce.shuffle.class</name>    <value>org.apache.hadoop.mapred.ShuffleHandler</value>  </property>  <property>    <name>yarn.resourcemanager.resource-tracker.address</name>    <value>openshift1:8025</value>  </property>  <property>    <name>yarn.resourcemanager.scheduler.address</name>    <value>openshift1:8030</value>  </property>  <property>    <name>yarn.resourcemanager.address</name>    <value>openshift1:8050</value>  </property></configuration><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>### slaves<br>添加 slave 节点的 hostname 到该文件中<br><br></code></pre></td></tr></table></figure>openshift2openshift3<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>### 设置环境变量<br>修改hadoop-env.sh<br><br></code></pre></td></tr></table></figure>export JAVA_HOME=/usr/java/latest<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta">## 分发配置文件</span><br><br></code></pre></td></tr></table></figure>scp -r /opt/hadoop-2.9.2 openshift2:/opt/hadoop-2.9.2scp -r /opt/hadoop-2.9.2 openshift3:/opt/hadoop-2.9.2<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>## 启动集群<br><br>### 格式化 HDFS<br>hdfs namenode -format<br>### 启动集群<br>start-dfs.sh  <br>start-yarn.sh<br>### 使用 jps 命令查看服务运行情况<br>- master节点中运行的服务  <br><span class="hljs-number">25928</span> SecondaryNameNode  <br><span class="hljs-number">25742</span> NameNode  <br><span class="hljs-number">26387</span> Jps  <br><span class="hljs-number">26078</span> ResourceManager  <br>-  slave节点中运行的服务  <br><span class="hljs-number">24002</span> NodeManager  <br><span class="hljs-number">23899</span> DataNode  <br><span class="hljs-number">24179</span> Jps  <br>### 提交示例任务<br><br></code></pre></td></tr></table></figure>cd /opt/hadoop-2.9.2hdfs dfs -mkdir /wordcounthdfs dfs -mkdir /wordcount/input# 把当前路径下的 LICENSE.txt 文件复制到 HDFS 中hadoop fs -put ./LICENSE.txt /wordcount/input# 提交任务，最后两个参数分别指定任务的输入和输出hadoop jar $HADOOP_HOME/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.9.2.jar wordcount /wordcount/input /wordcount/output# 查看输出路径hadoop fs -ls /wordcount/output# 如果一切正常，该路径下包含两个文件# 第一个文件是空文件，表示任务运行成功/wordcount/output/_SUCCESS# 第二个文件是输出文件，统计了 LICENSE.txt 中每个单词出现的次数/wordcount/output/part-r-00000<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br><span class="hljs-comment">## 坑</span><br><br><span class="hljs-comment">### 多次NameNode执行format后DataNode启动不了解决方案</span><br><span class="hljs-number">1</span>.问题<br><br>执行start-dfs.sh后在进程中查看jps，发现NameNode启动，但DataNode没有<br><br><span class="hljs-number">2</span>.原因<br><br>在失败的.log文件中看到datanode的clusterID 和 namenode的clusterID 不一致<br><br>原因可能是多次Hadoop namenode -format导致clusterID不一致<br><br><span class="hljs-number">3</span>.解决方法<br><br><span class="hljs-number">1</span>）先去hadoop路径下的配置文件hdfs-site.xml可知dfs.namenode.name.dir的地址和dfs.datanode.data.dir的地址<br><br>默认：file:<span class="hljs-regexp">//</span><span class="hljs-variable">$&#123;hadoop.tmp.dir&#125;</span><span class="hljs-regexp">/dfs/</span>name、file:<span class="hljs-regexp">//</span><span class="hljs-variable">$&#123;hadoop.tmp.dir&#125;</span><span class="hljs-regexp">/dfs/</span>data<br><br>（<span class="hljs-regexp">/opt/m</span>odule<span class="hljs-regexp">/hadoop-2.7.2/</span>data<span class="hljs-regexp">/tmp/</span>dfs<span class="hljs-regexp">/name、/</span>opt<span class="hljs-regexp">/module/</span>hadoop-<span class="hljs-number">2.7</span>.<span class="hljs-number">2</span><span class="hljs-regexp">/data/</span>tmp<span class="hljs-regexp">/dfs/</span>data）<br><br><span class="hljs-number">2</span>）在...<span class="hljs-regexp">/name/</span>current/VERSION 中获得clusterID  <br><br></code></pre></td></tr></table></figure>more VERSION #Mon Sep 02 18:06:26 CST 2019namespaceID=1033971221clusterID=CID-98e754ef-ad92-49f8-88b2-6830888f2d48cTime=0storageType=NAME_NODEblockpoolID=BP-1400239548-192.168.1.201-1567418785939layoutVersion=-63<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">3</span>）将clusterID修改到...<span class="hljs-regexp">/dfs/</span>data<span class="hljs-regexp">/current/</span>VERSION（所有启动不了DataNode的节点都要改）<br><br></code></pre></td></tr></table></figure>vi VERSION #Sun Sep 01 19:46:01 CST 2019storageID=DS-330d79ed-7c1b-4d40-b151-81ffcadcf9f0#clusterID=CID-ae479da3-0b1e-44b0-a383-029a213b3481clusterID=CID-98e754ef-ad92-49f8-88b2-6830888f2d48cTime=0datanodeUuid=67fcc2ae-1b74-46cd-90df-336a0b1950e6storageType=DATA_NODElayoutVersion=-56```4）再次启动DataNode，成功启动sbin/hadoop-daemon.sh start datanode]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>两台CentOS服务器配置ssh无密码登陆</title>
    <link href="/2021/01/07/2020-11-25-ssh/"/>
    <url>/2021/01/07/2020-11-25-ssh/</url>
    
    <content type="html"><![CDATA[<h2 id="两台CentOS服务器配置ssh无密码登陆"><a href="#两台CentOS服务器配置ssh无密码登陆" class="headerlink" title="两台CentOS服务器配置ssh无密码登陆"></a>两台CentOS服务器配置ssh无密码登陆</h2><h3 id="问题：两台CentOS服务器，IP分别为192-168-1-11、192-168-1-12（下面用11、12简称两台服务器），在12上配置test用户ssh无需要密码即可登陆11的root用户。"><a href="#问题：两台CentOS服务器，IP分别为192-168-1-11、192-168-1-12（下面用11、12简称两台服务器），在12上配置test用户ssh无需要密码即可登陆11的root用户。" class="headerlink" title="问题：两台CentOS服务器，IP分别为192.168.1.11、192.168.1.12（下面用11、12简称两台服务器），在12上配置test用户ssh无需要密码即可登陆11的root用户。"></a>问题：两台CentOS服务器，IP分别为192.168.1.11、192.168.1.12（下面用11、12简称两台服务器），在12上配置test用户ssh无需要密码即可登陆11的root用户。</h3><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ul><li>用test用户登陆12</li><li>ssh-keygen -t rsa生成密码</li><li>在/home/test/.ssh下生成了密钥对：id_rsa为私钥，id_rsa.pub为公钥。</li><li>将刚生成的公钥传到11上，且11上以root用户登陆。<br>ssh-copy-id <a href="mailto:&#114;&#x6f;&#111;&#x74;&#64;&#x31;&#x39;&#50;&#x2e;&#x31;&#x36;&#56;&#46;&#49;&#46;&#49;&#49;">&#114;&#x6f;&#111;&#x74;&#64;&#x31;&#x39;&#50;&#x2e;&#x31;&#x36;&#56;&#46;&#49;&#46;&#49;&#49;</a></li><li>在12上用root用户登陆 11:ssh <a href="mailto:&#x72;&#x6f;&#x6f;&#116;&#x40;&#x31;&#x39;&#50;&#46;&#49;&#x36;&#x38;&#x2e;&#49;&#x2e;&#x31;&#x31;">&#x72;&#x6f;&#x6f;&#116;&#x40;&#x31;&#x39;&#50;&#46;&#49;&#x36;&#x38;&#x2e;&#49;&#x2e;&#x31;&#x31;</a>，验证不需要密码可以登陆。</li></ul>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JD-GUI反编译工具使用</title>
    <link href="/2021/01/07/2020-11-25-jdgui/"/>
    <url>/2021/01/07/2020-11-25-jdgui/</url>
    
    <content type="html"><![CDATA[<h2 id="从服务器下载jar到本地"><a href="#从服务器下载jar到本地" class="headerlink" title="从服务器下载jar到本地"></a>从服务器下载jar到本地</h2><p>sz *.jar</p><h2 id="解压jar包"><a href="#解压jar包" class="headerlink" title="解压jar包"></a>解压jar包</h2><p>解压jar包至文件夹</p><h2 id="下载JD-GUI反编译工具"><a href="#下载JD-GUI反编译工具" class="headerlink" title="下载JD-GUI反编译工具"></a>下载JD-GUI反编译工具</h2><p>打开JD-GUI，选择.class文件后打开</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>HDFS常用Shell操作</title>
    <link href="/2021/01/07/2020-11-25-hdfsShell/"/>
    <url>/2021/01/07/2020-11-25-hdfsShell/</url>
    
    <content type="html"><![CDATA[<h2 id="HDFS常用Shell操作"><a href="#HDFS常用Shell操作" class="headerlink" title="HDFS常用Shell操作"></a>HDFS常用Shell操作</h2><h3 id="列出文件目录：hadoop-fs-ls-目录路径"><a href="#列出文件目录：hadoop-fs-ls-目录路径" class="headerlink" title="列出文件目录：hadoop fs -ls 目录路径"></a>列出文件目录：hadoop fs -ls 目录路径</h3><ul><li>查看HDFS根目录下的目录：hadoop fs -ls /</li><li>递归查看HDFS根目录下的目录：hadoop fs -lsr /</li></ul><h3 id="在HDFS中创建文件夹：hadoop-fs-mkdir-文件夹名称"><a href="#在HDFS中创建文件夹：hadoop-fs-mkdir-文件夹名称" class="headerlink" title="在HDFS中创建文件夹：hadoop fs -mkdir 文件夹名称"></a>在HDFS中创建文件夹：hadoop fs -mkdir 文件夹名称</h3><h3 id="上传文件到HDFS中：hadoop-fs-put-本地源路径-目标存放路径"><a href="#上传文件到HDFS中：hadoop-fs-put-本地源路径-目标存放路径" class="headerlink" title="上传文件到HDFS中：hadoop fs -put 本地源路径 目标存放路径"></a>上传文件到HDFS中：hadoop fs -put 本地源路径 目标存放路径</h3><p>将本地系统中的一个log文件上传到di文件夹中：hadoop fs -put test.log /di</p><h3 id="从HDFS中下载文件：hadoop-fs-get-HDFS文件路径-本地存放路径"><a href="#从HDFS中下载文件：hadoop-fs-get-HDFS文件路径-本地存放路径" class="headerlink" title="从HDFS中下载文件：hadoop fs -get HDFS文件路径 本地存放路径"></a>从HDFS中下载文件：hadoop fs -get HDFS文件路径 本地存放路径</h3><p>将刚刚上传的test.log下载到本地的Desktop文件夹中：hadoop fs -get /di/test.log /home/hadoop/Desktop</p><h3 id="直接在HDFS中查看某个文件：hadoop-fs-text-cat-文件存放路径"><a href="#直接在HDFS中查看某个文件：hadoop-fs-text-cat-文件存放路径" class="headerlink" title="直接在HDFS中查看某个文件：hadoop fs -text(-cat) 文件存放路径"></a>直接在HDFS中查看某个文件：hadoop fs -text(-cat) 文件存放路径</h3><p>在HDFS查看刚刚上传的test.log文件：hadoop fs -text /di/test.log</p><h3 id="删除在HDFS中的某个文件-夹-：hadoop-fs-rm-r-文件存放路径"><a href="#删除在HDFS中的某个文件-夹-：hadoop-fs-rm-r-文件存放路径" class="headerlink" title="删除在HDFS中的某个文件(夹)：hadoop fs -rm(r) 文件存放路径"></a>删除在HDFS中的某个文件(夹)：hadoop fs -rm(r) 文件存放路径</h3><h3 id="善用help命令求帮助：hadoop-fs-help-命令"><a href="#善用help命令求帮助：hadoop-fs-help-命令" class="headerlink" title="善用help命令求帮助：hadoop fs -help 命令"></a>善用help命令求帮助：hadoop fs -help 命令</h3><p>查看ls命令的帮助：hadoop fs -help ls</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>《Java异步编程实战》读书笔记</title>
    <link href="/2021/01/07/2020-03-20-javaAsync/"/>
    <url>/2021/01/07/2020-03-20-javaAsync/</url>
    
    <content type="html"><![CDATA[<h2 id="Java异步编程实战-Java核心技术系列"><a href="#Java异步编程实战-Java核心技术系列" class="headerlink" title="Java异步编程实战 (Java核心技术系列)"></a>Java异步编程实战 (Java核心技术系列)</h2><ul><li><p>使用Future确实可以获取异步任务的执行结果，但是获取其结果还是会阻塞调用线程的，并没有实现完全异步化处理，所以在JDK8中提供了CompletableFuture来弥补其缺点。CompletableFuture类允许以非阻塞方式和基于通知的方式处理结果，其通过设置回调函数方式，让主线程彻底解放出来，实现了实际意义上的异步处理。</p></li><li><p>在Java中实现异步编程最简单的方式是：每当有异步任务要执行时，使用Tread来创建一个线程来进行异步执行。</p></li><li><p>Java中有两种方式来显式开启一个线程进行异步处理。第一种方式是实现java.lang.Runnable接口的run方法，然后传递Runnable接口的实现类作为创建Thread时的参数，启动线程</p></li><li><p>Java中第二种开启线程进行异步执行的方式是实现Thread类，并重写run方法</p></li><li><p>Java中线程是有Deamon与非Deamon之分的，默认情况下我们创建的都是非Deamon线程，线程属于什么类型与JVM退出条件有一定的关系。在Java中，当JVM进程内不存在非Deamon的线程时JVM就退出了。那么如何创建一个Deamon线程呢？其实将调用线程的setDaemon(boolean on)方法设置为true就可以了</p></li><li><p>显式使用Thread创建异步任务的两种方式，但是上述实现方式存在几个问题：  ·每当执行异步任务时，会直接创建一个Thread来执行异步任务，这在生产实践中是不建议使用的，因为线程创建与销毁是有开销的，并且没有限制线程的个数，如果使用不当可能会把系统线程用尽，从而造成错误。在生产环境中一般创建一个线程池，然后使用线程池中的线程来执行异步任务，线程池中的线程是可以被复用的，这可以大大减少线程创建与销毁开销；另外线程池可以有效限制创建的线程个数。  ·上面使用Thread执行的异步任务并没有返回值，如果我们想异步执行一个任务，并且需要在任务执行完毕后获取任务执行结果，则上面这个方式是满足不了的，这时候就需要用到JDK中的Future了。</p></li><li><p>线程池状态含义：  ·RUNNING：接收新任务并且处理阻塞队列里的任务。  ·SHUTDOWN：拒绝新任务但是处理阻塞队列里的任务。  ·STOP：拒绝新任务并且抛弃阻塞队列里的任务，同时中断正在处理的任务。  ·TIDYING：所有任务都执行完（包含阻塞队列里面任务），当前线程池活动线程为0，将要调用terminated方法。  ·TERMINATED：终止状态。terminated方法调用完成以后的状态</p></li><li><p>线程池同时提供了一些方法用来获取线程池的运行状态和线程池中的线程个数</p></li><li><p>线程池提供了可供使用者配置的参数：</p></li><li><p>corePoolSize：线程池核心线程个数。</p></li><li><p>workQueue：用于保存等待执行的任务的阻塞队列，比如基于数组的有界Array-BlockingQueue、基于链表的无界LinkedBlockingQueue、最多只有一个元素的同步队列SynchronousQueue、优先级队列PriorityBlockingQueue等。</p></li><li><p>maximunPoolSize：线程池最大线程数量。</p></li><li><p>threadFactory：创建线程的工厂类。</p></li><li><p>defaultHandler：饱和策略，当队列满了并且线程个数达到maximunPoolSize后采取的策略，比如AbortPolicy（抛出异常）、CallerRunsPolicy（使用调用者所在线程来运行任务）、DiscardOldestPolicy（调用poll丢弃一个任务，执行当前任务）、DiscardPolicy（默默丢弃，不抛出异常）。</p></li><li><p>keeyAliveTime：存活时间。如果当前线程池中的线程数量比核心线程数量要多，并且是闲置状态的话，这些闲置的线程能存活的最大时间。</p></li><li><p>ThreadPoolExecutor(int corePoolSize,//核心线程个数                    int maximumPoolSize,//最大线程个数                    long keepAliveTime,//非核心不活跃线程最大存活时间                    TimeUnit unit,//keepAliveTime的单位                    BlockingQueue<Runnable> workQueue,//阻塞队列类型                    ThreadFactory threadFactory,//线程池创建工厂                    RejectedExecutionHandler handler)//拒绝策略</p></li><li><p>当我们需要创建自己的线程池时，就可以显式地新建一个该实例出来。</p></li><li><p>方法public void execute(Runnable command)提交任务到线程池的逻辑：</p></li><li><p>/(1) 如果任务为null，则抛出NPE异常     if (command == null)         throw new NullPointerException();</p></li><li><p>//（2）获取当前线程池的状态+线程个数变量的组合值     int c = ctl.get();</p></li><li><p>//（3）当前线程池线程个数是否小于corePoolSize,小于则开启新线程运行     if (workerCountOf(c) &lt; corePoolSize) {         if (addWorker(command, true))             return;         c = ctl.get();     }</p></li><li><p>//（4）如果线程池处于RUNNING状态，则添加任务到阻塞队列     if (isRunning(c) &amp;&amp; workQueue.offer(command)) {          //（4.1）二次检查         int recheck = ctl.get();         //（4.2）如果当前线程池状态不是RUNNING则从队列删除任务，并执行拒绝策略         if (! isRunning(recheck) &amp;&amp; remove(command))             reject(command);          //（4.3）如果当前线程池线程为空，则添加一个线程         else if (workerCountOf(recheck) == 0)             addWorker(null, false);     }</p></li><li><p>//（5）如果队列满了，则新增线程，新增失败则执行拒绝策略     else if (!addWorker(command, false))         reject(command);</p></li><li><p>代码3是指如果当前线程池线程个数小于corePoolSize，则会在调用方法addWorker新增一个核心线程执行该任务。</p></li><li><p>如果当前线程池线程个数大于等于corePoolSize则执行代码4，如果当前线程池处于RUNNING状态则添加当前任务到任务队列。这里需要判断线程池状态是因为线程池有可能已经处于非RUNNING状态，而非RUNNING状态下是抛弃新任务的。</p></li><li><p>如果任务添加任务队列成功，则执行代码4.2对线程池状态进行二次校验，这是因为添加任务到任务队列后，执行代码4.2前线程池的状态有可能已经变化了，如果当前线程池状态不是RUNNING则把任务从任务队列移除，移除后执行拒绝策略；如果二次校验通过，则执行代码4.3重新判断当前线程池里面是否还有线程，如果没有则新增一个线程。</p></li><li><p>如果代码4添加任务失败，则说明任务队列满了，那么执行代码5尝试调用addWorker方法新开启线程来执行该任务；如果当前线程池的线程个数大于maximumPoolSize则addWorker返回false，执行配置的拒绝策略。</p></li><li><p>public Future&lt;?&gt;submit(Runnable task)方法提交任务的逻辑：</p></li><li><p>// 6 NPE判断     if (task == null) throw new NullPointerException();</p></li><li><p>// 7 包装任务为FutureTask     RunnableFuture<Void> ftask = newTaskFor(task, null);</p></li><li><p>// 8 投递到线程池执行     execute(ftask);</p></li><li><p>// 9 返回ftask     return ftask;</p></li><li><p>代码7调用newTaskFor方法对我们提交的Runnable类型任务进行包装，包装为RunnableFuture类型任务，然后提交RunnableFuture任务到线程池后返回ftask对象。</p></li><li><p>线程池是通过池化少量线程来提供线程复用的，当调用线程向线程池中投递大量任务后，线程池可能就处于饱和状态了。所谓饱和状态是指当前线程池队列已经满了，并且线程池中的线程已经达到了最大线程个数。当线程池处于饱和状态时，再向线程池投递任务，而对于投递的任务如何处理，是由线程池拒绝策略决定的。</p></li><li><p>线程池中提供了RejectedExecutionHandler接口，用来提供对线程池拒绝策略的抽象</p></li><li><p>AbortPolicy策略</p></li><li><p>该拒绝策略执行时会直接向调用线程抛出RejectedExecutionException异常，并丢失提交的任务r。</p></li><li><p>CallerRunsPolicy策略</p></li><li><p>该拒绝策略执行时，如果线程池没有被关闭，则会直接使用调用线程执行提交的任务r，否则默默丢弃该任务。</p></li><li><p>DiscardPolicy策略</p></li><li><p>该拒绝策略执行时，什么都不做，默默丢弃提交的任务。</p></li><li><p>DiscardOldestPolicy策略</p></li><li><p>该拒绝策略首先会丢弃线程池队列里面最老的任务，然后把当前任务r提交到线程池</p></li><li><p>虽然线程池方式提供了线程复用可以获取任务返回值，但是获取返回值时还是需要阻塞调用线程的，所以我们在下一章会讲解JDK提供的CompletableFuture来解决这个问题</p></li><li><p>V get()throws InterruptedException，ExecutionException：等待异步计算任务完成，并返回结果</p></li><li><p>V get(long timeout，TimeUnit unit)throws InterruptedException，ExecutionException，TimeoutException：相比get()方法多了超时时间，当线程调用了该方法后，在任务结果没有计算出来前调用线程不会一直被阻塞，而是会在等待timeout个unit单位的时间后抛出TimeoutException异常后返回。添加超时时间避免了调用线程死等的情况，让调用线程可以及时释放。</p></li><li><p>boolean isDone()：如果计算任务已经完成则返回true，否则返回false。需要注意的是，任务完成是指任务正常完成了、由于抛出异常而完成了或者任务被取消了</p></li><li><p>boolean cancel(boolean mayInterruptIfRunning)：尝试取消任务的执行；如果当前任务已经完成或者任务已经被取消了，则尝试取消任务会失败；如果任务还没被执行时调用了取消任务，则任务将永远不会被执行；如果任务已经开始运行了，这时候取消任务，则参数mayInterruptIfRunning将决定是否要将正在执行任务的线程中断，如果为true则标识要中断，否则标识不中断；当调用取消任务后，再调用isDone()方法，后者会返回true，随后调用isCancelled()方法也会一直返回true；如果任务不能被取消，比如任务完成后已经被取消了，则该方法会返回false。</p></li><li><p>boolean isCancelled()：如果任务在执行完毕前被取消了，则该方法返回true，否则返回false。</p></li><li><p>FutureTask代表了一个可被取消的异步计算任务，该类实现了Future接口，比如提供了启动和取消任务、查询任务是否完成、获取计算结果的接口。</p></li><li><p>FutureTask任务的结果只有当任务完成后才能获取，并且只能通过get系列方法获取，当结果还没出来时，线程调用get系列方法会被阻塞。另外，一旦任务被执行完成，任务将不能重启，除非运行时使用了runAndReset方法。FutureTask中的任务可以是Callable类型，也可以是Runnable类型（因为FutureTask实现了Runnable接口），FutureTask类型的任务可以被提交到线程池执行。</p></li><li><p>当我们创建一个FutureTask时，其任务状态初始化为NEW，当我们把任务提交到线程或者线程池后，会有一个线程来执行该FutureTask任务，具体是调用其run方法来执行任务。在任务执行过程中，我们可以在其他线程调用FutureTask的get()方法来等待获取结果，如果当前任务还在执行，则调用get的线程会被阻塞然后放入FutureTask内的阻塞链表队列；多个线程可以同时调用get方法，这些线程可能都会被阻塞并放到阻塞链表队列中。当任务执行完毕后会把结果或者异常信息设置到outcome变量，然后会移除和唤醒FutureTask内阻塞链表队列中的线程节点，进而这些由于调用FutureTask的get方法而被阻塞的线程就会被激活。</p></li><li><p>CompletableFuture是一个可以通过编程方式显式地设置计算结果和状态以便让任务结束的Future，并且其可以作为一个CompletionStage（计算阶段），当它的计算完成时可以触发一个函数或者行为；当多个线程企图调用同一个CompletableFuture的complete、cancel方式时只有一个线程会成功。</p></li><li><p>CompletableFuture功能强大的原因之一是其可以让两个或者多个Completable-Future进行运算来产生结果</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>基于JDK中的 Future 实现异步编程</title>
    <link href="/2021/01/07/2020-04-16-future/"/>
    <url>/2021/01/07/2020-04-16-future/</url>
    
    <content type="html"><![CDATA[<h2 id="使用FutureTask进行异步计算"><a href="#使用FutureTask进行异步计算" class="headerlink" title="使用FutureTask进行异步计算"></a>使用FutureTask进行异步计算</h2><h3 id="FutureTask介绍"><a href="#FutureTask介绍" class="headerlink" title="FutureTask介绍"></a>FutureTask介绍</h3><p>FutureTask代表了一个可被取消的异步计算任务，该类实现了Future接口，比如提供了启动和取消任务、查询任务是否完成、获取计算结果的接口。<br>FutureTask任务的结果只有当任务完成后才能获取，并且只能通过get系列方法获取，当结果还没出来时，线程调用get系列方法会被阻塞。另外，一旦任务被执行完成，任务将不能重启，除非运行时使用了runAndReset方法。FutureTask中的任务可以是Callable类型，也可以是Runnable类型（因为FutureTask实现了Runnable接口），FutureTask类型的任务可以被提交到线程池执行。 </p><h3 id="向线程池提交任务"><a href="#向线程池提交任务" class="headerlink" title="向线程池提交任务"></a>向线程池提交任务</h3><ul><li>使用submit   </li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 调用了线程池的submit方法提交了一个任务到线程池，然后返回了一个futureTask对象</span><br>Future&lt;<span class="hljs-keyword">String</span>&gt; futureTask = POOL_EXECUTOR.submit(() -&gt; &#123;<br>    <span class="hljs-keyword">String</span> result = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        result = doSomethingA();<br><br>    &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-built_in">Exception</span> e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;);<br><br><span class="hljs-comment">// 执行任务</span><br><span class="hljs-keyword">String</span> taskBResult = doSomethingB();<br><br><span class="hljs-comment">// 获取结果，同步等待线程A运行结束</span><br><span class="hljs-keyword">String</span> taskAResult = futureTask.get();<br></code></pre></td></tr></table></figure><ul><li>使用execute  </li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 创建future任务</span><br>FutureTask&lt;<span class="hljs-keyword">String</span>&gt; futureTask = <span class="hljs-keyword">new</span> FutureTask&lt;<span class="hljs-keyword">String</span>&gt;(() -&gt; &#123;<br>    <span class="hljs-keyword">String</span> result = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        result = doSomethingA();<br><br>    &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-built_in">Exception</span> e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;);<br><br><span class="hljs-comment">// 添加异步任务A到线程池</span><br>POOL_EXECUTOR.execute(futureTask);<br><br><span class="hljs-comment">// 执行任务B</span><br><span class="hljs-keyword">String</span> taskBResult = doSomethingB();<br><br><span class="hljs-comment">// 同步等待线程A运行结束</span><br><span class="hljs-keyword">String</span> taskAResult = futureTask.get();<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>当我们创建一个FutureTask时，其任务状态初始化为NEW，当我们把任务提交到线程或者线程池后，会有一个线程来执行该FutureTask任务，具体是调用其run方法来执行任务。在任务执行过程中，我们可以在其他线程调用FutureTask的get()方法来等待获取结果，如果当前任务还在执行，则调用get的线程会被阻塞然后放入FutureTask内的阻塞链表队列；多个线程可以同时调用get方法，这些线程可能都会被阻塞并放到阻塞链表队列中。当任务执行完毕后会把结果或者异常信息设置到outcome变量，然后会移除和唤醒FutureTask内阻塞链表队列中的线程节点，进而这些由于调用FutureTask的get方法而被阻塞的线程就会被激活。   </p><h2 id="CompletableFuture-实战-–基础篇"><a href="#CompletableFuture-实战-–基础篇" class="headerlink" title="CompletableFuture 实战 –基础篇"></a>CompletableFuture 实战 –基础篇</h2><p>文中的 sleep 方法目的是模拟异步任务执行；<br>POOL_EXECUTOR 为已初始化完毕的线程池；<br>为缩短篇幅更明了，所有异常均需自行捕获。  </p><h3 id="CompletableFuture-概述"><a href="#CompletableFuture-概述" class="headerlink" title="CompletableFuture 概述"></a>CompletableFuture 概述</h3><p>CompletableFuture是一个可以通过编程方式显式地设置计算结果和状态以便让任务结束的Future，并且其可以作为一个CompletionStage（计算阶段），当它的计算完成时可以触发一个函数或者行为；当多个线程企图调用同一个CompletableFuture的complete、cancel方式时只有一个线程会成功。  </p><h3 id="显式设置-CompletableFuture-结果"><a href="#显式设置-CompletableFuture-结果" class="headerlink" title="显式设置 CompletableFuture 结果"></a>显式设置 CompletableFuture 结果</h3><ol><li>创建一个 CompletableFuture 对象  </li></ol><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">CompletableFuture&lt;<span class="hljs-keyword">String</span>&gt; future = <span class="hljs-keyword">new</span> <span class="hljs-type">CompletableFuture</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><ol start="2"><li>将代码提交到异步线程池中执行;开启线程计算任务结果，并调用 future 的 complete 方法设置 future 的结果，设置完结果后，所有由于调用 future 的 get() 方法而被阻塞的线程会被激活，并返回设置的结果。</li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">POOL_EXECUTOR</span>.</span></span>execute(<span class="hljs-literal">()</span> -&gt; &#123;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>sleep(<span class="hljs-number">3000</span>);<br>    <span class="hljs-comment">// 设置计算结果到future:调用future的complete方法设置future的结果，设置完结果后，所有由于调用fture的get()方法而被阻塞的线程会被激活，并返回设置的结果。</span><br>    future.complete(<span class="hljs-string">&quot;hello,Raines&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><ol start="3"><li>等待计算结果:调用future的get()方法企图获取future的结果，如果future的结果没有被设置，则调用线程会被阻塞。</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">log.<span class="hljs-builtin-name">info</span>(future.<span class="hljs-builtin-name">get</span>());<br></code></pre></td></tr></table></figure><h3 id="基于-CompletableFuture-实现异步计算与结果转换"><a href="#基于-CompletableFuture-实现异步计算与结果转换" class="headerlink" title="基于 CompletableFuture 实现异步计算与结果转换"></a>基于 CompletableFuture 实现异步计算与结果转换</h3><h4 id="基于-runAsync-实现无返回值的异步计算"><a href="#基于-runAsync-实现无返回值的异步计算" class="headerlink" title="基于 runAsync 实现无返回值的异步计算"></a>基于 runAsync 实现无返回值的异步计算</h4><ul><li>如果不指定线程池 poolExecutor 执行，则默认使用整个JVM内唯一的 ForkJoinPool.commonPool() 线程池来执行异步任务。future.get() 返回为 null   </li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino">CompletableFuture <span class="hljs-built_in">future</span> = CompletableFuture.runAsync(<span class="hljs-keyword">new</span> Runnable() &#123;<br>    @Override<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-built_in">run</span>() &#123;<br>        <span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;over&quot;</span>);<br>    &#125;<br>&#125;, poolExecutor);<br><span class="hljs-comment">// 同步等待异步任务执行结束</span><br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-built_in">future</span>.<span class="hljs-built_in">get</span>());<br></code></pre></td></tr></table></figure><h4 id="基于-supplyAsync-实现有返回值的异步执行"><a href="#基于-supplyAsync-实现有返回值的异步执行" class="headerlink" title="基于 supplyAsync 实现有返回值的异步执行"></a>基于 supplyAsync 实现有返回值的异步执行</h4><ul><li>如果不指定线程池 Executor，则默认使用整个JVM内唯一的 ForkJoinPool.commonPool() 线程池来执行异步任务。</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arduino">CompletableFuture <span class="hljs-built_in">future</span> = CompletableFuture.supplyAsync(<span class="hljs-keyword">new</span> Supplier&lt;<span class="hljs-keyword">String</span>&gt;() &#123;<br>    @Override<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> <span class="hljs-built_in">get</span>() &#123;<br>        Thread.sleep(<span class="hljs-number">2000</span>);<br>        <span class="hljs-comment">// 返回异步计算结果</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br>&#125;);<br><span class="hljs-comment">// 同步等待异步任务执行结束</span><br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-built_in">future</span>.<span class="hljs-built_in">get</span>());<br></code></pre></td></tr></table></figure><h3 id="基于-thenRun-实现-无前者执行结果-无返回值-的回调"><a href="#基于-thenRun-实现-无前者执行结果-无返回值-的回调" class="headerlink" title="基于 thenRun 实现 无前者执行结果 无返回值 的回调"></a>基于 thenRun 实现 无前者执行结果 无返回值 的回调</h3><ul><li>twoFuture 拿不到 oneFuture 的执行结果；  </li><li>在 twoFuture 调用 get() 也会返回 null，因为回调事件是没有返回值的。  </li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs typescript">CompletableFuture&lt;<span class="hljs-built_in">String</span>&gt; oneFuture = CompletableFuture.supplyAsync(<span class="hljs-keyword">new</span> Supplier&lt;<span class="hljs-built_in">String</span>&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;<br>        Thread.sleep(<span class="hljs-number">2000</span>);<br>        <span class="hljs-comment">// 返回计算结果</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br>&#125;);<br><span class="hljs-comment">// 在 oneFuture 上施加事件，当 oneFuture 计算完成后回调该事件，并返回新 future</span><br>CompletableFuture twoFuture = oneFuture.thenRun(<span class="hljs-keyword">new</span> <span class="hljs-function"><span class="hljs-title">Runnable</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> &#123;<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        System.out.println(<span class="hljs-string">&quot;---after oneFuture over doSomething---&quot;</span>);<br>    &#125;<br>&#125;);<br><span class="hljs-comment">// 同步等待 twoFuture 对应的任务完成，返回结果固定为null</span><br>System.out.println(twoFuture.get());<br></code></pre></td></tr></table></figure><h3 id="基于-thenAccept-实现-有前者执行结果-无返回值-的回调"><a href="#基于-thenAccept-实现-有前者执行结果-无返回值-的回调" class="headerlink" title="基于 thenAccept 实现 有前者执行结果 无返回值 的回调"></a>基于 thenAccept 实现 有前者执行结果 无返回值 的回调</h3><ul><li>基于 thenAccept 实现异步任务 one，执行完毕后，激活异步任务 two 执行，需要注意的是，这种方式激活的异步任务 two 是可以在回调方法  accept(String t)  中的参数 t 中拿到任务 one 的执行结果的。  </li><li>由于 accept(String t) 方法没有返回值，所有 two 上调用 get() 也返回 null。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs typescript"> CompletableFuture&lt;<span class="hljs-built_in">String</span>&gt; oneFuture = CompletableFuture.supplyAsync(<span class="hljs-keyword">new</span> Supplier&lt;<span class="hljs-built_in">String</span>&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;<br>        Thread.sleep(<span class="hljs-number">2000</span>);<br>        <span class="hljs-comment">// 返回计算结果</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br>&#125;);<br><span class="hljs-comment">// 在future上施加事件，当future计算完成后回调该事件，并返回新future</span><br>CompletableFuture twoFuture = oneFuture.thenAccept(<span class="hljs-keyword">new</span> Consumer&lt;<span class="hljs-built_in">String</span>&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">accept</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> t</span>)</span> &#123;<br>        <span class="hljs-comment">// 对oneFuture返回的结果进行加工</span><br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        System.out.println(<span class="hljs-string">&quot;---after oneFuture over doSomething---&quot;</span> + t);<br>    &#125;<br>&#125;);<br><span class="hljs-comment">// 3.同步等待twoFuture对应的任务完成，返回结果固定为null</span><br>System.out.println(twoFuture.get());<br></code></pre></td></tr></table></figure><h3 id="基于-thenApply-实现-有前者执行结果-有返回值-的回调"><a href="#基于-thenApply-实现-有前者执行结果-有返回值-的回调" class="headerlink" title="基于 thenApply 实现 有前者执行结果 有返回值 的回调"></a>基于 thenApply 实现 有前者执行结果 有返回值 的回调</h3><ul><li>可以在回调方法 apply(String t) 的参数t中获取 oneFuture 对应的任务结果。  </li><li>由于 apply(String t) 方法有返回值，所以在 twoFuture 上调用 get() 方法最终也会返回回调方法返回的值。  </li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 创建有返回值的异步执行</span><br>CompletableFuture&lt;<span class="hljs-built_in">String</span>&gt; oneFuture = CompletableFuture.supplyAsync(<span class="hljs-keyword">new</span> Supplier&lt;<span class="hljs-built_in">String</span>&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br>&#125;);<br><span class="hljs-comment">// 在future上施加事件，当future计算完成后回调该事件，并返回新future</span><br>CompletableFuture&lt;<span class="hljs-built_in">String</span>&gt; twoFuture = oneFuture.thenApply(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">String</span>&gt;() &#123;<br>    <span class="hljs-comment">// 对oneFuture计算结果基础上进行计算，这里t为oneFuture返回的hello</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">apply</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> t</span>)</span> &#123;<br>        <span class="hljs-comment">// 返回加工后结果</span><br>        <span class="hljs-keyword">return</span> t + <span class="hljs-string">&quot; jiduo&quot;</span>;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>默认情况下oneFuture对应的异步任务和在oneFuture上添加的回调事件都是使用ForkJoinPool.commonPool()中的同一个线程来执行的，大家可以使用thenApplyAsync(Function&lt;?super T，?extends U&gt;fn，Executor executor)来指定设置的回调事件使用自定义线程池线程来执行，也就是oneFuture对应的任务与在其上设置的回调执行将不会在同一个线程中执行。  </li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust">CompletableFuture&lt;<span class="hljs-built_in">String</span>&gt; threeFuture = twoFuture.thenApplyAsync(t2-&gt;&#123;<br>    <span class="hljs-keyword">return</span> t2+<span class="hljs-string">&quot;three&quot;</span>;<br>&#125;,poolExecutor);<br></code></pre></td></tr></table></figure><h3 id="基于-whenComplete-设置回调函数，当异步任务执行完毕后进行回调，不会阻塞调用线程"><a href="#基于-whenComplete-设置回调函数，当异步任务执行完毕后进行回调，不会阻塞调用线程" class="headerlink" title="基于 whenComplete 设置回调函数，当异步任务执行完毕后进行回调，不会阻塞调用线程"></a>基于 whenComplete 设置回调函数，当异步任务执行完毕后进行回调，不会阻塞调用线程</h3><ul><li>在返回的 future 上调用 whenComplete 设置一个回调函数，然后 main 线程就返回了。在整个异步任务的执行过程中，main 函数所在线程是不会被阻塞的，等异步任务执行完毕后会回调设置的回调函数，在回调函数内，如果发现异步任务执行正常则打印执行结果，否则打印异常信息。  </li><li>这里 join() 挂起了 main 函数所在线程，是因为具体执行异步任务的是 ForkJoin 的 commonPool 线程池，其中线程都是 Deamon 线程，所以，当唯一的用户线程 main 线程退出后整个JVM进程就退出了，会导致异步任务得不到执行  </li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs typescript">CompletableFuture&lt;<span class="hljs-built_in">String</span>&gt; future = CompletableFuture.supplyAsync(<span class="hljs-keyword">new</span> Supplier&lt;<span class="hljs-built_in">String</span>&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        <span class="hljs-comment">// 返回计算结果</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello,Raines&quot;</span>;<br>    &#125;<br>&#125;);<br><span class="hljs-comment">// </span><br>future.whenComplete(<span class="hljs-keyword">new</span> BiConsumer&lt;<span class="hljs-built_in">String</span>, Throwable&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">accept</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> t, Throwable u</span>)</span> &#123;<br>        <span class="hljs-comment">// 如果没有异常，打印异步任务结果</span><br>        <span class="hljs-keyword">if</span> (u == <span class="hljs-literal">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;1&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 打印异常信息</span><br>            System.out.println(u.getLocalizedMessage());<br>        &#125;<br>    &#125;<br>&#125;);<br><span class="hljs-comment">// 挂起当前线程，等待异步任务执行完毕</span><br>Thread.currentThread().join();<br></code></pre></td></tr></table></figure><h2 id="CompletableFuture-实战-–提升篇"><a href="#CompletableFuture-实战-–提升篇" class="headerlink" title="CompletableFuture 实战 –提升篇"></a>CompletableFuture 实战 –提升篇</h2><h3 id="多个-CompletableFuture-进行组合运算"><a href="#多个-CompletableFuture-进行组合运算" class="headerlink" title="多个 CompletableFuture 进行组合运算"></a>多个 CompletableFuture 进行组合运算</h3><p>CompletableFuture 功能强大的原因之一是其可以让两个或者多个 Completable-Future 进行运算来产生结果  </p><h4 id="基于-thenCompose-实现当一个-CompletableFuture-执行完毕后，可把第一个-Completable-的结果作为参数执行另外一个-CompletableFuture"><a href="#基于-thenCompose-实现当一个-CompletableFuture-执行完毕后，可把第一个-Completable-的结果作为参数执行另外一个-CompletableFuture" class="headerlink" title="基于 thenCompose 实现当一个 CompletableFuture 执行完毕后，可把第一个 Completable 的结果作为参数执行另外一个 CompletableFuture"></a>基于 thenCompose 实现当一个 CompletableFuture 执行完毕后，可把第一个 Completable 的结果作为参数执行另外一个 CompletableFuture</h4><ol><li>定义异步任务，返回 CompletableFuture  </li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 开启异步任务one</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CompletableFuture&lt;<span class="hljs-built_in">String</span>&gt; <span class="hljs-function"><span class="hljs-title">doSomethingOne</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> encodedCompanyId</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> CompletableFuture.supplyAsync(<span class="hljs-keyword">new</span> Supplier&lt;<span class="hljs-built_in">String</span>&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            <span class="hljs-comment">// 返回结果</span><br>            <span class="hljs-built_in">String</span> id = encodedCompanyId + <span class="hljs-string">&quot;:raines&quot;</span>;<br>            <span class="hljs-keyword">return</span> id;<br>        &#125;<br>    &#125;);<br>&#125;<br><span class="hljs-comment">// 开启异步任务two</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CompletableFuture&lt;<span class="hljs-built_in">String</span>&gt; <span class="hljs-function"><span class="hljs-title">doSomethingTwo</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> companyId</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> CompletableFuture.supplyAsync(<span class="hljs-keyword">new</span> Supplier&lt;<span class="hljs-built_in">String</span>&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;<br>            Thread.sleep(<span class="hljs-number">3000</span>);<br>            <span class="hljs-comment">// 返回结果</span><br>            <span class="hljs-built_in">String</span> str = companyId + <span class="hljs-string">&quot;xiaolong&quot;</span>;<br>            <span class="hljs-keyword">return</span> str;<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>首先调用方法doSomethingOne(“123”)开启了一个异步任务，并返回了对应的CompletableFuture对象，我们取名为future1。<br>然后在future1的基础上调用了thenCompose方法，企图让future1执行完毕后，激活使用其结果作为doSomethingTwo(String companyId)方法的参数的任务。  </li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">CompletableFuture result = <span class="hljs-keyword">do</span><span class="hljs-constructor">SomethingOne(<span class="hljs-string">&quot;123&quot;</span>)</span>.<span class="hljs-keyword">then</span><span class="hljs-constructor">Compose(<span class="hljs-params">id</span> -&gt; <span class="hljs-params">doSomethingTwo</span>(<span class="hljs-params">id</span>)</span>);<br>result.get<span class="hljs-literal">()</span>;<br></code></pre></td></tr></table></figure><h4 id="基于-thenCombine-实现当两个并发运行的-CompletableFuture-任务都完成后，使用两者的结果作为参数再执行一个异步任务"><a href="#基于-thenCombine-实现当两个并发运行的-CompletableFuture-任务都完成后，使用两者的结果作为参数再执行一个异步任务" class="headerlink" title="基于 thenCombine 实现当两个并发运行的 CompletableFuture 任务都完成后，使用两者的结果作为参数再执行一个异步任务"></a>基于 thenCombine 实现当两个并发运行的 CompletableFuture 任务都完成后，使用两者的结果作为参数再执行一个异步任务</h4><ul><li>等doSomethingOne和doSomethingTwo都完成后，使用它们的结果做一件事  </li></ul><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livescript">CompletableFuture result = doSomethingOne<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">&quot;123&quot;</span>)</span>.<span class="hljs-title">thenCombine</span><span class="hljs-params">(doSomethingTwo(<span class="hljs-string">&quot;456&quot;</span>), (one, two) -&gt; &#123;</span></span><br><span class="hljs-function"><span class="hljs-params">    <span class="hljs-keyword">return</span> one + <span class="hljs-string">&quot; &quot;</span> + two;</span></span><br><span class="hljs-function"><span class="hljs-params">&#125;)</span>;</span><br><span class="hljs-function"><span class="hljs-title">result</span>.<span class="hljs-title">get</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><h4 id="基于allOf等待多个并发运行的CompletableFuture任务执行完毕"><a href="#基于allOf等待多个并发运行的CompletableFuture任务执行完毕" class="headerlink" title="基于allOf等待多个并发运行的CompletableFuture任务执行完毕"></a>基于allOf等待多个并发运行的CompletableFuture任务执行完毕</h4><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> allOf() <span class="hljs-keyword">throws</span> InterruptedException, ExecutionException &#123;<br>    <span class="hljs-comment">// 1.创建future列表</span><br>    List&lt;CompletableFuture&lt;<span class="hljs-keyword">String</span>&gt;&gt; futureList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    futureList.<span class="hljs-built_in">add</span>(doSomethingOne(<span class="hljs-string">&quot;1&quot;</span>));<br>    futureList.<span class="hljs-built_in">add</span>(doSomethingOne(<span class="hljs-string">&quot;2&quot;</span>));<br><br>    <span class="hljs-comment">// 2.转换多个future为一个</span><br>    CompletableFuture&lt;Void&gt; result = CompletableFuture<br>            .allOf(futureList.toArray(<span class="hljs-keyword">new</span> CompletableFuture[futureList.<span class="hljs-built_in">size</span>()]));<br><br>    <span class="hljs-comment">// 3.等待所有future都完成</span><br>    System.out.<span class="hljs-built_in">println</span>(result.<span class="hljs-built_in">get</span>());<br><br>    <span class="hljs-comment">// 4.等所有future执行完毕后，获取所有future的计算结果</span><br>    CompletableFuture&lt;List&lt;<span class="hljs-keyword">String</span>&gt;&gt; finallyResult = result.thenApply(<span class="hljs-keyword">new</span> Function&lt;Void, List&lt;<span class="hljs-keyword">String</span>&gt;&gt;() &#123;<br>        @Override<br>        <span class="hljs-keyword">public</span> List&lt;<span class="hljs-keyword">String</span>&gt; apply(Void t) &#123;<br>            <span class="hljs-keyword">return</span> futureList.stream().<span class="hljs-built_in">map</span>(future -&gt; future.<span class="hljs-built_in">join</span>()).collect(Collectors.toList());<br>        &#125;<br>    &#125;);<br><br>    <span class="hljs-comment">// 5.打印所有future的结果</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">String</span> <span class="hljs-built_in">str</span> : finallyResult.<span class="hljs-built_in">get</span>()) &#123;<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-built_in">str</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="基于anyOf等多个并发运行的CompletableFuture任务中有一个执行完毕就返回"><a href="#基于anyOf等多个并发运行的CompletableFuture任务中有一个执行完毕就返回" class="headerlink" title="基于anyOf等多个并发运行的CompletableFuture任务中有一个执行完毕就返回"></a>基于anyOf等多个并发运行的CompletableFuture任务中有一个执行完毕就返回</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public static void any<span class="hljs-constructor">Of()</span> throws InterruptedException, ExecutionException &#123;<br>    <span class="hljs-comment">// 1.创建future列表</span><br>    List&lt;CompletableFuture&lt;String&gt;&gt; futureList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;<span class="hljs-literal">()</span>;<br>    futureList.add(<span class="hljs-keyword">do</span><span class="hljs-constructor">SomethingOne(<span class="hljs-string">&quot;1&quot;</span>)</span>);<br>    futureList.add(<span class="hljs-keyword">do</span><span class="hljs-constructor">SomethingOne(<span class="hljs-string">&quot;2&quot;</span>)</span>);<br>    futureList.add(<span class="hljs-keyword">do</span><span class="hljs-constructor">SomethingTwo(<span class="hljs-string">&quot;3&quot;</span>)</span>);<br><br>    <span class="hljs-comment">// 2.转换多个future为一个</span><br>    CompletableFuture&lt;Object&gt; result = CompletableFuture<br>            .any<span class="hljs-constructor">Of(<span class="hljs-params">futureList</span>.<span class="hljs-params">toArray</span>(<span class="hljs-params">new</span> CompletableFuture[<span class="hljs-params">futureList</span>.<span class="hljs-params">size</span>()</span>]));<br><br>    <span class="hljs-comment">// 3.等待某一个future完成</span><br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(result.get<span class="hljs-literal">()</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="当-Stream-遇见-CompletableFuture（假设读者已经熟练使用-stream-基本操作"><a href="#当-Stream-遇见-CompletableFuture（假设读者已经熟练使用-stream-基本操作" class="headerlink" title="当 Stream 遇见 CompletableFuture（假设读者已经熟练使用 stream 基本操作"></a>当 Stream 遇见 CompletableFuture（假设读者已经熟练使用 stream 基本操作</h3><p>实战：消费端对服务提供方集群中的某个服务进行广播调用（轮询调用同一个服务的不同提供者的机器）   </p><ol><li>模拟调用过程  </li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">rpcCall</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> ip, <span class="hljs-built_in">String</span> param</span>)</span> &#123;<br>    System.out.println(ip + <span class="hljs-string">&quot; rpcCall:&quot;</span> + param);<br>    Thread.sleep(<span class="hljs-number">1000</span>);<br>    <span class="hljs-keyword">return</span> param;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>通过 map 操作使用 CompletableFuture.supplyAsync 进行异步调用<br>把同步调用结果转换为了CompletableFuture对象，所以操作符map返回的是一个CompletableFuture，然后collect操作把所有的CompletableFuture对象收集为list后返回。<br>代码3从 futureList 获取流，然后使用 map 操作符把 future 对象转换为 future 的执行结果，这里是使用 future 的 join 方法来阻塞获取每个异步任务执行完毕，然后返回执行结果，最后使用 collect 操作把所有的结果收集到 resultList<br>注意：具体这10个rpc请求是否全部并发运行取决于CompletableFuture内线程池内线程的个数，如果你的机器是单核的或者线程池内线程个数为1，那么这10个任务还是会顺序执行的。</li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// 1.生成ip列表</span><br>List&lt;String&gt; ipList = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;<span class="hljs-literal">()</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; ++i) &#123;<br>    ipList.add(<span class="hljs-string">&quot;192.168.0.&quot;</span> + i);<br>&#125;<br><span class="hljs-comment">// 2.并发调用</span><br>List&lt;CompletableFuture&lt;String&gt;&gt; futureList = ipList.stream<span class="hljs-literal">()</span><br>        .map(ip -&gt; <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CompletableFuture</span>.</span></span>supply<span class="hljs-constructor">Async(()</span> -&gt; rpc<span class="hljs-constructor">Call(<span class="hljs-params">ip</span>, <span class="hljs-params">ip</span>)</span>)).collect(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Collectors</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">List()</span>);<br><span class="hljs-comment">// 3.获取结果</span><br>List&lt;String&gt; resultList = futureList.stream<span class="hljs-literal">()</span>.map(future -&gt; future.join<span class="hljs-literal">()</span>).collect(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Collectors</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">List()</span>);<br><span class="hljs-comment">// 输出结果</span><br>resultList.stream<span class="hljs-literal">()</span>.<span class="hljs-keyword">for</span><span class="hljs-constructor">Each(<span class="hljs-params">r</span> -&gt; System.<span class="hljs-params">out</span>.<span class="hljs-params">println</span>(<span class="hljs-params">r</span>)</span>);<br></code></pre></td></tr></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>上面的代码都是当异步任务内可以正常设置任务结果时的情况，但是情况并不总是这样的。如果因为异常而没有正常调用 complete 方法设置结果，将导致调用 get 方法时一直阻塞。<br>所以我们不仅需要考虑正常设置结果的情况，还需要考虑异常的情况，其实 CompletableFuture 提供了 completeExceptionally 方法来处理异常情况。  </p><ul><li>当出现异常时把异常信息设置到 future 内部，这样调用 get() 时就会在抛出异常后终止。  </li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// 1.创建一个CompletableFuture对象</span><br>CompletableFuture&lt;String&gt; future = <span class="hljs-keyword">new</span> CompletableFuture&lt;String&gt;<span class="hljs-literal">()</span>;<br><br><span class="hljs-comment">// 2.开启线程计算任务结果，并设置</span><br><span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(()</span> -&gt; &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 2.1 抛出异常</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>            throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">RuntimeException(<span class="hljs-string">&quot;excetion test&quot;</span>)</span>;<br>        &#125;<br>        <span class="hljs-comment">// 2.2设置正常结果</span><br>        future.complete(<span class="hljs-string">&quot;ok&quot;</span>);<br>    &#125; catch (Exception e) &#123;<br>        <span class="hljs-comment">// 2.3 设置异常结果</span><br>        future.complete<span class="hljs-constructor">Exceptionally(<span class="hljs-params">e</span>)</span>;<br>    &#125;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;----&quot;</span> + <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span> + <span class="hljs-string">&quot; set future result----&quot;</span>);<br><br>&#125;, <span class="hljs-string">&quot;thread-1&quot;</span>).start<span class="hljs-literal">()</span>;<br><br><span class="hljs-comment">// 3.等待计算结果</span><br><span class="hljs-comment">//System.out.println(future.get());</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(future.exceptionally(t -&gt; <span class="hljs-string">&quot;default&quot;</span>).get<span class="hljs-literal">()</span>);<span class="hljs-comment">// 当出现异常时返回默认值</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>《番茄工作法》读书笔记</title>
    <link href="/2021/01/07/2020-04-13-tomatoWork/"/>
    <url>/2021/01/07/2020-04-13-tomatoWork/</url>
    
    <content type="html"><![CDATA[<h2 id="番茄工作法-https-book-douban-com-subject-34820460"><a href="#番茄工作法-https-book-douban-com-subject-34820460" class="headerlink" title="番茄工作法  https://book.douban.com/subject/34820460/"></a>番茄工作法  <a href="https://book.douban.com/subject/34820460/">https://book.douban.com/subject/34820460/</a></h2><h2 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h2><h3 id="困惑"><a href="#困惑" class="headerlink" title="困惑"></a>困惑</h3><ul><li>问题：根据番茄工作法中一个番茄时间不可分割的法则，倘若中间因为处理某些突发事件而中断的番茄钟，是不可把其当作一个番茄钟的。然而这样会导致预估的番茄钟与实际完成的番茄钟对应无法对应。譬如我预估整理笔记并发布到博客为两个番茄钟，然而第二个番茄钟即将完成之际因突发事件中断，且此时笔记已整理完成，然此时实际使用的番茄钟仍为1，不利于计算预估与实际番茄钟之间的误差。<br>20/4/13解决方案：备注下此任务被打算；尽量避免被外来事件所打扰。   </li></ul><h3 id="所需的三张工作表"><a href="#所需的三张工作表" class="headerlink" title="所需的三张工作表"></a>所需的三张工作表</h3><ul><li>今日待办任务   </li><li>活动清单  </li><li>记录表</li></ul><h2 id="片段"><a href="#片段" class="headerlink" title="片段"></a>片段</h2><ul><li><p>太多内生干扰的出现给我们传达了一条信息：我们无法安心做好手头上的事情。这也许来自于我们害怕失败的心理。也许是我们的目标太复杂了，又或者我们觉得时间所剩无几，大脑为了保护我们，生出其他各种令人心里有底的活动。大脑作怪一旦开始就停不下来，最后我们干脆选择去做那些干扰活动。</p></li><li><p>流变（becoming）：流变是指时间抽象和空间的一面，生成了按“秒”“分”和“时”度量时间的习惯；流变也是在一条轴上代表时间的想法，就像我们用坐标轴代表空间的各个维度一样；流变是一个事件用时的概念，也就是在时间轴上两点之间的距离；流变也是“迟到”的概念，同上，也是时间轴上两点之间的距离。(1)  事件的连续性（the succession of events）：这是时间具体的一面。我们醒来、洗澡、用早餐、学习、吃午餐、打个盹、玩耍、吃饭和上床睡觉。在掌握抽象时间的概念之前，孩子们已经有了这样具体的概念，但无论发生什么事，抽象的时间都在不停流逝。</p></li><li><p>在这两个方面中， “流变”令我们产生了焦虑。本质上，时间难以被描述和定义，且永无止境：时间朝着未来流逝。如果我们用时间的流逝来度量自己，那么每秒钟的流逝都会令我们感到不足、被压迫、被奴役和被打败。 如此一来，我们失去了朝气，而朝气，是我们能够完成事情的生命力。“两个小时过去了，我什么都没完成；两天过去了，我还是什么都没完成。”在脆弱时刻，手上的任务究竟是什么变得不再清晰。“事件的连续性”是时间令人不那么焦虑的一面。有时候，它还代表着活动的常规连续性，这是令人心安和平静的节奏。</p></li><li><p>一张“今日待办任务”工作表。一天开始之际，我们需要在上面填入以下信息：  ·抬头：时间、地点、作者。</p></li><li><p>·按照优先顺序排列的待完成事件列表。  ·一项“计划外和紧急活动”。如果出现计划外但不得不处理的事件，把它记录在该项中。这些事件可能会改变一天的计划。  ·一份“活动清单”，包括抬头和空格。抬头用来记录作者名字，空格用来填入之后出现的各式各样的活动。在一天结束之际，那些完成了的任务就可以被划掉。  ·一份“记录表”。这份表格记录各种原始数据，用来制作相关的报告和图表。根据不同目标记录表设置了不同类别的方格。通常，这张表包括了日期、任务描述、完成每一项任务的番茄工作时数。这张表每日更新一次，通常在一天结束之际完成。</p></li><li><p>目标一：计算活动所需花费的时间</p></li><li><p>一个番茄时间不能被中断，它标志着25分钟纯粹的工作。一个番茄时间也不能被分段，没有所谓半个或者四分之一个番茄时间。最小的时间单位就是一个番茄时间。我们的法则是番茄时间不可分割。如果一个番茄时间被打断，那么这个番茄时间就要作废，一切都要从头开始，设置一个新的番茄时间。当定时器响起，在该项任务后画上一个“×” ，然后休息个3到5分钟。定时器响起意味着当前活动一定结束了，即使只是暂时的。切勿再多工作个“几分钟就好了”，就算你坚信只要再给你几分钟你就可以完成手上的任务了。</p></li><li><p>3到5分钟的休息让你和工作暂时脱钩，让大脑消化25分钟的学习所得，也给你些时间做些有益身心的事情，这样你在下一个番茄时间可以发挥得更出色。</p></li><li><p>在休息期间，不宜继续想着上个番茄时间里的内容。一旦休息结束，将定时器设置成25分钟，继续手上的任务，直到铃响。接着，在“今日待办任务”工作表中画上另一个×（如表2-4）。</p></li><li><p>每4个番茄时间为一组  每4个番茄时间后，你应该停止手头上的工作，享受一个较长的休息时间，一般是15到30分钟左右。</p></li><li><p>完成一项任务  你不停地工作，一个接一个地完成番茄时间，直到任务结束，然后在“今日待办任务”工作表上将结束的任务划掉</p></li><li><p>具体情况都依照以下法则处理：  ·如果一项任务完成了，但一个番茄时间还未结束，那么牢记以下法则：一个番茄时间必须有始有终。你可以利用这个机会超量学习，用剩下的时间复习所学，做出小小改进，记下你都学了什么，一直到番茄定时器响起。  ·如果你在番茄时间开始后的5分钟内就完成了任务，而且觉得这个任务在上个番茄时间其实就已经收尾了，没必要再重温一次，那么，作为一个例外，当前的番茄时间可不计。   表2-7：完成几个任务 一旦完成当前任务，就着手下一个任务，一直如此下去，每一个番茄时间结束后休息3到5分钟，每四个番茄时间结束后享受一个较长的休息时间（如表 2-7）。</p></li><li><p>在番茄工作法之下，重要的不是追踪一个活动的开始时间，而是每项活动所花费的番茄时间数量，这是真正的付出。明白这点对于理解番茄工作法至关重要。</p></li><li><p>记录给使用番茄工作法的人们提供了一个有效的工具，用来自我观察和做决策，改善活动流程。比如，你可以计算一下，每周你花在工作或探索性活动上的番茄时间有多少，或者一周平均每天花了多少个番茄时间。你也可以看下番茄工作法的所有阶段是否都是有效的，是否可以在得到一样效果的前提下略过某个阶段。</p></li><li><p>这些问题能够促使人们去改进，至少尝试去改进他们的工作或者学习过程。在一天结束之际，记录和之后的反思应该在一个番茄时间内完成。</p></li><li><p>目标二：减少干扰</p></li><li><p>在工作期间，这些干扰或者拖延的方式被称作内生干扰。它通常掩盖了我们不能够以想要的方式和节奏完成工作的恐惧。内生干扰往往和不能够集中精力息息相关。</p></li><li><p>怎么才能摆脱内生干扰的影响？需要从两方面入手：  1.我们将这些干扰可视化，每当你发现干扰出现，就在你的番茄时间表上画上一个撇号（’）。  2.决定处理它们的方法。你可以按照以下方法处理：  ·如果你觉得新任务紧急且无法推后，那么在“今日待办任务”工作表的“计划外&amp;紧急”一栏处记下这个任务。  ·将它记录在“活动清单”上，标上“U”（计划外），如果有必要，可以设定完成该任务的截止时间。</p></li><li><p>·增强你完成进行中的番茄时间的决心。标上撇号·（’）·后继续完成手头工作直到定时器响起。（法则：一个番茄时间必须有始有终。）</p></li><li><p>关键是，在番茄工作法之下，许多有用或者有趣的事情会出现，但是我们清醒地做出决定，在番茄时间中不去做这些事情。</p></li><li><p>真正紧急的事件在“今日待办任务” 工作表上被着重突出，而番茄工作法就是不让番茄时间被其他活动所干扰。于是，我们可以按照下列方法来做：  ·把干扰活动放到下一个番茄时间去做，取代原来的活动，仍按一个番茄时间计算。  ·重新安排时间表，取消一些活动，安排新活动。  ·将干扰活动从一个番茄时间推到下一个番茄时间，不停往后推，直到一天结束。这能够帮助我们慢慢学习到什么才是真正紧急的。  如果计划外但紧急的活动在当天得以完成，那么在表格相应的位置划掉它</p></li><li><p>如果你守不住诱惑或者事情真的十分紧急，不得不中断番茄时间，那么只有一种方法，那就是，将进行中的番茄时间作废，就算定时器快响了也一样。记住，我们的法则是，一个番茄时间不可切分。在已完成的番茄时间后画上一个撇号，代表一个被中断的番茄时间。显然，你不能用×来代表一个未完成的番茄时间，所以干脆休息5分钟，然后开始新的番茄时间。  下一个番茄时间会更顺利的。减少干扰的首要任务就是意识到内生干扰的数量和类型。观察这些干扰，接受它们、安排它们或者删除它们。</p></li><li><p>面对外在干扰，我们要有能力“保护”番茄时间正常进行。</p></li><li><p>把事情往后推不会给尝试和你沟通的人带来什么损失，却可以让你的大脑更有效率地运作，按照原计划处理任务、重新安排紧急事件。这样做多了，你就会发现，所谓紧急事件常常可以被推迟到第二天再处理，而且不会让找你做事的人失望。</p></li><li><p>处理外在干扰和内生干扰并无二致。在这里，我们主要处理以下两个方面：  1.将干扰可视化。每当有人或有事要中断番茄时间，就在番茄时间记号旁画上一条短横线（-）。  2.做决定，处理干扰。你可以按照以下方法处理干扰：  ·假如新活动必须当天完成，就在“今日待办任务”工作纸的“计划外&amp;紧急”一栏记下它，在左边加上截止日期，用括号括住。</p></li><li><p>把活动放入“活动清单”，标记上“U”（计划外），如有必要加上截止日期并用括号括住。</p></li><li><p>·加强你完成番茄时间的意志力，画上短横线之后，继续工作直到定时器响起。</p></li><li><p>番茄工作法使用者有以下目标：  ·要推迟处理紧急事件的番茄时间，越久就好，这样可以缓解干扰的紧急性，增强它们的可控性和可安排性。  ·要逐步减少腾给干扰事件的番茄时间。</p></li><li><p>查看每天活动的记录情况，看看“活动清单”里标上“U”的活动和“今日待办任务”工作表上“计划外&amp;紧急”一栏的活动。这样一来，在规划阶段，你可以评估自己在针对某个目标所安排活动的数目和类型上的预估能力。计划外活动越多，你开始时预估的质性误差就越大。所以，你可以计算出完成既定目标过程中出现了多少计划外活动。显然，你可以将“记录表”上的内生和外在干扰算在一起，并在今后逐步减少它们的出现次数。</p></li><li><p>目标三：预测活动所需多少工夫</p></li><li><p>在一天开始之际，你要计算清单里每项活动所需的番茄时间。如果有需要，可以修改之前的预测。将预测的番茄时间数写在“活动清单”相应的位置</p></li><li><p>法则：如果任务预计要花超过5到7个番茄时间，将它分解开来。这样一来，活动的复杂性降低了，预测的准确性提高了</p></li><li><p>法则：如果活动预计所花时间不够一个番茄时间，把类似活动累积起来。</p></li><li><p>不是所有活动的时间都能被预测。在一个新项目或者学习活动开始的时候，花些时间探索有益无害。这些探索包括搜寻新资源、明白你要学习或者参考的文本的结构以及更清楚地定义你的目标。在探索的过程中，时间箱这个方法值得一试。给探索设置番茄时间，当时间到了，你可以做工作计划或者开始一项活动，又或者你可以继续探索，这取决于你究竟想走哪个方向。</p></li><li><p>目标四：让番茄时间更高效</p></li><li><p>番茄时间的结构  首先升级的是番茄时间的结构。每个番茄时间的头3到5分钟可以用来简单地重温之前所学过的东西（从活动的一开始复习起），巩固印象。每个番茄时间的最后3到5分钟可以用来快速地复习之前所有事情。如果情况允许，用“结果—原因”程式，从最后一项活动逐个返回到一开始的计划。</p></li><li><p>番茄时间组  以4个番茄时间为一组，升级番茄时间。如上文所说，番茄时间组中的第一个番茄时间或它的一部分也能够用来复习开始到现在所完成的事情。同样，番茄时间组的最后一个能够用来复习之前所学。在进行重复和修改时，如果你将它们大声读出来或者和团队里的成员一起讨论，效果会更好。系统性的重复和修改能提高“过度”学习的效果，有助于获得新知识。</p></li><li><p>目标五：制作时间表</p></li><li><p>·时间表度量了一天的成果。一旦我们整理好“今日待办任务”·工作表，我们的目标就是在既定的时间里以最高质量完成工作表里的活动。如果时间用尽而工作却没完成，我们可以想法子弄明白哪里出了问题。在这个过程中，我们还能得到极其宝贵的信息，那就是，一天内，我们完成了多少个番茄时间。  使用番茄工作法的时候，浪费了多少时间并不重要，重要的是我们完成了多少个番茄时间。到了第二天，我们在决定有多少个番茄时间可用时，可以参考前一天的数量，根据这个来安排要做的活动。</p></li><li><p>时间表延后，脆弱性上升，生产力便下降，接着时间表再度被延后。所以，首先，必须尊重一张有效的时间表。时间表可以由时间段组成，每个时间段安排一个活动。尊重时间表意味着对“再给我五分钟” 症状产生免疫。如果时间段结束了，就像定时器响了，所有活动必须马上停止。无论还有多少时间在番茄工作表上，法则同样适用，那就是，时间表总是优先于番茄时间。其次，一张有效的时间表总是留有足够的时间让你恢复精力。</p></li><li><p>目标六：定义你个人的提升目标</p></li><li><p>在练习的过程中，番茄工作法使用者提高了对时间流逝的意识。这种对于时间流逝的觉察能帮助使用者在工作中提升专注力。</p></li><li><p>在学习使用番茄工作法的过程中，一开始你可能会有些焦虑，觉得自己被定时器控制了。经验显示，这种感觉主要在以下两种情况下出现：  ·不习惯自律的人  ·对完成目标非常看重的人  以上两种情况中，我们很难集中精力完成番茄工作法的首要目标——每个人通过自我观察，改善工作或者学习的进程。  对于没有自律习惯的人来说，响铃焦虑通常是因为他们害怕定时器成为监视工作进程的外在工具。  在这里，我们要强调一点，番茄工作法的目的不是要对你施加任何外部分析或控制。番茄工作法里没有视察员，不会监控员工的工作时间和方法，因此，我们不应该误解它是一种外部控制。相反，它是用来满足自我提升的需求的，我们必须心甘情愿地使用它它才有效。  响铃焦虑在以结果为导向的人身上更普遍。如果每个嘀嗒声都似催促声，而每一声似乎又在重复这样的问题“我够快吗？”那么我们便患上了 “流变（becoming）”症。该症状在当今十分普遍。在这背后是人们的恐惧，他们恐惧无法向自己和他人展现出十足的功力。番茄工作法对他们来说成了比较的形式，和别人比或和自己比，以至于每声嘀嗒似乎都证明了他们的无能。在这样时光流逝的压力下，他们会寻求捷径，但这并不能让他们走得更快，因为捷径必将导致缺陷和干扰，使恐惧扩大，最后造成恶性循环。要怎么样才能让嘀嗒声化作镇定人心的妙音呢？方法在下一个嘀嗒声中。然而只要大家还是一门心思想着飞速流逝的时间，那你将一无所获。  要从番茄工作法那学到的第一件事就是，“看起来快”不重要，“达到真正的快”才重要。要领会它，就要学习测量自己，观察自己的速度，认识到持续的价值。这也就是为什么番茄工作法的第一个目标仅仅是把完成的番茄时间记录下来。  如果起草一份两页简单的报告要花4个番茄时间，期望能在2个番茄时间内完成报告就不是重要的，向别人展示你能在2个番茄时间内完成任务也不是重要的。重要的是，如何能将4个番茄时间减为2个。  我们的首要挑战是如何根据每30分钟的工作表现分析出自己的工作模式，而不是对工作结果抱有期待。单纯地工作、跟踪、观察，然后根据需要做出调整和自我提升。一旦想明白了这一点，嘀嗒声就会化作另一种声音。因为，要快，你就得专注。</p></li><li><p>下一步就是做预测，你甚至可以挑战自己，预测某项任务完成所需花费的时间，并在这段时间内成功完成它。这是番茄工作法的其中一条游戏规则，但是不要走捷径。当我们越来越接近预测时间，画下每一个代表完成的×，我们就会面临越来越大的压力。这时候，你要勇敢、坚持住、保持冷静、继续专注，以获得成功。培养“持续” 的价值观有助于提高生产力和创造力。最终，定时器的每一个嘀嗒声传入耳朵时，都将变成提醒你保持专注力和持续下去的最强音。</p></li><li><p>番茄工作法令你专注在当下的番茄时间里，一个完成了就接着下一个。你的注意力将只在当下，不断地寻找保持工作连续性的方法，并用最合理的方式执行手头上的任务。  在你失去方向时，番茄定时器能帮助你分清事情的轻重缓急并制订出新计划。如果你有明确的方向，但缺少一点东西，比如决心或者勇气，千万别坐着干等，给定时器上个发条，开始工作吧。  有拖延症的人说，番茄工作法让他们受益匪浅，他们终于可以集中精神，做出点成果（指最多用五到七个番茄时间能完成的任务），免受担忧之苦。一次一个番茄时间，不断完成任务，不断完成目标。</p></li><li><p>为了保证最大效果，定时器需要满足以下条件：  ·定时器是能够上发条的。上发条这个动作宣告了你开始着手手头任务的决心。  ·定时器要能清楚显示剩余时间有多少，还要能发出嘀嗒声。这是用来练习时间感受和保持专注的。  ·时间到了，定时器要能发出清晰的提示声。  另外，记录一个番茄时间的结束或者将完成了的任务从“今日待办任务”工作表上删除，使用者需要保持这些固定的动作。因此，这些操作最好不要自动化。</p></li><li><p>番茄工作法带来更真切的一个收获是预测能力的提高。预测能力通过以下两个途径得以提高：  ·减少番茄时间的预测数量和实际使用数量的误差，意味着量性预测能力获得提高。</p></li><li><p>·减少计划外的任务的数量，意味着质性预测得到提升。</p></li><li><p>如果你特别累，就安排短一点的番茄时间组（比如，三个番茄时间为一组），在组与组之间设置更长的休息时间。如果你觉得越辛苦、落后越多，或者越惊恐，你就越应该进行重复和回顾，而不是不惜代价地推进。重要的不是弥补失去的时间，而是专注于完成任务的每一个下一秒，那些你总想做点儿别的什么事的下一秒。</p></li><li><p>番茄工作法的局限  番茄工作法的最大缺陷在于你需要一个小器械来帮助你有效地完成任务。断断续续地使用该工作法会抵消前面所提到的所有的好处。尽管逐量分解任务的能力不变，你也保持短休息的做法，但是番茄工作法的法则对保持工作的高效至关重要。</p></li><li><p>什么时候不适合用番茄工作法？  番茄工作法不适用于你在自由时间所安排的活动。实际上，番茄工作法会让这些活动变得有条理且有目的性，这样一来，自由时间就不自由了。如果你抱着娱乐身心的目的去读一本书，这时候就根本不需要用番茄工作法，你要将番茄时间从自由时间里抽走。</p></li><li><p>番茄工作法对个人或团队产生的积极效果来自于许多不同的因素，这些因素归纳起来有以下几点：  逆转对时间的依赖  番茄时间代表的是时间的片段，也是一个能控制和限制“流变”的“方格”，到最后，时间反而依赖这个“方格”。通过打破和倒转我们对时间的依赖，时间的新视角就产生了；通过用有限的时间片段（番茄时间）来度量自己，我们便能成功打破对“流变”这一概念的直接依赖。</p></li><li><p>时间的流逝不再被视作消极而是积极的了。每个番茄时间都表示一个提升自我或者在困境中迅速重振自我的机会。流逝的时间越多意味着你改善过程的机会越大、预测和安排任务变得越轻松、焦虑减轻得越多，伴随着的是提升的意识、增强的注意力，以及对决策下一步的更清晰的思维。最后，生产力得以提高。</p></li><li><p>调节复杂性  如果每天能够完成几项既不太复杂又不十分简单的颇具挑战性的任务，我们的动力就能最大化</p></li><li><p>抽 离  番茄工作法里频繁的小憩对于流动的、清醒的和有效的大脑活动颇有益处，并能带来生产力的提升。</p></li><li><p>使用了番茄工作法后，很多人开始明白“抽离”的价值和效果。每25分钟一次小憩让你从不同的视角看待事情，并想出不同的解决方法。如此一来，你总是能找到需要修正的错误，你的创造力也会被激发出来。 “抽离” 提高了连续的价值。  但是，休息必须是彻底的休息。如果在25分钟工作时间结束了或者一组番茄时间完成后，你停止了手头上的工作，但在休息时候继续想着工作，这就不是真正的休息。</p></li><li><p>观察和不断地反馈  番茄工作法也代表了每25分钟一次比较科学的工作方法。一个番茄时间的头5分钟和最后5分钟用来复习你所做过的事情，令你觉察之前所为是否有效。</p></li><li><p>在最紧要的关头，工作方向能从接下来的番茄时间里做出改变，所需完成的任务也可以重新安排。  每日至少记录一次数据，追踪每一个30分钟，这样一来，我们就能根据目标来测评工作方式。通过观察你的记录，你可以做出修改工作过程的决定，改善任务的内容，制定更加明确的目标或者分解任务，找到和删除重复的工作或阶段，采用不同的策略来应付聚集在一起的任务，同时减少质性预测的误差。  在工作或学习过程中不断提升，这样的机会使你更坚定，并能激发你的个人兴趣。  可持续的节奏  尊重工作和休息的安排表帮助我们实现可持续发展。事实上，为了保证持续的高生产力，马不停蹄地从早忙到晚并不是上策。工业生产中的机器如果毫不停歇地工作很长一段时间当然能产出更多，但是人类不是机器。</p></li><li><p>如果尊重每个番茄时间之间以及每组番茄时间之间的休息安排，你可以用自己的节奏工作或学习。你会疲倦，这很自然，但是你不会筋疲力尽。换句话说，通过有意识地安排休息时间和工作内容的复杂性，最后每个番茄工作法的使用者都能了解自己的可持续性节奏和生理节奏。</p></li><li><p>每个番茄时间都很重要。番茄工作法的目标就是要发展个人对时间的意识，也就是你要能觉察每个下一步。每一步，你都在培养这种觉察能力。观察需要努力和训练，所以你要收集自己如何工作的信息，而且要系统地做。我们的成长会令自己大吃一惊，也能一路摆脱不切实际的想法。  你不用和时间竞赛。在番茄工作法中，如果有意识地使用时间，那么时间就是用来提高工作效率的工具。培养觉察能力是目标，而时间是工具。你会和斧头一般的工具一争高下吗？毫无道理可言。在某些情况下，你会生出赢过时间的念头，比如，你想在一天之内完成很多个番茄时间，打破某个纪录。如果你这么做，那么你其实已经输了，因为正如波德莱尔在诗作《时钟》里写的：“时间是个贪婪的赌徒，从不作弊，逢赌必赢！”和时间的任何形式的竞争都注定会输。如果在某个瞬间，你突然发现自己在和时间竞赛，该怎么办？请暂停番茄时间，深呼吸，记住：下一个番茄时间会更顺利。</p></li><li><p>休息。休息是番茄工作法的重要组成部分。休  息让你从工作中抽离一会，觉察到疲倦，并决定停止或者继续下去。休息一阵后，带着更清晰的认识和更强的工作意愿，进入下一个番茄时间。休息令我们更高效，它们并不干扰工作。  一次完成一个目标。番茄工作法被细分成一系  列增量性质的目标。有意识地使用该工作法并成功达成上个小目标都有助于完成下一个目标。为了看清楚自己是否真的完成了目标而不是欺骗自己，我们来回答以下问题，它们能够帮助我们设定从各种不同目标中获得提升的样子：  ·用番茄时间的头5分钟和最后5分钟回顾完成的工作后，一切有没有更清晰？  ·如果在修改和重复任务时，大声念出来会不会更有效果？  ·如果在修改和重复任务时，找一个伙伴一起完成会不会更有效果？  ·假如你发现以上问题的答案都是否定的，而且你不能轻松地达成一个既定目标，那么问问自己，是否完全且清醒地完成了之前的目标。如果没有，暂停手上的工作，直到你完成之前的那些目标。  没有必要赶时间。你的目标不是在最短时间内完成番茄工作法的所有目标，这样做不过是和时间竞赛。慢下来，根本没有必要赶时间。按照你的节奏走，在完成现有工作的路上一路享受。快乐并非来自匆匆赶往下一个任务的路上，而是来自于能清醒地体验手头上的工作正在被一点一点完成。</p></li><li><p>法则   </p></li></ul><p>1.一个番茄时间包括25分钟的工作时间和5分钟的休息时间。<br>2.每完成4个番茄时间，休息15到30分钟。<br>3.一个番茄时间不可分割。没有所谓的半个番茄时间或四分之一个番茄时间。<br>4.一个番茄时间必须有始有终。<br>5.如果一个番茄时间被不停中断，则该番茄时间作废。<br>6.如果在一个番茄时间没结束就完成了任务，请检查、回顾任务，直到定时器响起。<br>7.保护番茄工作法。及时告知对方（你目前没有时间），迅速协商、重新安排中断事件并按照协商时间回复来找你的人。<br>8.如果任务预计要花超过5到7个番茄工作时间，将它分解开来。将复杂的任务分解成几个小任务。<br>9.如果任务预计所花时间不够一个番茄工作时间，把它们累积起来。<br>10.结果是一个又一个番茄时间的累积。<br>11.时间表总是优先于番茄工作时间。<br>12.一个小队，一个番茄时间。<br>13.下一个番茄时间会更顺利。  </p><ul><li>质性预测误差（QUALITATIVEESTIMATION  ERROR）：当我们需要完成一个目标，但是却没有将过程中所有必须要完成的任务预测进去，就发生了质性预测误差。<br>量性预测误差（QUANTITATIVEESTIMATIONERROR）：当一个任务实际所花时间比我们预测的多或者少，那么就产生了量性预测误差。</li></ul>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>多线程及异步编程的前世今生</title>
    <link href="/2021/01/07/2020-03-20-javaAsyncPractice/"/>
    <url>/2021/01/07/2020-03-20-javaAsyncPractice/</url>
    
    <content type="html"><![CDATA[<h2 id="显式使用线程和线程池实现异步编程"><a href="#显式使用线程和线程池实现异步编程" class="headerlink" title="显式使用线程和线程池实现异步编程"></a>显式使用线程和线程池实现异步编程</h2><h3 id="Java中显式开启一个线程进行异步处理的两种方式"><a href="#Java中显式开启一个线程进行异步处理的两种方式" class="headerlink" title="Java中显式开启一个线程进行异步处理的两种方式"></a>Java中显式开启一个线程进行异步处理的两种方式</h3><h4 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h4><ul><li><p>在Java中，Java虚拟机允许应用程序同时运行多个执行线程，所以我们可在main函数内开启一个线程来异步执行任务A，而main函数所在线程执行B，即可大大缩短整个任务处理耗时。  </p></li><li><p>Java中有两类线程：<br>User Thread(用户线程)、Daemon Thread(守护线程)</p></li><li><p>run()是多线程程序的一个约定，所有的多线程代码都在其中执行。  </p></li><li><p>在启动多线程时，首先需要通过Thread(Runnable target)构造出线程对象，再调用start()运行多线程。  </p></li><li><p>所有的多线程代码都是通过Thread的start()来运行。  </p></li><li><p>线程调用 join() 后，main线程必须等待该线程终止后，main线程才能继续进行；若不调用join()，main线程执行完会退出，等待非守护线程结束后JVM退出  </p></li><li><p>并发问题的小疑惑<br>既然CPU同一时间只能执行一个线程，为什么存在并发问题<br>CPU的时间是按时间片分的，而不是一个时间点，并发问题是由于CPU线程切换导致的。<br>现在假设有一段代码如下：</p></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">if</span>(i == <span class="hljs-number">1</span>) &#123;<br>    i++;　　<span class="hljs-regexp">//</span>断点<span class="hljs-number">1</span><br>    system.out.print(i);       <br>&#125;　<span class="hljs-regexp">//</span>断点<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>有两个线程A，B同时执行这一段代码，假设A线程先被CPU调度，然而A线程在断点1处，时间片到期了，此时A线程的代码并没有执行完，但是CPU此时会调度B线程，并不会管A线程是不是执行完了这一段代码。<br>再接着假设B线程现在执行完了这一段代码(当然也可能没有执行完)，CPU 现在就又会调度A线程，并且从A线程的断点1处继续执行(注意不是重新执行，CPU切换的时候保存了线程的上下文)<br>总结一下：CPU切换线程并不会管你线程是否将代码执行完，而是和分给线程的时间片是否到期有关，时间片到期了就会切换线程，并发也就由此产生了。  </p><h4 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h4><ol><li>实现java.lang.Runnable接口的run方法，然后传递Runnable接口的实现类作为创建Thread时的参数，启动线程。  </li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> AsyncThreadExample&#123;<br>    public static void <span class="hljs-constructor">A()</span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>sleep(<span class="hljs-number">2000</span>);<br>        &#125;catch(InterruptedException e)&#123;<br>            e.print<span class="hljs-constructor">StackTrace()</span>;<br>        &#125;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;----deSomethingA--&quot;</span>);<br>    &#125;<br><br>    public static void <span class="hljs-constructor">B()</span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>sleep(<span class="hljs-number">2000</span>);<br>        &#125;catch(InterruptedException e)&#123;<br>            e.print<span class="hljs-constructor">StackTrance()</span>;<br>        &#125;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;---doSomethingB--&quot;</span>);<br>    &#125;<br><br>    public static void main(String<span class="hljs-literal">[]</span> args) throws InterruptedException &#123;<br>        long start = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>current<span class="hljs-constructor">TimeMillis()</span>;<br>        <br>        <span class="hljs-comment">//方式1启动线程执行A</span><br>        Thread thread = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread( ()</span> -&gt; &#123;<br>            <span class="hljs-keyword">try</span>&#123;<br>                <span class="hljs-constructor">A()</span>;<br>            &#125;catch(Exception e)&#123;<br>                e.print<span class="hljs-constructor">StackTrace()</span>;<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;threadA&quot;</span>);<br>        thread.start<span class="hljs-literal">()</span>;<br><br>        <span class="hljs-comment">//main线程继续执行B</span><br>        <span class="hljs-constructor">B()</span>;<br><br>        <span class="hljs-comment">//同步等待线程threadA运行结束</span><br>        thread.join<span class="hljs-literal">()</span>;<br>        <br>        <span class="hljs-comment">//打印运行时间</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>current<span class="hljs-constructor">TimeMillis()</span> - start);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><span style="color: red">*</span>注意：    </p><ul><li>如果去掉同步等待threadA运行结束的代码，则main线程执行完毕后先行死亡。留下threadA线程继续执行（JVM发现有非守护线程在运行就不会停止），等threadA执行完毕后JVM关闭。  </li></ul><ol start="2"><li>开启线程进行异步执行的方式是实现Thread类，并重写run方法（创建了Thread的匿名类的实现，并重写了run方法，然后启动了线程执行。）  </li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript">Thread thread = <span class="hljs-keyword">new</span> <span class="hljs-function"><span class="hljs-title">Thread</span>(<span class="hljs-params"><span class="hljs-string">&quot;threadA&quot;</span></span>)</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            doSomethingA();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;;<br>thread.start();<br></code></pre></td></tr></table></figure><p><span style="color: red">*</span>总结：  </p><ul><li>Runnable相较于Thread的优势   </li></ul><p>1.适合拥有多个相同程序代码的线程去处理同一资源<br>2.可以避免Java中的单继承限制<br>3.代码可以被多个线程共享<br>4.代码和数据实现独立<br>5.增加程序的健壮性<br>6.线程池只能放入实现Runnable或Callable的类，不能直接放入继承Thread的类  </p><h4 id="Java三种创建线程的方法"><a href="#Java三种创建线程的方法" class="headerlink" title="Java三种创建线程的方法"></a>Java三种创建线程的方法</h4><p><a href="https://blog.csdn.net/u012894692/article/details/80215140">https://blog.csdn.net/u012894692/article/details/80215140</a></p><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><h3 id="向线程池投递一个Callable类型的异步任务，并且获取其执行结果"><a href="#向线程池投递一个Callable类型的异步任务，并且获取其执行结果" class="headerlink" title="向线程池投递一个Callable类型的异步任务，并且获取其执行结果"></a>向线程池投递一个Callable类型的异步任务，并且获取其执行结果</h3><h4 id="解读"><a href="#解读" class="headerlink" title="解读"></a>解读</h4><ul><li>Runtime.getRuntime().availableProcessors()<br>获取当前物理机的CPU核数  </li><li>new ThreadPoolExecutor(AVALIABLE_PROCESSORS,  //设置线程池核心线程个数为当前物理机的CPU核数  <pre><code>        AVALIABLE_PROCESSORS * 2,  //最大线程个数为当前物理机CPU核数的2倍           1,  //当线程数大于内核数时，这是多余的空闲线程在终止之前等待新任务的最长时间。            TimeUnit.MINUTES,   //时间单位          new LinkedBlockingQueue&lt;&gt;(5),  //设置线程池阻塞队列的大小为5          new NamedThreadFactory(&quot;ASYNC-POOL&quot;),  //使用了命名的线程创建工厂，以便排查问题时可以方便追溯是哪个相关业务。           new ThreadPoolExecutor.CallerRunsPolicy());  //将线程池的拒绝策略设置为CallerRunsPolicy，即当线程池任务饱和，执行拒绝策略时不会丢弃新的任务，而是会使用调用线程来执行   </code></pre></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AsyncThreadPoolExample3</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">doSomethingA</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">2000</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;A Task Done&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 0自定义线程池</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> AVALIABLE_PROCESSORS = Runtime.getRuntime().availableProcessors();<br>    <span class="hljs-comment">//设置线程池核心线程个数为当前物理机的CPU核数，最大线程个数为当前物理机CPU核数的2倍；设置线程池阻塞队列的大小为5；</span><br>    <span class="hljs-comment">//需要注意的是，我们将线程池的拒绝策略设置为CallerRunsPolicy，即当线程池任务饱和，执行拒绝策略时不会丢弃新的任务，而是会使用调用线程来执行；</span><br>    <span class="hljs-comment">// 另外我们使用了命名的线程创建工厂，以便排查问题时可以方便追溯是哪个相关业务。</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> ThreadPoolExecutor POOL_EXECUTOR = <span class="hljs-keyword">new</span> ThreadPoolExecutor(AVALIABLE_PROCESSORS,<br>            AVALIABLE_PROCESSORS * <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, TimeUnit.MINUTES, <span class="hljs-keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="hljs-number">5</span>),<br>            <span class="hljs-keyword">new</span> NamedThreadFactory(<span class="hljs-string">&quot;ASYNC-POOL&quot;</span>), <span class="hljs-keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException, ExecutionException </span>&#123;<br><span class="hljs-comment">// 1.开启异步单元执行任务A</span><br><span class="hljs-comment">//使用lambda表达式将Callable类型的任务提交到线程池，提交后会马上返回一个Future对象</span><br>        Future&lt;?&gt; resultA = POOL_EXECUTOR.submit(() -&gt; doSomethingA());<br>        <span class="hljs-comment">// 2.同步等待执行结果</span><br><span class="hljs-comment">//调用get()方法阻塞等待异步任务的执行结果</span><br>        System.out.println(resultA.get());<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><p>自定义拒绝策略  </p></li><li><p>在 Spring 中统一管理线程池  </p></li></ul><ol><li>基础回顾<br>@bean 和 @component 的理解<br>Spring帮助我们管理Bean分为两个部分，一个是注册Bean，一个装配Bean。<br>完成这两个动作有三种方式，一种是使用自动配置的方式、一种是使用 JavaConfig 的方式，一种就是使用XML配置的方式。<br>在自动配置的方式中，使用 @Component 去告诉 Spring ，我是一个 bean，你要来管理我，然后使用 @Resource(@AutoWired) 注解去装配Bean(所谓装配，就是管理对象直接的协作关系)。然后在 JavaConfig 中，@Configuration 其实就是告诉spring，spring容器要怎么配置（怎么去注册bean，怎么去处理bean之间的关系（装配））。那么就很好理解了，@Bean 的意思就是，我要获取这个bean的时候，你spring要按照这种方式去帮我获取到这个bean。<br>用@Bean注解的方法：会实例化、配置并初始化一个新的对象，这个对象会由spring IOC 容器管理。例如：  </li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppConfig</span> </span>&#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MyService <span class="hljs-function"><span class="hljs-title">myService</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MyServiceImpl();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>生成对象的名字：默认情况下用 @Bean 注解的方法名作为对象的名字。但是可以用 name 属性定义对象的名字.    </p><p>@component 和 @Configuration 的区别：<br>在 @Component 注解的类中不能定义 类内依赖的 @Bean注解的方法。@Configuration 可以。例如：    </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppConfig</span> </span>&#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Foo <span class="hljs-function"><span class="hljs-title">foo</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Foo(bar());<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Bar <span class="hljs-function"><span class="hljs-title">bar</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Bar();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>创建 Bean   </li></ol><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 所有的线程池类型都从此类获取</span><br><span class="hljs-comment"> */</span><br>@Component<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AllThreadPool</span> </span>&#123;<br><br>    @Bean(name = <span class="hljs-string">&quot;rejectThreadPool&quot;</span>)<br>    <span class="hljs-keyword">public</span> ThreadPoolExecutor getRejectExecutor()&#123;<br>        <span class="hljs-comment">/**cpu核心线程数*/</span><br>        <span class="hljs-comment">//8 16</span><br>        <span class="hljs-comment">//左移</span><br>        <span class="hljs-comment">//1000   10000</span><br>        int coreNum=Runtime.getRuntime().availableProcessors();<br>        ThreadPoolExecutor executor = <span class="hljs-keyword">new</span> <span class="hljs-type">ThreadPoolExecutor</span>(<br>                coreNum&lt;&lt;<span class="hljs-number">1</span>,<br>                <span class="hljs-number">20</span>,<br>                <span class="hljs-number">120</span>L,<br>                TimeUnit.SECONDS,<br>                <span class="hljs-keyword">new</span> <span class="hljs-type">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">50000</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-type">NamedThreadFactory</span>(<span class="hljs-string">&quot;ASYNC-Pool&quot;</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-type">RejectedTaskPolicyWithReport</span>(<span class="hljs-string">&quot;ASYNC-Pool&quot;</span>));<br>        <span class="hljs-keyword">return</span> executor;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>依赖注入使用   </li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Resource</span><br>private ThreadPoolExecutor rejectThreadPool;<br></code></pre></td></tr></table></figure><h2 id="期间收获"><a href="#期间收获" class="headerlink" title="期间收获"></a>期间收获</h2><h3 id="如何正确的终止一个线程"><a href="#如何正确的终止一个线程" class="headerlink" title="如何正确的终止一个线程"></a>如何正确的终止一个线程</h3><ul><li>我们可以采用设置一个条件变量的方式，run方法中的while循环会不断的检测flag的值，在想要结束线程的地方将flag的值设置为false就可以啦！注意这里要将flag设置成 volatile 的，因为 volatile 可以保证数据的有效性，如果不设置话，可能会造成子线程多执行一次的错误，例如子线程将flag读到自己线程栈中，flag的值为true，此时子线程的交出执行权，操作系统将执行权交给了主线程，主线程执行flag=false；的操作，希望子线程不要再执行了，但是这一改变子线程是不能看到的，所以子线程还会再向下执行一次，然后重新读取flag的值的时候才会终止。   </li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> &#123;</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> throws InterruptedException </span>&#123;<br>        MyThread myThread = <span class="hljs-keyword">new</span> MyThread();<br>        myThread.start();<br>        Thread.sleep(<span class="hljs-number">3000</span>);<br>        myThread.flag = <span class="hljs-literal">false</span>;<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;主线程结束！&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-title">extends</span> <span class="hljs-title">Thread</span> &#123;</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">boolean</span> flag = <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (flag) &#123;<br>            System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;线程正在执行&quot;</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">500</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;线程已终止&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>当然你也可以将对flag所有操作都封装在synchronized关键字修饰的方法中，实现互斥访问，也可以达到相同的效果。  </li></ul><h3 id="stop方法为什么不安全"><a href="#stop方法为什么不安全" class="headerlink" title="stop方法为什么不安全"></a>stop方法为什么不安全</h3><p>其实stop方法天生就不安全，因为它在终止一个线程时会强制中断线程的执行，不管run方法是否执行完了，并且还会释放这个线程所持有的所有的锁对象。这一现象会被其它因为请求锁而阻塞的线程看到，使他们继续向下执行。这就会造成数据的不一致，我们拿银行转账作为例子，从A账户向B账户转账500元，这一过程分为三步，第一步是从A账户中减去500元，假如到这时线程就被stop了，那么这个线程就会释放它所取得锁，然后其他的线程继续执行，这样A账户就莫名其妙的少了500元而B账户也没有收到钱。这就是stop方法的不安全性。  </p><h3 id="main函数是主线程吗"><a href="#main函数是主线程吗" class="headerlink" title="main函数是主线程吗"></a>main函数是主线程吗</h3><ol><li>线程的概念：<br>线程是程序最基本的运行单位，而进程不能运行，所以能运行的，是进程中的线程。</li><li>线程是如何创建起来的：<br>进程仅仅是一个容器，包含了线程运行中所需要的数据结构等信息。一个进程创建时，操作系统会创建一个线程，这就是主线程，而其他的从线程，却要主线程的代码来创建，也就是由程序员来创建。<br>当一个程序启动时，就有一个进程被操作系统（OS）创建，与此同时一个线程也立刻运行，该线程通常叫做程序的主线程（Main Thread），因为它是程序开始时就执行的，如果你需要再创建线程，那么创建的线程就是这个主线程的子线程。每个进程至少都有一个主线程，在Winform中，应该就是创建GUI的线程。  主线程的重要性体现在两方面：1.是产生其他子线程的线程；2.通常它必须最后完成执行比如执行各种关闭动作。  </li><li>究竟main函数是进程还是线程<br>因为它们都是以main()做为入口开始运行的。　是一个线程,同时还是一个进程。在现在的操作系统中，都是多线程的。但是它执行的时候对外来说就是一个独立的进程。这个进程中，可以包含多个线程，也可以只包含一个线程。当用c写一段程序的话，就是在操作系统中起一个进程它包含一个线程。而当用java等开发一个多线程的程序的话，它在操作系统中起了一个进程，但它可以包含多个同时运行的线程。  </li></ol><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>main线程死亡后虚拟机并不会关闭，只有不存在非守护线程时虚拟机才会关闭。  </p><h3 id="使用JMX连接JVM"><a href="#使用JMX连接JVM" class="headerlink" title="使用JMX连接JVM"></a>使用JMX连接JVM</h3><ul><li>什么是JMX？<br>什么是JMX,Java Management Extensions，即Java管理扩展，是一个为应用程序、设备、系统等植入管理功能的框架。JMX可以跨越一系列异构操作系统平台、系统体系结构和网络传输协议，灵活的开发无缝集成的系统、网络和服务管理应用，详细内容可查看<a href="https://www.jianshu.com/p/8c5133cab858">https://www.jianshu.com/p/8c5133cab858</a>  </li><li>JMX使用<br>在安装JDK开发工具包后，在bin目录中有jmc.exe、jvisualvm.exe、jconsole.exe,这三个工具都可以提供可视化界面来监控我们的Java程序运行状况，既可以连接本地程序，也可以监控远程环境，使用起来很方便，这里以/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/bin/jvisualvm为例。  </li><li>本地环境<br>在Java安装bin目录启动jvisualvm，就可以看到本地监控程序，有启动的IDEA，如果有其他依赖于Java平台运行的程序也都会展示。  </li><li>远程环境连接<br>连接远程环境，需要在Java程序启动的时候添加以下参数  </li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">-Dcom<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.management</span><span class="hljs-selector-class">.jmxremote</span>.port=server_port 远程连接需要开放的端口<br><br>-Dcom<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.management</span><span class="hljs-selector-class">.jmxremote</span>.ssl=false 禁止使用ssl连接<br><br>-Dcom<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.management</span><span class="hljs-selector-class">.jmxremote</span>.authenticate=false 不使用安全认证<br><br>-Djava<span class="hljs-selector-class">.rmi</span><span class="hljs-selector-class">.server</span>.hostname=server_ip 要连接的远程主机的IP<br></code></pre></td></tr></table></figure><p>然后启动你的Java程序，可以添加在启动参数文件中，也可以用下面方式启动:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">java -Dcom<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.management</span><span class="hljs-selector-class">.jmxremote</span>.port=server_port -Dcom<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.management</span><span class="hljs-selector-class">.jmxremote</span>.ssl=false  省略...  -jar ./your_jar<br></code></pre></td></tr></table></figure><p>启动jvisualvm，添加JMX连接，可选不要求SSL连接。若未成功，检查程序是否成功启动，启动参数文件是否使用，防火墙是否开放端口  </p><h3 id="centOS7-查看防火墙状态"><a href="#centOS7-查看防火墙状态" class="headerlink" title="centOS7 查看防火墙状态"></a>centOS7 查看防火墙状态</h3><p> 一、防火墙的开启、关闭、禁用命令</p><p>（1）设置开机启用防火墙：systemctl enable firewalld.service</p><p>（2）设置开机禁用防火墙：systemctl disable firewalld.service</p><p>（3）启动防火墙：systemctl start firewalld</p><p>（4）关闭防火墙：systemctl stop firewalld</p><p>（5）检查防火墙状态：systemctl status firewalld </p><p>二、使用firewall-cmd配置端口</p><p>（1）查看防火墙状态：firewall-cmd –state</p><p>（2）重新加载配置：firewall-cmd –reload</p><p>（3）查看开放的端口：firewall-cmd –list-ports</p><p>（4）开启防火墙端口：firewall-cmd –zone=public –add-port=9200/tcp –permanent</p><p>　　命令含义：</p><p>　　–zone #作用域</p><p>　　–add-port=9200/tcp #添加端口，格式为：端口/通讯协议</p><p>　　–permanent #永久生效，没有此参数重启后失效</p><p>　　注意：添加端口后，必须用命令firewall-cmd –reload重新加载一遍才会生效</p><p>（5）关闭防火墙端口：firewall-cmd –zone=public –remove-port=9200/tcp –permanent</p><h3 id="CentOS-7中ifconfig命令找不到了，怎么办？"><a href="#CentOS-7中ifconfig命令找不到了，怎么办？" class="headerlink" title="CentOS 7中ifconfig命令找不到了，怎么办？"></a>CentOS 7中ifconfig命令找不到了，怎么办？</h3><ol><li>首先我们在终端中输入：ifconfig，如果输入“bash: ifconfig: 未找到命令”，表示该系统中没有该命令，那么我们就需要安装它。</li></ol><p>输入：yum install ifconfig，会发现输出了如下错误信息：</p><p>没有可用软件包 ifconfig。</p><p>错误：无须任何处理<br>2. 通过命令：yum search ifconfig，来搜索可用或者匹配的安装包程序。会输入如下信息：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vim">已加载插件：fastestmirror<br><br>Loading mirror speeds from cached hostfile<br><br> * base: mirrors.tuna.tsinghua.edu.<span class="hljs-keyword">cn</span><br><br> * extra<span class="hljs-variable">s:</span> mirrors.tuna.tsinghua.edu.<span class="hljs-keyword">cn</span><br><br> * <span class="hljs-keyword">update</span><span class="hljs-variable">s:</span> mirrors.tuna.tsinghua.edu.<span class="hljs-keyword">cn</span><br><br>=================================================================== 匹配：ifconfig ====================================================================<br><br>net-tools.x86_64 : Basic networking tools<br></code></pre></td></tr></table></figure><ol start="3"><li>上面的搜索结果匹配ifconfig的安装包是net-tools.x86_64，这时，可以通过：yum install -y net-tools.x86_64命令来安装ifconfig命令组件了。  </li><li>到此我们安装成功  </li></ol><h2 id="Java-与线程"><a href="#Java-与线程" class="headerlink" title="Java 与线程"></a>Java 与线程</h2>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>图书列表整理</title>
    <link href="/2021/01/07/2020-03-16-books/"/>
    <url>/2021/01/07/2020-03-16-books/</url>
    
    <content type="html"><![CDATA[<h2 id="列表（理论上大部分按出版时间排序）"><a href="#列表（理论上大部分按出版时间排序）" class="headerlink" title="列表（理论上大部分按出版时间排序）"></a>列表（理论上大部分按出版时间排序）</h2><p>占卜师<br>神圣家族<br>莎士比亚的零<br>如何运营成功的智库<br>侯大利刑侦笔记<br>重构：门店新零售创业工作法<br>赞扬与责备<br>无常的博弈<br>甜甜圈经济学<br>厉害的人，从来不靠情绪表达自己<br>日本人眼中的中國<br>巨龍的胎動<br>讲谈社·中国的历史<br>在路上（2020全新译本！ 杨蔚译）<br>英帝国史套书（全8卷）<br>发现你的管理优势<br>从零开始做运营<br>从零开始做运营2<br>柏青哥<br>《三体》中的物理学<br>史学与红学<br>让写作成为自我精进的武器<br>区块链金融时代<br>博弈：所有问题都是一场赛局<br>2019中国短篇小说年选<br>征服<br>算计<br>羔羊的盛宴<br>美顺与长生<br>房地产与中国经济<br>吃：食物如何改变我们人类和全球历史<br>悠扬的素数<br>日本如何转型创新<br>女性觉醒三部曲【《82年生的金智英》、《房思琪的初恋乐园》、《坡道上的家》】<br>精明投资者的满分课（5册套装）<br>浮世恒河<br>优秀人才要什么，你懂吗<br>天才主厨的绝对温度——“hajime”米田肇的故事<br>启真馆·西方传记经典<br>链之以法 (独角兽法学精品)<br>大国出行：汽车里的城市战争<br>尊重自己：给予与接收的心灵艺术<br>致命流感：百年治疗史<br>我的原野盛宴<br>律政雄心<br>分身：新日本论<br>低智商犯罪<br>双性人巴尔班 (思想剧场)<br>数字思维<br>论好运<br>简明哲学逻辑思维读本(套装共5册)(直抵哲学的本质)<br>从偶然到必然<br>早起的奇迹<br>黑色印记<br>帝国陷阱（美国政府如何保护海外商业利益）<br>创新者的世界：从麻瓜到王者<br>超图解中国哲学简史<br>超图解西方哲学简史<br>整合决策<br>我们内心的“坏东西”<br>韦伯作品集：经济与社会 新版（全二卷）<br>所罗门的伪证（全三册<em>新增番外）<br>奥威尔战时文集<br>一学就会的经济学<br>时间观<br>晚清史研究大家茅海建作品集（套装共5册）<br>领导力陷阱<br>教育的本质<br>钢琴的重量<br>商业模式2.0图鉴<br>荣国府的经济账<br>美国病<br>华为团队工作法<br>单读23：破碎之家·法国文学特辑<br>爱上收纳：井井有条又热气腾腾的家<br>我要：喊停人生一小时！<br>人类向何处去<br>马丁·瓦尔泽现实主义作品选集（套装5册）<br>货币、权力与人<br>共情沟通<br>不属于我们的世纪<br>中东史（上、中、下 套装共3册）透析中东千年历史，解读中东当前困局！<br>完美人设<br>时间的质量<br>高情商沟通法则<br>20世纪分析哲学史（全两册）<br>最糟也最棒的书店<br>自我的本质<br>专注力：心流的惊人力量<br>中央星站<br>中国政治常识<br>中国问题<br>智能化战争<br>植物知道地球的奥秘<br>职业通道：人生规划与事业进阶指南<br>直击本质<br>政治秩序的起源：从前人类时代到法国大革命<br>正直<br>这一生为何而来：海灵格自传·访谈录<br>蟑螂<br>增长的动力<br>云球（1-3册）<br>原罪、梦想与霸权<br>与人类学家同行<br>有趣的灵魂要让老板看到：如何从小职员快速进阶<br>勇敢的人死于伤心<br>硬核晋升<br>应对丛书·国际关系与格局（套装共8册，论大战略、论中国、世界秩序、亚洲世纪、超级版图、世界政治的终极目标、看世界、币缘论）<br>隐身大师<br>隐藏的自我<br>溢出：中国制造未来史<br>伊格曼自我进化系列（全四册）（大脑的故事_死亡的故事_飞奔的物种_隐藏的自我）<br>一个人办不到<br>一瓣河川<br>巡山报告·基因编辑婴儿<br>血与火：坦格利安王朝史（第一卷）<br>行动、知识与意志<br>新药的故事<br>新世界（全四册）<br>写真学生<br>小行星掉在下午<br>想象一朵未来的玫瑰<br>西方通史（第一卷）：从古代源头到20世纪（全3册）<br>西方通史（第2卷）：世界大战的时代（1914～1945）（全3册）<br>西方的困局：欧洲与美国的当下危机<br>我在太空的一年<br>我四十分钟后到家<br>我们之间的距离<br>我们都曾受过伤，却有了更好的人生：如何从童年创伤中复原？<br>我的不朽已然足够：塔可夫斯基图文集<br>文明及其不满<br>未来科技通史<br>伟大的海：地中海人类史（全2册）<br>唯有孤独恒常如新<br>网红养成记<br>万物简史<br>万物的历程<br>兔子洞女孩<br>图形思考：一张图展现你的逻辑思考力<br>透明社会<br>俗世奇人全本<br>死亡清扫日记<br>思维故事：掌控人生剧本<br>双鸟渡<br>尸检报告：一个殡葬师的手记<br>圣天秤星<br>生活万岁<br>身体真相：科学、历史和文化如何推动我们痴迷体重<br>烧火工<br>尚待商榷的爱情<br>商业的本质和互联网<br>沙德维尔的暗影<br>色彩的秘密生活<br>三体秘密<br>瑞幸闪电战<br>入侵（房龙唯一一部政治幻想小说）<br>如何识别人生陷阱<br>日本世相系列（套装共2册）：妻子们的思秋期_饱食穷民<br>日本科技150年<br>日本短诗套装（共5册）<br>认知：人行为背后的思维与智能<br>仁慈的关系<br>人工智能关我什么事<br>全球化逆潮<br>情感心理学（一本剖析爱情心理的情感教科书，让你重新认识两性世界）<br>轻断食：完美瘦身的肠道革命<br>企鹅经典：小黑书·第三辑<br>七个平行世界的我<br>七个会议<br>朴赞郁的蒙太奇<br>拍照与赏析：经典纪实摄影的观看之道（套装六册）<br>偶尔也需要强烈的孤独<br>脑力赋能<br>脑洞大开的哲学简史<br>难民革命<br>魔术江湖2<br>魔术江湖<br>迷人的误解<br>猫的桌子<br>麦迪逊大道之王：大卫·奥格威传<br>迈向财富自由之路<br>罗密欧或朱丽叶<br>零浪费生活<br>理想国译丛系列套装32册<br>015 古拉格之恋：一个爱情与求生的真实故事<br>008 耳语者：斯大林时代苏联的私人生活<br>007 苏联的最后一天：莫斯科，1991年12月25日<br>蓝白时间<br>快乐的陷阱：40个让你痛苦和停滞不前的行为模式<br>口才三绝_开口就能说重点_幽默表达力_逻辑表达力(套装3册)<br>克莱因壶<br>看得懂的金融投资课<br>久坐不伤身<br>经营最重要的事<br>金岳霖哲学三书（函套共4册）<br>金色夜叉<br>讲谈社·兴亡的世界史（全九卷）<br>基列三部曲<br>活了很久的智慧<br>华为灰度管理法<br>华杉讲透《资治通鉴》2<br>后真相时代<br>黑暗物质三部曲<br>好的婚姻，要守护财产和爱<br>硅谷搅局者<br>光荣时代–新中国第一代人民公安的故事<br>官绅的荷包<br>怪奇事物所<br>孤独的池塘<br>共有的习惯：18世纪英国的平民文化<br>宫本武藏全传(套装共5册)<br>公园生活<br>工具，还是武器<br>跟大师学国学系列第一辑（套装共7册）<br>个体突围：真正的高手，都有破局思维<br>告白<br>福尔摩斯探案全集（2019全新译本<br>风雨琳琅：林徽因和她的时代<br>丰田传<br>梵高手稿（典藏修订版）<br>犯罪心理学<br>法国思想史：追寻法兰西四百年（套装共3册）<br>读书与行走<br>动物王朝<br>电影意志<br>道德经说什么2<br>大熊市启示录：百年金融史中的超级恐慌与机会（原书第4版）<br>大美中国·中国古代审美文化史<br>大局观：真实世界中的经济学思维<br>大道和小道<br>村上春树和我<br>从零开始玩转抖音<br>从考古发现中国<br>创造知识的企业：领先企业持续创新的动力<br>灿若黎明<br>表演者言<br>镖人5-8<br>闭环思维<br>笨故事集<br>被统治的艺术<br>被看见的力量：快手是什么<br>暴力拓扑学<br>白先勇“白与红”红楼梦系列两种（白先勇细说红楼梦_正本清源说红楼）<br>巴菲特的护城河（新版）<br>爱因斯坦与相对论（套装共5册）<br>爱是什么<br>埃郡往事<br>J-霍华德·雅各布森<br>血疫_埃博拉的故事 (译文纪实)<br>病毒星球<br>病毒来袭 (财富汇)<br>5000年文明启示录<br>11字谜案<br>作家榜经典：春潮<br>作家榜经典：初恋<br>醉鲨<br>走进高敏感人群的内心世界（套装4册 原生家庭、内向高敏者、内向心理学、性格拼图）<br>自指引擎<br>追逐新月的人<br>装腔指南<br>轴心时代：人类伟大思想传统的开端<br>中国优势<br>中国为什么有前途<br>中国唐宋时期的战争<br>中国经济2020(每年必读经济书目，全面预测2020经济趋势)<br>直到贝壳消失<br>真实科比（全球唯一官方授权）<br>战国：七雄博弈<br>增长智商：有效构建企业未来的十大路径<br>增长思维<br>遇见天堂鸟<br>有限责任家庭<br>有人必须死<br>尤利西斯”三部曲（套装共3册）<br>影响力思维：破解影响力四大面向，精准提升影响力思维<br>一座城堡到另一座城堡<br>寻找邓巴(卷福口碑剧《梅尔罗斯》原著作者重构莎翁经典,上演现代版_李尔王</em>;大人们砸毁视线内的一切,永远是孩子拾起碎片) (未读·文艺家)<br>学习天性<br>学会如何学习<br>邂逅秦始皇<br>小镇美国<br>西方文明大历史<br>物理学的进化<br>无言的宇宙：隐藏在24个数学公式背后的故事<br>巫医、动物与我：怪诞且美妙的非洲之旅（自由大地丛书）<br>我一直想要告诉你的事<br>我们盗走星座的理由<br>我的隐藏人生<br>我的故事：增订版<br>文艺复兴人<br>未来十五年<br>未来人不存在<br>维基法则：互联世界的新解决方案<br>通用财务思维：人人都成财务高手<br>通往宇宙之门<br>太阳与少女<br>丝绸之路与唐帝国<br>丝绸之路的世界<br>水母不会冻结<br>双子杀手<br>数字人类<br>数学思维<br>市场的逻辑<br>世纪的哭泣：艾滋病的故事 (译文纪实)<br>食物的逆袭<br>狮子吃素的那一天：如何搞定强势的人<br>诗人十四个<br>失落的猴神之城<br>失败笔记本<br>生命的层级 (巴恩斯作品)<br>生命伴侣<br>深度说服：超级辩手四堂思辨表达课<br>深奥的简洁<br>萨拉戈萨手稿<br>如何养成好习惯<br>如何让别人听你的<br>认识美国<em>深刻剖析当下美国政坛（套装共3册）<br>认生的人：如何克服社交焦虑<br>人的全景：弹簧人、思维体操与进步<br>让时间陪你慢慢变富<br>去屠宰场谈恋爱好吗<br>请停止无效沟通<br>亲密陷阱：爱、欲望与平衡艺术<br>亲爱的伯德太太<br>潜水艇<br>钱从哪里来<br>企鹅经典：小黑书·第一辑<br>企鹅经典：小黑书·第二辑<br>企鹅经典：小彩虹（第一辑）<br>企鹅的忧郁<br>破碎海岸<br>破产的文明<br>坡道上的家<br>品牌赋能：打造超级爆品的9大逻辑<br>潘神的迷宫<br>逆说美国的民主<br>你可以帮我挠挠背吗？<br>你的幸福曲线<br>你的孩子不是你的孩子<br>你的奥尔加<br>明智转向<br>明朝简史：一书读透大明三百年，揭示帝国由盛转衰的秘密<br>秘境：探寻全球仙境、废墟与乌托邦<br>美的救赎<br>马背上的朝廷 (海外中国研究)<br>珞珈筑记<br>逻辑表达：高效沟通的金字塔思维<br>伦敦人<br>路内·追随三部曲<br>陆蓉-行为金融学<br>良性增长：盈利性增长的底层逻辑 (拉姆·查兰管理经典)<br>厉以宁经济史文集套装<br>历史的隐秘角落<br>鲤·我去二〇〇〇年<br>老鼠、虱子和历史：一部全新的人类命运史<br>蓝玫瑰不会安眠<br>来一碗，超满足！<br>蝲蛄吟唱的地方<br>恐惧：推动全球运转的隐藏力量<br>精准努力：刘媛媛的逆袭课<br>进击的铁骑：大清开国的历史瞬间<br>寂寞公路<br>机器人占位<br>火光之色<br>彗星年代 _ 1918，世界重启时<br>幻想故事集<br>欢迎来到敌托邦<br>华与华百万大奖赛案例集<br>华文全球史—全面了解美国系列（套装共4册）<br>黑暗中飘香的谎言<br>好望角书系（套装共5册）<br>好吃的悲伤：怎样靠自己战胜抑郁症？<br>好兵帅克<br>撼动世界史的植物<br>汗青堂系列精选集（套装共19册）<br>海明威与骗子工厂<br>哈佛社交礼仪课（畅销3版）<br>过得刚好<br>国家兴衰：10大核心原则，看懂未来全球经济格局与中国的前景<br>广场与高塔<br>高财商：轻松实现财务自由的思考力和行动力<br>副业赚钱之道 从0到1打造多元化收入<br>风靡世界的科普系列01（套装共5册）<br>法兰西双皇后：一部重现欧洲时代演变的传奇巨著<br>断舍离（全3册）（畅销400万册“断舍离”书系新作，物品减少，家事自然会减少。）<br>渡边淳一经典品读系列<br>读客经典文库：在路上<br>毒品史：美国和墨西哥的百年恩怨 (历史学堂)<br>调情学<br>帝国：俄罗斯五十年<br>底层逻辑【半秒钟看透问题本质】<br>低地<br>到婚礼去<br>单读. 十周年特辑（时间的移民_在世界的门外）共2册<br>大图景：论生命的起源、意义和宇宙本身<br>大唐探案录之长安风云<br>大师巨匠<br>大人物的世界史<br>大脑训练手册<br>打造超级网红<br>从工业化到城市化：未来30年经济增长的可行路径<br>创造知识的实践<br>创造人生的伙伴<br>成为主角<br>成吉思汗：比武力更强大的是凝聚力<br>超级营销必修课（套装全8册）<br>玻璃鸟不会归来<br>病毒来袭 (财富汇)<br>镖人9<br>变量2<br>被忽视的孩子：如何克服童年的情感忽视<br>北海怪兽<br>摆脱共情<br>巴拉巴西成功定律<br>暗理性：如何掌控情绪<br>爱的24则运算<br>v.s.奈保尔：毕司沃斯先生的房子<br>5g时代：生活方式和商业模式的大变革<br>2020：用数据看懂中国发展（经济蓝皮书<em>社会蓝皮书）<br>最简单的图形与最复杂的信息：如何有效建立你的视觉思维<br>最初之前<br>自由的流亡者：永失美国与大英帝国的东山再起（全2册）<br>追寻记忆的痕迹<br>抓重点：如何从无效到高效<br>祝你快乐勇敢<br>中央帝国的军事密码：我们反对战争，但又必须了解战争<br>中国“轻一代”女性的心灵图谱<br>中东历史与现状二十讲<br>智商税：如何避免信息焦虑时代的智商陷阱<br>智能机器如何思考（深度神经网络的秘密）<br>智慧大脑：高水平思考的大脑认知训练<br>只有大众，没有文化<br>职场女性气质修炼圣经（共8册）<br>直到找到你<br>知识炼金术：知识萃取和运营的艺术与实务<br>政治哲学<br>征服与革命中的阿拉伯人：1516年至今<br>这就是中国：走向世界的中国力量<br>张岪与木心<br>增长危机(世界经济面临的逆风加剧，如何走出经济增长的迷雾)<br>在别人的句子里<br>再见了，伊藤君<br>雨夜短文<br>宇宙的规则<br>勇敢而非完美<br>影响力变现：你不必讨好所有人<br>赢家法则_实现财务自由的30个基本<br>英国下层阶级的愤怒<br>隐秘战争（华为任正非案头c位书《美国陷阱》深度解读版，阿尔斯通、西门子、汇丰银行等更多案例分解长臂管辖）<br>因为性别：改变美国女性职场环境的十个案件<br>异乡记<br>异类心理学：40个改变认知的疯狂思想实验<br>以上帝和恺撒之名<br>遗恨<br>一个天文学家的夜空漫游指南<br>一禅小和尚<br>新核心素养系列（共八册）<br>写给大家的ai极简史：从图灵测试到智能物联<br>小说稗类<br>小人物_我和父亲乔布斯<br>像ted一样演讲2：沟通升级<br>夏日永别<br>细节的力量：51件你必须知道的职场小事<br>希望之地<br>翁达杰作品系列：世代相传<br>文字的力量<br>文本阐释的内与外<br>温莎王朝：帝国巅峰与至暗时刻<br>未来战争：科技与全球新型冲突<br>未来：人类的征途<br>为什么是毛泽东<br>万国来朝<br>跳槽圣经<br>天才为何成群地来 (启微)<br>所谓学习好，就是方法好<br>送行<br>水形物语<br>誓言：白宫与最高法院<br>释梦人生<br>十部小说及其作者<br>尸人庄谜案<br>盛世：西汉<br>盛世：康乾<br>圣彼得堡：三百年的致命欲望<br>生活需要自律力<br>神圣的存在：比较宗教的范型<br>深挖美国陷阱（套装共5册）<br>上帝的茶话会<br>熵减：华为活力之源<br>善哉善哉，就你话多<br>闪电式扩张<br>赛雷三分钟漫画世界史<br>塞纳河畔的一把椅子 _ 法兰西四百年<br>如果，哥白尼错了<br>日之东·月之西：北欧故事集<br>日本人为何选择了战争<br>日本人的画像<br>人行世界：异人行<br>人类的未来<br>人口浪潮：人口变迁如何塑造现代世界<br>人工智能与商业机遇（套装共6册）（数字化和人工智能的时代，商业资本的运营法则正在发生巧妙的变化）<br>让你在公司显得很能干的52种方法（获取如何取得成功的秘诀）<br>权力的教训<br>全球不平等<br>全民疯狂的欧洲<br>全民发呆的澳洲：其实是一本全面的澳大利亚文化观察笔记<br>请勿离开车祸现场<br>气候改变世界<br>气场哪里来<br>企鹅欧洲史：古代中世纪卷_近现代史卷（套装共7册）<br>苹果木桌子及其他简记<br>啤酒原来是这么回事儿<br>叛逆的思想家<br>扭曲的铰链<br>你听懂了没有<br>能力升级<br>南京传（读懂南京，就是读懂中国历史）<br>谋杀之心（读客熊猫君出品。一场复杂的案中案，六种不同的谋杀动机，十三位各怀鬼胎的嫌疑人。这一次，连名侦探都失手了！）<br>名誉（书写女性命运世世代代的传承）<br>美哉汉字<br>美国革命的激进主义<br>每天演好一个情绪稳定的成年人<br>贸易的冲突：美国贸易政策200年<br>漫长的战败：日本的文化创伤、记忆与认同<br>买房可以很简单：给普通人的一堂极简买房课<br>罗马的命运：气候、疾病和帝国的终结<br>六朝文学史<br>流媒体时代<br>刘慈欣三大长篇代表作<br>李银河说爱情<br>浪潮之巅第4版<br>空荡荡的地球：全球人口下降的冲击<br>科学的广告<br>科幻经典回家系列全集<br>看不见的客人<br>崛起的超级智能<br>觉知的爱：看见孩子的内在需求<br>绝对坦率：一种新的管理哲学<br>倦怠社会<br>解谜茑屋：做未来生活的实验场<br>结构是什么？<br>尖峰对话区块链<br>基因与命运<br>鸡尾酒原来是这么回事儿<br>皇帝魂<br>荒潮<br>滑动解锁：解锁技术基因 揭秘数字世界<br>华杉讲透《资治通鉴》<br>互联网四大<br>好文案会说话：来自顶级文案人的思考和表达强化（前日本电通金牌文案人教你用文案解锁行动）<br>海明威诞辰120周年图文珍藏版文集<br>哈里·戈贝尔事件的真相：全两册（在欧洲将丹·布朗挤下畅销榜首的奇迹之书。一个人究竟要隐藏多少秘密，才能巧妙度过一生？一本书中书！ ）<br>国家的视角<br>孤鹰（全2册）<br>公司与将军：荷兰人与德川时代日本的相遇<br>给未来人类的终极12问<br>格局<br>高效忍者<br>冈底斯的诱惑<br>副业赚钱<br>佛兰德镜子<br>风险投资的逻辑与常识（通往财富创造之路的实用指南）<br>反常识<br>反本能生存学<br>法国大革命<br>发明小说的人<br>独异性社会：现代的结构转型<br>动手学深度学习<br>定义邪典电影 (电影学堂)<br>颠覆式学习<br>第三道门（成功人士在事业起步阶段都在走“第三道门”）<br>地球的新生<br>地理的时空<br>敌人的名字是宫本武藏<br>德国：一个国家的记忆<br>道德哲学<br>单身时代：五年探寻之旅，还原中国剩女时代的真实面貌<br>戴建业作品集<br>戴建业精读世说新语<br>戴建业精读老子<br>大转折时代：美国报纸覆盖下的五十年<br>大梦无疆：勇气、想象和现代以色列的建立<br>大汉荣耀：帝国建立与政权巩固<br>大汉荣耀（套装共2册）<br>此后再无余生<br>春风十里<br>创新简史：打开人类进步的黑匣子<br>成为我自己：欧文·亚隆回忆录<br>超脑思维：趣味数学游戏从入门到精通<br>超级个体：打造你的多维竞争力<br>超级标签：重塑用户心智的传播之道<br>超凡：我们的身心极致及天赋的科学（理想国出品）<br>不可思议的生命<br>便便来了 你的肠子在说啥？<br>本店招牌菜<br>半小时漫画经济学：生活常识篇<br>坂口安吾系列作品（不读坂口安吾，就无法理解现代日本）（套装4册）<br>拜占庭帝国史<br>爱、金钱和孩子：育儿经济学<br>艾拉医生的神奇疗法<br>《纽约时报》是怎么做新闻的<br>facebook诞生记<br>ai赋能：ai重新定义产品经理<br>82年生的金智英<br>5g+：5g如何改变社会<br>26城记<br>21世纪的定位：定位之父重新定义“定位” (定位经典丛书)<br>12个我<br>作家榜经典：忍不住的新努力<br>作家榜经典：胡适19堂文学课<br>最后的访谈系列（套装共6册）（<br>最好的亲密关系<br>祖先的故事<br>自由的文化：古希腊与欧洲的起源<br>主角<br>主妇、舞者与牧师：七国女性纪实故事<br>周金涛理论大集<br>终身创造力<br>终身成长行动指南<br>智能城市<br>纸间悦动丛书·1848：革命之年<br>真正的接纳，就是爱上不完美的自己：点击量破千万的内在成长课！<br>真名实姓（人生必读科幻大师弗诺·文奇，刘慈欣盛赞”完美“的科幻经典） (未读·文艺家)<br>哲学的指引<br>哲学的迷途<br>哲学的底色：人类永恒追求的六大哲学主题<br>找寻真实的蒋介石：蒋介石日记解读（1、2套装<br>掌控分寸<br>月光森林（中国原创推理小说的破局之作，比肩东野圭吾！一部痛彻心扉的心灵推理小说！）<br>原宿牛仔：日本街头时尚五十年<br>园丁与木匠<br>与内心的冲突和解<br>娱乐何为<br>用得上的心理学<br>应物兄：全2册<br>一起连环绑架案的新闻<br>一本书就是一个喷嚏：202部伟大作品如何诞生？<br>亚洲世纪：世界即将亚洲化<br>雅典的胜利：文明的奠基<br>新城市危机：不平等与正在消失的中产阶级<br>写作提高一点点<br>小逻辑：让选择变简单的方法<br>闲散的哲学<br>希特勒的试毒者（2018年意大利坎皮耶罗文学奖获奖作品）<br>无穷小：一个危险的数学理论如何塑造了现代世界<br>无处不在<br>我们与祖先交谈的夜晚<br>我们脑中那些挥之不去的问题<br>我不想将就过一生：女性ceo成长修炼<br>我爱迪克（一本艾玛·包法利自己写的《包法利夫人》）<br>文学履途：漫游在伟大故事诞生之地<br>未来学校：重新定义教育<br>未解的宇宙<br>伟大的虚构<br>为什么精英都是动机控<br>网内人<br>唐朝与东亚<br>太阳系度假指南<br>锁脑：如何瞬间、深度、持久地影响他人<br>思维的囚徒<br>思考的艺术（原书第11版）<br>说出来你可能不信<br>数据思维：让大脑更清醒<br>世界史的故事·从文明诞生到罗马帝国崛起（套装共2册）<br>世界简史<br>世界边缘的秘密：科学对生命的惊人回答<br>实用性思考的艺术<br>时间的秩序<br>十五条狗<br>盛开的樱花林下<br>神秘到开放：一段理解现代中国的旅程<br>神秘博士：12位博士，12个故事<br>神话时代：诸神的诞生<br>社群的进化<br>设计现实<br>上帝掷骰子吗？：量子物理史话：升级版<br>商业产品经理：腾讯教我的产品工作思维<br>如何做一场精彩的演讲<br>如何正确吵架<br>如何创建天才团队<br>认知力<br>人性中的善与恶<br>人生护城河：如何建立自己真正的优势<br>人类网络：社会位置决定命运<br>人类起源的故事<br>人口浪潮：人口变迁如何塑造现代世界<br>人，做得到任何事：阿德勒心理学讲义 (领读经典)<br>权力结构与文化认同<br>去洞庭<br>亲历滇缅公路（套装共4本）（<br>亲爱的安吉维拉<br>牵风记<br>企鹅都市生存指南（套装全9册）<br>佩恩先生<br>欧罗巴一千年：打破世界边界的历史<br>女生呵护指南<br>柠檬<br>内向思考<br>美国式谋杀<br>贸易打造的世界<br>慢慢变富<br>留白：秋水堂文化随笔<br>刘彦斌的理财之道（写给年轻人的理财规划书，让你看得懂，用得上）<br>领导力行为学：基于神经科学的领导力前沿研究成果<br>领导力精进：成就极致领导力的21个管理细节<br>零压人生：瞬间化解焦虑、烦躁的高效压力管理术！<br>猎药师：发现新药的人<br>猎人<br>聊天记录<br>历史无间道<br>苦难英雄任正非<br>科技之巅3<br>科技与和平：科技创新如何促进人类信任与互联<br>看完就用的思维导图<br>绝密原则套装（共3册<br>绝地谈判<br>精彩绝伦的大英帝国兴衰史（套装共2册）<br>金犀牛：中世纪非洲史<br>角斗士、海盗与信任博弈<br>焦虑型人格自救手册<br>焦虑星球笔记<br>焦渴<br>简斯维尔：一个美国故事<br>简读中国史：世界史坐标下的中国<br>极简量子力学<br>混乱的猴子<br>回不去的旅人<br>皇位之争：奥朗则布和他的时代ⅰ（全2册<br>皇宫日落：平成退位与天皇家秘辛（全2册）【<br>华为管理哲学：人性管理与科学管理的博弈<br>黑羊与灰鹰<br>好的焦虑<br>哈佛大学经典课程分享（套装9册）<br>硅谷创业课<br>管理是个技术活<br>谷歌方法<br>共情的力量：情商高的人，如何抚慰受伤的灵魂<br>工作漂流 (译文纪实)<br>鸽子隧道<br>赶路人<br>服务设计驱动的革命：引发用户追随的秘密<br>枫丹白露宫：法国千年史<br>粉笔人<br>菲利普·科特勒传：世界皆营销 (科特勒新营销系列)<br>返朴<br>发条橙<br>二战爆发前十天<br>端到端流程：为客户创造真正的价值<br>动物思维<br>掉队的拉美<br>第二曲线创新<br>帝国边缘：英国在东方的征服与收藏：1750-1850年（全２册）<br>地球无应答<br>稻盛和夫的人生哲学<br>道德经说什么<br>弹性<br>大潜能<br>大历史与人类的未来：修订版<br>大开眼界的科学知识：10个颠覆常识的科学解答<br>大家小书：大中国古典·诗词集萃（共16册）千万册销量，你的常备诗词宝典！<br>大河深处<br>打开哲学家的正确方式<br>从祖先到算法：加速进化的人类文化<br>出众，从改变习惯开始<br>出身：不平等的选拔与精英的自我复制<br>超越你的大脑：控制情绪、优化决策、增进关系、激发团队<br>超级潜能<br>超纲冷知识（用好奇心给生活加点料 ）<br>草与禾：中华文明4000年融合史<br>不识字的人<br>不分心<br>菠萝解密癌症（最全系列！套装共4册）（一套救命的科普书，带你了解前沿治疗方案和康复期注意事项定能让你消除恐慌，燃起希望！2015中国好书获奖图书 第十一届文津图书奖获奖图书）_nodrm<br>被弃养的女孩<br>被夺走了时间的蚂蚁 (文学与生活丛书)<br>北上<br>北海鲸梦<br>暴政：掌控關鍵年代的獨裁風潮，洞悉時代之惡的20堂課<br>巴黎评论：作家访谈（套装共 5 册，作家访谈 1~4 _ 短篇小说课堂）<br>安吾人生谈<br>醉酒简史<br>自由的声音：大革命后的法国知识分子<br>自信的力量<br>姿势跑法<br>重逢<br>中画史鉴：欧洲史系列（共5册）<br>中国往事1905-1949：套装共四册<br>中国神话故事集(神话学家朱大可精心选篇统稿，50篇经典神话故事全新撰写)<br>中国群星闪耀时：时代风云中大文人的命运流转<br>中国经济增长的真实逻辑<br>至暗时刻：力挽狂澜的丘吉尔<br>正义从哪里来<br>掌控习惯<br>战时灯火（读客熊猫君出品。诺贝尔奖得主石黑一雄熟读到可以背出来的书！布克奖50周年大奖“金布克奖”得主翁达杰！）<br>造就帝国：恺撒、奥古斯都与罗马帝国的诞生（甲骨文系列）最完整、最权威的传记 (甲骨文丛书)<br>岳南作品集：一代大师们的经典重现（共6册）(历史纪实文学大家岳南披沥数载心血巨著，莫言领衔，梁文道等数位名家联袂推荐！)_nodrm<br>预知梦<br>玉森画廊的客人<br>有见识的姑娘，活得更高级<br>犹太文明（从文明承担者视角，重构犹太历史的经典文本。）<br>幽微的人性<br>勇气<br>隐形攻击：如何避免成为情感暴力的受害者<br>引爆流行<br>银的故事：白色金属如何塑造美国和现代世界<br>异议的力量<br>一神论的影子：哲学家与人类学家的通信<br>一日之计：精英们的清晨日课<br>学会吃饭<br>熊镇2<br>性格的陷阱：如何修补童年形成的性格缺陷<br>星空故事：88站夜空漫游指南<br>新教伦理与资本主义精神<br>芯”想事成：中国芯片产业的博弈与突围<br>小文65<br>小说的八百万种写法<br>消失的艺术（《似是都柏林》《巴托比症候群》《便携式文学简史》作者，诺贝尔文学奖大热人选）<br>夏日郊外的旅店<br>下一次将是烈火<br>无论如何都想告诉你的世界史<br>我喜欢人生快活的样子（“我们的师傅”蔡澜，至诚分享洒脱自在的活法）<br>我们为什么会说脏话？（了解爆粗口的神奇趣味科学，看说脏话如何在情感和身体上影响我们。）<br>为什么需要生物学思维<br>为什么不平等至关重要（哈佛哲学教授，教我们如何对抗996，应对不平等）<br>为什么（图灵奖获得者、互联网之父集大成之作）<br>为何，以及如何谋划一场火灾<br>为孩子重塑教育：更有可能成功的路<br>图形思考与表达的20堂课<br>通识：学问的门类<br>甜蜜巴士：蜜蜂养大的女孩<br>天真的歌<br>天使之耳：交通警察之夜<br>太阳王与海妖<br>太空旅行指南<br>首席产品官2：从白领到金领 (产品管理与运营系列丛书)<br>十二堂经典科普课<br>圣母病<br>声誉为王：创造信任的联结<br>生活的逻辑：城市日常世界中的民国知识人（1927～1937）<br>山骇谷深<br>沙漏做招牌的疗养院<br>儒学小史<br>如何畅享啤酒<br>人人都该懂的遗传学<br>人人都该懂的心理学<br>人人都该懂的克隆技术<br>人类的算法<br>让顾客都成为回头客：吉野家的经营之道<br>清醒思考的策略<br>轻松奔跑：无伤跑步指南（知乎 肯尼亚玲 作品） (知乎「一小时」系列)<br>奇特的传染：群体情绪是怎样控制我们的<br>你的自律，给你自由<br>能力迁移<br>幕后产品——打造突破式产品思维<br>明斯基时刻：如何应对下一场金融危机<br>蜜蜂之死<br>美国大外交【60周年纪念版，基辛格盛赞！被誉为研究美国外交史的必读之书。看大国间的高手博弈，读懂世界风云变幻】 (甲骨文)<br>每个人的亚里士多德<br>麦肯锡职场训练营：菜鸟晋升职场精英(套装共9册）<br>罗马的崛起：帝国的建立<br>论大战略（每个人都需要大战略思维，掌控全局的能力）<br>六舰：美国海军的诞生与一个国家的起航<br>凉灯：山这边的中国<br>蓝花<br>拉新<br>块数据5.0<br>跨界学习<br>绝对笑喷之弃业医生日志<br>决胜b端：产品经理升级之路<br>精力管理手册<br>金色麦田（中国原创推理小说的破局之作，比肩东野圭吾！一部让百万读者热泪盈眶的推理小说！）<br>解密东欧：苦难与辉煌（套装共4册）<br>教出乐观的孩子：让孩子受用一生的幸福经典（珍藏版） (心教育经典译丛)<br>间谍先生系列(套装共8册)<br>加速成长：从内在修为到外在成长，全方面武装自己（套装共10册）<br>计算社会学<br>火星三部曲 【刘慈欣推崇备至的经典之作！堪称史诗般的巨著！科幻大师阿瑟·克拉克盛赞为有史以来关于火星移民最棒的小说！ 雨果奖、星云奖获奖著作！】（套装共3册）<br>混凝土里的金发女郎<br>回归商业常识<br>皇帝圆舞曲–从启蒙到日落的欧洲<br>何故为敌<br>好好告别<br>硅谷帝国<br>光荣与道路：中国大时代的精英记忆<br>关键提问<br>给世界的答案<br>给年轻人的极简金融课<br>高效人士的问题解决术<br>高效的方法<br>傅雷谈艺录及其他<br>风格的练习（6大核心模块指导，解决着装平庸的苦恼）<br>非虚构写作指南<br>房龙：写给大家的美国简史 _美国史纲<br>法定幸福<br>动物不简单·第1辑：猫头鹰、豹子、猴子、蚂蚁、大象<br>冬将军来的夏天<br>颠覆平庸：如何成为领先的少数人（修订版）<br>蒂姆·库克传<br>第四只手<br>地狱书单<br>地球的回忆<br>地球的呼唤<br>当代华语名家自选集典藏版(套装共18册)<br>大英帝国与第一次世界大战<br>大局观从何而来<br>错觉心理学：从理解错觉到启发创新<br>春秋大义：中国传统语境下的皇权与学术<br>超级符号原理<br>超级标签——重塑用户心智的传播之道<br>产品思维<br>曹雪芹大传（共14册）（只有看懂曹雪芹的故事，才能理解红楼梦的世界！）<br>财富自由<br>布隆夫曼脱单历险记【入围奥斯卡、金球奖影片《大鱼》原著小说作者新作，一次关于自我、恋爱、婚姻以及如何与世界相处的“成长冒险”！】<br>不平等社会：从石器时代到21世纪，人类如何应对不平等<br>不疲惫的精力管理术：40岁，你的人生才刚刚开始<br>汴京之围<br>被左右的独立思维<br>北京女子图鉴<br>百年版图<br>白先勇“白与红”红楼梦系列<br>巴菲特股东大会深度解读（套装共4册）（投资大神深入解读投资规则，看他们如何战胜市场）<br>盎格鲁-撒克逊人简史<br>《墨菲定律》(精装纪念版)<br>5g时代：什么是5g<br>2001：太空漫游<br>17岁，成为星或兽的季节<br>12堂趣味逻辑课<br>10堂极简概率课<br>作家的灵感宝库<br>总统班底 (译文纪实)<br>自然万物科普百科_大自然的社交网络_森林的奇妙旅行(套装共2册)<br>中央帝国<br>中国制造2025 蓝皮书．2018<br>智慧与魔咒：塔勒布的黑天鹅哲学<br>这世界如露水般短暂：小林一茶俳句300<br>掌控关系<br>增长五线：数字化时代的企业增长地图<br>曾国藩全集12册套装 – 中华书局精心打造的一部多侧面、多角度走近曾国藩的皇皇巨著。版本精良、收录全面，宜阅读，宜收藏 (中华书局出品)<br>再见，黑鸟<br>阅读蒙田，是为了生活<br>远离迷茫，从学会赚钱开始<br>有所不为的反叛者：批判、怀疑与想象力<br>有趣又冷门的人类史（套装共7册）<br>犹大之窗<br>营销革命3.0<br>英格兰，英格兰<br>医目了然<br>一片树叶的颤动<br>耶鲁古典欧洲怪诞生活志<br>邀你共进量子早餐<br>盐战完结珍藏版套装（全二册）.<br>学习的升级<br>学术与政治<br>学会写作：自我进阶的高效方法<br>修道院纪事<br>新媒体运营一本通：营销推广_活动策划_文案写作<br>新规则<br>闲话闲说：中国世俗与中国小说（增订版）<br>喜鹊谋杀案<br>西周的灭亡：中国早期国家的地理和政治危机（增订本）<br>西方政治思想的社会史：自由与财产 (西方政治思想译丛)<br>西方政治思想的社会史：公民到领主 (西方政治思想译丛)<br>无霸主的世界经济<br>文字传奇：十一堂法国现代经典文学课<br>文学百年经典（套装三册）<br>文案基本功：9大爆款文案创作技巧<br>温暖治愈的人生故事文学（套装8册）<br>伟大的转型：美国市场一体化和金融的力量<br>晚清最后十八年_从甲午战争到辛亥革命（全集）<br>天生有罪<br>唐史并不如烟(第七部)_帝国斜阳<br>随风飘舞的塑料布<br>死屋：沙皇统治时期的西伯利亚流放制度<br>思想是生活的一种方式<br>说话体现格局，决定结局<br>水刀子<br>数学本来很简单<br>书楼吊堂：炎昼<br>是枝裕和人间三部曲<br>是我想多了吗？<br>世界经典文学名著四师深度解读推荐版（套装七册）<br>时空内爆——互联网商业的本质逻辑<br>诗词里的趣事套装（全4册：唐诗_古诗词_宋词_唐诗宋词）<br>生涯线<br>生命之美：奇异植物的生存智慧<br>深度预测<br>杀人游戏<br>三言二拍典藏版套装<br>三个逻辑学家去酒吧<br>如何有效阅读【风靡全球，youtube千万点击】<br>荣耀<br>认识身体2<br>人生精进三部曲：深度思考_终身学习_内在成长(套装共3册)<br>人类之子<br>人类符号简史<br>全脑演讲：左脑逻辑，右脑情商<br>全怪谈<br>情绪断舍离：清零负能量，激活高效人生的7大关键！<br>情商精进指南：从好口才到很知趣（套装共9册）<br>青年变革者：梁启超(1873～1898)<br>亲爱的，见字如面<br>企鹅欧洲史03·中世纪盛期的欧洲<br>企鹅欧洲史02·罗马帝国的遗产<br>企鹅欧洲史01·古典欧洲的诞生<br>普利策奖获得者赫尔曼·沃克作品集（共9册）<br>潘帕蓝调<br>帕佩撒旦阿莱佩 (翁贝托·埃科作品系列)<br>你希望我成为的一切<br>你的眼界，决定你的全世界<br>命运与狂怒<br>渺小一生（套装上下册）<br>美国家书<br>冒牌人生<br>猫头鹰在黄昏起飞（村上春树访谈集）<br>盲从与叛逆<br>麦肯锡精英高效阅读法<br>麦家作品套装：解密、暗算、风声<br>鲤·时间胶囊（重新定义21世纪文学经典，“匿名作家计划”第二辑）<br>鲤·匿名作家（张悦然主编《鲤》十周年全新改版，文学界“蒙面唱将”新形式）<br>雷马克经典作品合集六册<br>可能性法则<br>科学本来很有趣<br>考工记<br>凯撒战曲：高卢战记_内战记（套装共2册）<br>绝版民国小书馆：10部版本稀见的文史小书<br>剧演的终章<br>韭菜的自我修养（2019）<br>精准投资：管清友的投资思维课<br>精英必修课：清单_excel_方法_时间_高效大脑_专注力（全6册）(找到天赋，不如找对方法！解锁精英必备工作术！)<br>经济与改革：厉以宁文选(套装共4册）<br>今天将会不一样<br>解密希特勒套装两册<br>交错的场景<br>讲给大家的中国历史06：大分裂时代<br>讲给大家的中国历史05：危机与考验<br>间谍先生：豺狼的日子<br>坚定不移<br>季风帝国：印度洋及其入侵者的历史（是时候重新认识印度洋了！一部印度洋版“权力的游戏”，讲述主流历史著作中读不到的印度洋文明史。）<br>极速写作<br>极简通识系列” 6册（极简世界神话_极简哲学史_极简地理学_极简20世纪史_极简天文学_极简数学）<br>华杉讲透历史智慧（读客熊猫君出品，套装全5册<br>互动<br>红色地址簿<br>黑帮·贩毒集团神秘内幕（全五册）<br>好听：如何练就好声音<br>国家是怎样炼成的3<br>观察家精选系列（套装共7册）<br>跟任何人都合得来<br>各朝各代那些事儿<br>高绩效团队：打造强悍竞争力的学习型团队<br>傅雷与傅聪<br>浮世理发馆<br>风险认知：如何精准决策<br>分裂的西方<br>费孝通经典作品四部<br>飞奔的物种<br>反套路<br>东京风格<br>地下：东京地铁沙林毒气事件实录（套装共2册）<br>低增长社会：保护主义与反全球化危机的应对之道<br>低风险创业<br>灯塔血案<br>德国极简史<br>大树小虫<br>打字机上的缪斯<br>茨威格作品集（套装共9册）<br>创世记<br>辫子<br>本能：为什么我们管不住自己？<br>被涂污的鸟<br>爆发式赢单<br>暴力：思无所限 (人文与社会译丛)<br>巴黎评论·短篇小说课堂<br>爱彼迎传<br>癌症·新知；癌症·真相（合辑）<br>“太空漫游”四部曲<br>345薪酬：提升人效跑赢大势<br>1962—1991私人文学史：杜拉斯访谈录<br>1945：大国博弈下的世界秩序新格局<br>100：科幻之书（套装共4册）<br>自愈力的真相<br>自由与毁灭：法国大革命，1789-1799<br>自控力经典套装三册<br>咒语<br>重生三部曲<br>中华史纲<br>中国文化三部曲（套装共3册）<br>中国古代大人物系列：王阳明_曾国藩_刘伯温_成吉思汗_张居正（读客熊猫君出品，翻开大人物的传奇生平，领略中国人的千年智慧。）<br>智能的本质：人工智能与机器人领域的64个大问题<br>智利之夜<br>只想和你好好生活<br>职场第一课（套装共5册）<br>珍妮特·温特森的人生故事套装<br>哲学启蒙系列（套装共5册）<br>掌控小趋势（套装共6册）<br>战争与艺术如何颠覆欧洲史（全5册 甲骨文系列 金雀花 哈布斯堡 美第奇 米开朗琪罗与教皇的天花板 欧亚皇家狩猎史）<br>战胜一切市场的人<br>怎样写故事：小说与剧本创作的6w原则<br>原因与结果的经济学<br>宇宙从何而来<br>游泳回家<br>犹太警察工会（雨果奖星云奖轨迹奖侧面奖）<br>优秀的人都是提问高手<br>用事实说话：透明化沟通的8项原则<br>盐之屋<br>雅贼典藏版（全11册）<br>驯化<br>熊逸说经典作品集<br>熊逸书院(套装共8册)<br>新视角全球简史全4本套装（诺曼人简史_美国独立战争简史_玫瑰战争简史_英国文艺复兴戏剧简史）<br>心智<br>写作课（治愈你的写作“套路综合征”，找回被毁掉的创作欲望！）<br>写给所有人的编程思维<br>协同：如何打造高联动团队<br>小学二年级就能读懂的经济学<br>夏日尽处<br>西班牙：海上霸权成就的第一日不落帝国：1492—1598<br>无人幸免<br>我曾走在崩溃的边缘<br>我愿意学习发抖 (华文世界电影小说奖首奖得主郭爽，去往格林童话的发生地，寻找另一个未曾命名的自己。)<br>我就是风口<br>我的妈妈是精灵(经典升级版，独家新增两篇章)<br>我不是产品经理——移动互联网商业模式下的用户增长<br>晚清危亡录：战争，以鸦片为名<br>特斯拉传：实现不可能<br>太平广记钞（全4册）<br>思维的本质<br>说出来你可能不信<br>双星<br>首席产品官1：从新手到行家 (产品管理与运营系列丛书)<br>守夜<br>是梦<br>事实<br>世界不是平的<br>时震<br>什么是什么<br>十六个汉字里的日本<br>失误：为什么我们总爱犯错？<br>圣经与利剑：英国和巴勒斯坦—从青铜时代到贝尔福宣言<br>生活中的经济学（套装共9册）<br>升维：让你人生出众的另类通道<br>沈从文全传：沈从文的前半生_沈从文的后半生（增订版全二册）<br>深度成长<br>社交媒体简史：从莎草纸到互联网<br>社会与经济：信任、权力与制度<br>闪闪发光的人生（《山茶文具店》续篇！豆瓣高分，日本书店大奖重磅推荐！）<br>山家清供：人间有味是清欢<br>如何提升性格优势：9大维度解析性格的奥秘！<br>如何聊电影<br>如何成为一个抗压的人<br>日月星杀人事件<br>人生学校：阿兰·德波顿的生活哲学课（套装共5册）<br>人人都该懂的人工智能<br>人类简史畅读系列（套装共6册）<br>人机共生 (托马斯·达文波特智能商业五部曲)<br>权力与文化<br>全球科技通史<br>球形的荒野<br>秋灯琐忆<br>秦始皇：创造力一统天下<br>切尔诺贝利的祭祷<br>奇想博物志<br>鸟类的天赋<br>你有你的计划 世界另有计划<br>你的情商，决定你的人生高度<br>能力陷阱<br>脑洞经济学_人人都要有的经济学思维(超接地气的经济学入门书)<br>内心的重建<br>魔鬼与福尔摩斯：关于谋杀、疯狂与执念的故事<br>明治：含苞待放的新时代、新女性<br>蜜蜂的民主：群体如何做出决策<br>梦幻之地：从梦想到狂想，美国精神五百年<br>美国陷阱<br>媒介批评三部曲：娱乐至死_童年的消逝_技术垄断（套装共3册<br>没有终点的列车<br>盲点：为什么我们易被偏见左右？<br>迈尔斯教授讲世界历史（全6册） (谁掌控文明的密码，谁便是世界的领导者——史学家何炳松、周谷城，文学家矛盾力荐史学经典！)<br>论证是一门学问<br>寥寥中年事<br>历史的叙述方式<br>理解媒介：论人的延伸<br>孔子大历史<br>肯·福莱特悬疑经典系列（15本全收录）<br>科塔萨尔：有人在周围走动<br>科幻巨头三部曲(套装共3册)<br>恺撒：巨人的一生(甲骨文丛书)<br>卡洛·罗韦利 极简物理系列（全三册）<br>九型人格·珍藏版<br>精进2：解锁万物的心智进化法<br>进化：顶级企业家自述40年成长心法<br>今日的艺术<br>解放你的大脑<br>节日之书：余世存说中国传统节日<br>鉴古晓今更渊博（套装共4册）<br>见识城邦·黑暗大陆：20世纪的欧洲<br>价值投资理财大师系列（套装共四册）<br>家族、土地与祖先<br>急救，比医生快一步<br>极简天文学<br>积极思考：摆脱负能量，拥抱新自我<br>欢迎来到你的世界：建筑如何塑造我们的情感、认知和幸福<br>好好说话第一步：学会倾听<br>海明威作品精选系列<br>过程决定成败<br>关河五十州讲史系列（套装共十四册）<br>瓜分波兰_不理性共谋、地缘争霸、欧洲革命与民族消亡<br>高效决策法系列：原则_对赌_富人思维_思维的发现_助推（套装共5册）<br>改革开放以来的中国经济：1978—2018<br>复旦名师陈果：好的孤独_好的爱情（套装共2册）<br>房奴<br>额田女王（日本文坛巨匠、芥川奖得主井上靖长篇代表作）<br>对话最强大脑：精英眼中的未来世界<br>断裂的阶梯<br>动物城邦系列（共四册）<br>第五项修炼（套装共5册）<br>德意志公敌：第二次世界大战时期的纳粹宣传与大屠杀<br>当代学术棱镜译丛_色情<br>戴维斯王朝<br>大英图书馆书籍史话：超越文本的书<br>大师写作课：这样写出好故事（全三册）<br>大破局：中国经济新机遇<br>打开：周濂的100堂西方哲学课<br>村上春树新经典主义系列<br>从一无所有到财务自由：销售进阶指南（套装共5册）<br>创新者系列：创新者的任务_创新者的路径_创新者的方法（套装共3册）<br>传统即创造<br>超强掌控<br>不焦虑了<br>病毒星球<br>别做那只迷途的候鸟<br>表象与本质：类比，思考之源和思维之火<br>本质<br>被诅咒的部分 (棱镜精装人文译丛)<br>被掩盖的原罪<br>被殺了三次的女孩<br>被平均的风险：如何应对未来的不确定性<br>半小时漫画唐诗（读客熊猫君出品。漫画科普开创者二混子新作！全网粉丝700万！熟读唐诗三百首背后的故事，准确理解唐诗的原意、深意和诗意！）<br>拜拜吧，小情绪：29招击溃负面情绪，轻轻松松做情绪的主人<br>柏拉图和鸭嘴兽一起去酒吧<br>白牙(果麦经典)<br>巴黎评论·作家访谈4（文坛秘辛，写作圣经，带你进入当代伟大作家们的文学生活）<br>阿吽（向田邦子）<br>阿登纳回忆录(套装共4册)<br>《华章经典金融投资系列全集》典藏版（共9册）<br>2018年度豆瓣高分外国文学作品精选（套装14册）<br>1分钟物理<br>卓越工作：从优秀到卓越的高效工作法<br>专家之死：反智主义的盛行及其影响<br>重新定义学习：应对未来挑战的战略宣言<br>重塑认知系列（套装共6册）<br>重塑大脑回路：如何借助神经科学走出抑郁症<br>中国网络文学二十年<br>只有一个人生(人生在世，无非孤身逆旅。打动每一代年轻人的文字，周国平散文精选。)<br>只有他知道一切<br>职场实用写作课（套装4册）<br>正本清源说红楼<br>这样写出好故事：人物对话<br>哲学原来很有趣——16位大师的精华课<br>战争的一瞬间（《纽约时报书评》年度十大好书，一场官方历史书之外的西班牙内战）<br>余生<br>用得上的商学课<br>隐藏的行为：塑造未来的7种无形力量<br>异端 进击的哲学现场<br>一想到还有95%的问题留给人类，我就放心了<br>一看就停不下来的中国史<br>野果（第2版）<br>洋相<br>寻找爽点<br>幸福的陷阱<br>信息背后的信息<br>新情商<br>小王子的领悟<br>小数据之美：精准捕捉未来的商业小趋势<br>武士的女儿<br>我喜欢你，像风走了八千里<br>我是个妈妈，我需要铂金包<br>文字世界和非文字世界 (卡尔维诺经典)<br>文学课<br>文案变现：写出有效文案的四个黄金步骤<br>未来，相信而看见：马云的商业管理智慧<br>为什么我们总是在逃避<br>网络战争：颠覆商业世界的黑客事件<br>突破天性<br>天生非此：家是如何影响我们一生的<br>塔勒布经济学五部曲（套装共5册）<br>苏菲的哲学课<br>搜历史<br>松子落：京都九年<br>死亡的故事<br>树犹如此<br>适应性市场<br>是谁出的题这么难，到处都是正确答案<br>实践智慧：商学院绝对学不到的诺曼底领导力<br>十分钟智商运动<br>诗人继续沉默<br>圣母<br>生命是什么<br>深度营养（揭秘传统饮食背后的科学依据）<br>深度成长：颠覆思维模式，重新定义成功！<br>烧烤怪谈<br>上帝笑了99次：哲学悖论里的大思考<br>山月记<br>萨拉·沃特斯系列作品集（全六册） （轻舔丝绒 指匠 灵契 守夜 房客 小小陌生人）<br>弱传播<br>如何结交比你更优秀的人<br>如果我们错了呢？<br>日本经济如何走出迷失<br>认同自己：如何超越与生俱来的弱点<br>人生学校：微小的幸福<br>人生学校：平静的力量<br>人生学校：美好的品格<br>人生学校：爱情的真相<br>人生海海<br>人设【百万畅销作者 李尚龙 全新力作】<br>人类愚蠢辞典<br>人类群星闪耀时全新彩插导读详注版）<br>人类的明天<br>群氓的狂欢<br>全数字化赋能——迎击颠覆者的竞争战略<br>千年维新：从周公到光绪<br>起源：万物大历史<br>贫穷的终结： 智能时代、避免技术性失业与重塑世界<br>袍哥：1940年代川西乡村的暴力与秩序<br>叛逆天才<br>女孩们<br>念楼学短<br>年轻人,你就是想太多<br>逆向创新<br>能量<br>脑髓地狱<br>木星的卫星 (艾丽丝•门罗作品)<br>谋杀狄更斯（读客熊猫君出品，共2册。）<br>棉花帝国：一部资本主义全球史<br>密室中的旅行 (保罗·奥斯特作品)<br>弥散的心智<br>马尔克斯的忧伤_小说精神与中国气象<br>逻辑学原来很有趣_16位大师的精华课<br>逻辑思维与诡辩<br>零售的本质：为顾客提供生活解决方案<br>林语堂传_中国文化重生之道<br>鲤·写作课（以文学之名，重新发现此时此地的中国）<br>看得见的与看不见的：商界、政界及经济生活中的隐形决策思维<br>精彩人生的一分钟小习惯<br>解密日本零售业（套装共4册）<br>教堂经济学：宗教史上的竞争策略 (经济史与思想史的丛书)<br>焦虑急救（治愈时代焦虑的心灵圣药）<br>简捷启发式：有限理性让我们更聪明<br>极简数学（把复杂的公式、抽象的模型通通丢掉，在生活场景中轻松解答数学题。）<br>极简世界神话<br>绩效使能：超越okr<br>获客<br>辉煌与破灭：家族兴衰与帝国沦陷的历史（全2册 甲骨文系列 美第奇_哈布斯堡）<br>胡椒的全球史：财富、冒险与殖民<br>黑箱：日本之耻 (席卷全球的#metoo运动中日本核心事件全纪实)<br>故事思维<br>高情商管理者的6个习惯：做个人人愿意追随的高情商管理者<br>高情商沟通<br>改变未来的九大算法<br>风味人间<br>访古寻城<br>反溺爱<br>恶血<br>断舍离<br>缔造大英帝国_从史前时代到北美十三州独立（新民说）<br>第一推动丛书·综合系列（套装共7册：复杂_复杂的引擎_皇帝新脑_逻辑的引擎_数学的意义_未来50年_真理与美）<br>第一等人： 一个江南家族的兴衰浮沉<br>灯塔书系_我歌唱的理由_西西里柠檬_青年到此为止_在中途换飞机的时候(套装共4册)<br>大脑的故事<br>从一到无穷大<br>创造时间：专注于每天最重要的事<br>创新者的任务<br>产品游戏化<br>策略：如何在复杂的世界里成为高手<br>财务自由之路ⅲ<br>财务自由之路ⅱ,3年内让你的个人资产翻一番<br>病者生存<br>崩溃<br>拔蒲歌<br>暗知识：机器认知如何颠覆商业和社会<br>爱情、疯狂和死亡的故事<br>最后一个人类<br>注定一战：中美能避免修昔底德陷阱吗？<br>周期<br>重构<br>中国神话通论<br>中国人与美国人：一部共有的历史（一部非政府的中美关系史，彰显国际交往中的民间力量）<br>治愈未来<br>职场精进之路_从巨婴到大咖<br>职场进阶指南（套装共三册）<br>整个巴黎属于我<br>真相与错觉<br>战略：一部历史（套装书全2册 甲骨文系列） (甲骨文丛书)<br>与运气竞争<br>鱼什么都知道 (未读·探索家)<br>赢在上班时<br>饮食的迷思：关于营养、健康和遗传的科学真相（拒绝盲目跟风，活出自己的健康）<br>意志力是训练出来的：全新增订版<br>疑点【曾被七次改变为影视剧的当代经典，社会派推理宗师松本清张经久不衰的人性警示录】<br>一只特立独行的猫<br>亚洲的决裂：1909年前远东的兴衰<br>学习力：如何成为一个有价值的知识变现者<br>许子东现代文学课（圆桌派最受欢迎嘉宾许子东 12堂“民国范儿”现代文学公开课）<br>新原道：中国哲学之精神<br>写作的诞生<br>向着光明：父亲太宰治与母亲太田静子<br>向光生长：阿德勒自我超越心理学<br>下一站 火星：马斯克、贝佐斯与太空争夺战<br>无规则游戏：阿富汗屡被中断的历史<br>我余生的第一天<br>我想念我自己<br>我们人类的宇宙：138亿年的演化史诗<br>我的生活不可能那么坏<br>伟大的博弈<br>微精通：轻松到不可能放弃的技能学习手册<br>推理竞技场<br>甜蜜的苦楚<br>他从凤凰来：沈从文传<br>速求共眠<br>思维精进：改变人生的高效思考法（如何用最聪明的方式解决工作中遇到的问题）<br>思维的模式（颠覆你的思维，打破你的想象，大师帮你大开脑洞；现代人学习、工作和生活的思考指南）<br>思考的技术<br>数联网——大数据如何互联<br>收藏沙子的旅人 (卡尔维诺经典)<br>世界诞生于午夜<br>使命必达：百分之百实现目标的行为科学管理法<br>时间杀手<br>十问：霍金沉思录<br>设计大师的商业课<br>商业模式4.0：重塑未来商业逻辑<br>三万年前的星空<br>三千年来谁铸币：50枚钱币串联的极简中国史<br>三口棺材<br>如何用kindle高效学习<br>如何一开口就赢：职场第一课·职场谈判<br>如何把梦想变现（从一无所有到财务自由） (埃尔默·惠勒销售课程)<br>认知尺度（魏坤琳关于认知升级的重磅作品；认知尺度决定了你的见识高低和格局大小。）<br>人生学校：理想的工作<br>人生复本<br>人生的智慧<br>人人都该懂的科学哲学<br>人类成功统治地球的秘密：文化如何驱动人类进化并使我们更聪明<br>人工智能会抢哪些工作<br>全脑优势（第二版）——提升财富与职业的稀缺能力<br>去你的脂肪<br>区块链启示录：中本聪文集<br>秋水堂论金瓶梅<br>情绪<br>情商是什么？——关于生活智慧的44个故事<br>亲爱的丫头<br>亲爱的小孩<br>千年悖论【畅销百万册《曾国藩的正面与侧面》作者张宏杰代表作品】<br>奇迹唱片行<br>奇才<br>平常的恶<br>皮肤的秘密<br>牌桌上的区块链：后网络时代的商业演变与机遇<br>欧洲之门：乌克兰2000年史<br>诺亚的孩子<br>脑洞：关于我们这个神奇滑稽又疯狂的世界的真相<br>南腔北调：在语言中重新发现中国<br>民国大师书系（全6册）：先生之风，山高水长<br>蒙曼品最美唐诗：人生五味<br>美学讲稿<br>罗马共和国的衰落_从格拉古兄弟党争、苏拉独裁到马略改革<br>论文与治学<br>吕思勉讲中国史<br>六里庄遗事<br>联结：通向未来的文明史<br>历史的局外人<br>李白传<br>离岸人<br>潦草<br>快书写，慢思考<br>刻意改变<br>克苏鲁神话I_II_III<br>看人心理学：一本让你读懂他人的书<br>经济学要义<br>见字如来（四十六个有温度的汉字，讲述汉字里的中国文化）<br>极致用户体验<br>极简西方哲学史<br>极度效率<br>基本穿搭：适用一生的穿衣法则<br>灰度决策：如何处理复杂、棘手、高风险的难题<br>红楼十二层：周汝昌妙解红楼<br>海边理发店<br>哈布斯堡王朝：翱翔欧洲700年的双头鹰<br>国家是怎样炼成的2：三分钟通晓世界历史_nodrm<br>国家是怎样炼成的：三分钟，了解一个国家的前世今生；一本书，阅尽异国风情的历史变迁。_nodrm<br>鬼作家 (菲利普·罗斯全集)<br>管理的艺术【套装五册】 （大师的管理课_管理就是搞定人_深度管理_有效管理的5大兵法_高情商管理）<br>格林斯潘传<br>格调崔永元<br>高维度思考法：职场问题解决篇<br>高卢战记<br>改变心理学：世界正在狠狠惩罚不改变的人<br>复合型领导力<br>浮沉：帝国重臣的人生起落<br>风雅宋：看得见的大宋文明（新民说 吴钩说宋）<br>非平面<br>发现你的创造力类型(定位你的创造风格坐标，深耕你更具方向感的创造之路。）<br>恶魔的交易<br>短篇小说写作指南<br>独立，从财富开始_水湄物语的理财20课<br>读客经典文库：尤利西斯<br>都挺好（套装全两册）<br>东野圭吾：黎明之街<br>单读.19，到未来去<br>大象：劳伦斯诗集<br>聪明人极简图表工作法<br>从诗经到红楼梦：复旦人文经典课<br>从丹药到枪炮<br>传家之物：艾丽丝·门罗自选集<br>触感引擎<br>褚时健传<br>厨房太平记<br>成为母亲：一名知识女性的自白<br>沉睡的森林<br>长夜将至：新晋黑马作家夏阳，悬疑推理之作。<br>长眠不醒<br>长长的回家路<br>查理·芒格的投资思想<br>便携式文学简史（《似是都柏林》《巴托比症候群》《消失的艺术》作者，诺贝尔文学奖大热人选）<br>八零年代：中国经济学人的光荣与梦想<br>埃及四千年<br>HBO的内容战略<br>50人的二十年<br>21招，让孩子独立<br>100：小小说百篇<br>做二休五： 钱少事少的都市生活指南<br>坐龙椅：明清帝王的风雨人生（套装共2册）<br>最后的抵抗(宋元战争两个政权之间的生死较量)<br>最好的投资是投资自己<br>纵乐的困惑：明代的商业与文化<br>自我赋能<br>自流量生活<br>子弹笔记<br>中国历史常识<br>中国改革三部曲<br>中国的崛起、美国及自由世界秩序的未来(套装2册 纠缠的大国：中美关系的未来 大国冲突的逻辑：中美之间如何避免战争)<br>智能商业<br>直面人生的困惑（上线两周热销万册，网红教授郭继承助你认清自己，阅读社会，找到自己的精进之路！）<br>蜘蛛男孩<br>枕草子<br>这个时代的审美(马未都_邬君梅_陆川_李泉_六神磊磊_等13位名人谈美)<br>战略几何学<br>怎样读经典<br>再忙也要用心生活<br>阈限思维：改变并没有想象的那么难<br>与童年创伤和解<br>优势教养：发现、培养孩子优势的实用教养方法<br>易中天_读唐诗<br>一叶秋<br>一个人的文艺复兴（从他的作品里，能看到近百年中华文化的时空流转和社会延迁）<br>一个观点，不一定对<br>夜空总有最大密度的蓝色（最果夕日——做你自己，暴击孤独！）<br>学会争辩<br>选择：为什么我选的不是我要的？<br>羞耻感<br>猩红色的天空下<br>新媒体运营<br>新零售时代三部曲（套装共三册）<br>心理游戏（系列作品3年内5度登上英国亚马逊电子书榜首！）<br>写小说最重要的十件事<br>销售经理的22条军规：如何带出高绩效的销售团队<br>无声尖叫（系列作品3年内5度登上英国亚马逊电子书榜首！）<br>无情之战：太平洋战争中的种族与强权<br>我每天只工作3小时<br>我歌唱的理由<br>文明的冲突与世界秩序的重建<br>王阳明大传：知行合一的心学智慧（全新修订版）<br>天赋 (纳博科夫作品系列)<br>太平洋战争系列<br>太平洋战争（被实现的美日战争预言，16年后太平洋战争的沙盘预演：山本五十六偷袭珍珠港的行动指南）<br>思维破局<br>数据的真相：如何在数字时代做出明智决策<br>世界简史：从非洲到月球<br>世界第一好懂的哲学课（修订版）<br>时间回旋<br>时间的压力<br>时间的礼物(暖心小说之王巴克曼，《外婆的道歉信》《清单人生》之后再度热泪盈眶)<br>时间不够用，现在就行动<br>诗人<br>深海：探索寂静的未知<br>深度学习：智能时代的核心驱动力量<br>深度连接_让优秀的人都为你所用<br>莎拉的钥匙【连续156周盘踞《纽约时报》畅销榜，平均每年销量100万册，持续畅销11年！】<br>如何再次拿起书<br>如何培养不怯场的孩子（好妈妈胜过好老师，一本教孩子如何充满自信地展现自己力量的亲子家教奇书，豆瓣9.0高分）<br>如何打造一流创业团队：创业者最实用的管理指南（帮助创业公司打破“活不过3年”魔咒）<br>如何成为面向未来的学习者（原书第7版）<br>如果你再勇敢一点<br>人人都在说谎：赤裸裸的数据真相<br>人类帝国的覆灭：一个机器人的回忆录<br>人口创新力：大国崛起的机会与陷阱<br>人工智能时代：未来已来<br>去当你想当的任何人吧<br>穷忙 (译文纪实)<br>情绪勒索：那些在伴侣、亲子、职场间，最让人窒息的相处（拒绝中国式亲密关系）<br>亲密关系心理学（深度揭秘亲密关系smart原则，教你快速突破亲密关系瓶颈提升幸福感）<br>亲和力：11法则激活完美人际关系（钻石版）<br>巧克力时代（全3册）（读客熊猫君出品，《岛上书店》作者加·泽文的美丽蜕变之作。）<br>逆境成长：坚韧人格养成手册<br>南朝大争霸（套装共五册）（南朝版“权力的游戏”，首部传神勾画南朝争霸史的呕心力作！）<br>内在成长：心智成熟的四个思维习惯<br>密码朋克：自由与互联网的未来<br>美国政治：激荡于理想与现实之间<br>迈尔斯教授讲世界历史：世界通史（下）<br>迈尔斯教授讲世界历史：世界通史（上）<br>码书：编码与解码的战争<br>马普尔小姐探案全集<br>逻辑十九讲（美国新思想运动之父的逻辑学入门读物）<br>凛冬将至<br>历史与人_重新思考普遍性问题<br>空响炮<br>刻意改变<br>科学的历程<br>科技重塑中国<br>精英的人格魅力课<br>郊游<br>箭术与禅心<br>价值投资的秘密：小投资者战胜基金经理的长线方法 (华章经典·金融投资)<br>激活<br>黑洞之书<br>黑城 (未读·文艺家)<br>过剩之地：美式富足与贫困悖论<br>国宴与家宴<br>国家宝藏：100件文物讲述中华文明史<br>孤独及其所创造的（村上春树赞赏的当代小说大师，一部关于家庭、父性和自我身份的记忆之书。 (保罗·奥斯特经典作品)<br>给好奇者的暗黑物理学 (未读·探索家)<br>给布里安娜的卡片<br>高效管理【荣获AXIOM年度领导力图书大奖，松下等世界500强公司的管理培训指南】<br>高手：精英的见识和我们的时代（精装版）<br>高能量姿势<br>富人思维<br>浮沉万象记（世界冷知识收藏笔记，一秒变身更好玩的人。）<br>佛系：如何成为一个快乐的人<br>非虚构 时代记录者与叙事精神<br>反焦虑思维<br>发现你的行动力<br>堕落论<br>赌金者：长期资本管理公司的升腾与陨落<br>读城系列（柏林_伊斯坦布尔）<br>都会中的孤岛<br>迭代：让情商和见识成为你最大的底气<br>德国的七个秘密<br>大雪将至<br>大师的管理课<br>触点管理：互联网_时代的德国人才管理模式<br>城里的房子：读懂中国房产财富的逻辑<br>成吉思汗与今日世界之形成<br>尘埃之书（一部媲美《安妮日记》《辛德勒名单》的经典文学作品）<br>不再害羞：如何提高你的社会适应力<br>不吃鸡蛋的人<br>镖人5<br>边缘型人格障碍_深入解读边缘型人格的权威著作<br>被遗忘的花园（读客熊猫君出品，每一段不愿遗忘的过去，都隐藏着一个不为人知的秘密。）<br>扳手<br>暗黑之湖<br>艾莉诺好极了<br>阿里铁军销售课<br>《十九年间谋杀小叙》<br>AI极简经济学<br>30岁前的每一天：超实用梦想管理指南（新版）<br>作家、水手、士兵、间谍：欧内斯特·海明威的秘密历险记，1935-1961（索恩）<br>昨日重现<br>走出抑郁，做自己情绪的主人（套装共3册）<br>走出低迷_全球经济冰河期如何拯救私人资产（全方位攻破未来经济难题）<br>自在独行<br>朱明王朝<br>终身学习：哈佛毕业后的六堂课<br>中世纪人<br>中日恩怨两千年大合集（共4册）<br>中国哲学小史<br>中国人的历史：诸神的踪迹<br>正向激励：突破性的痛点式激励方案<br>这就是OKR：让谷歌、亚马逊实现爆炸性增长的工作法<br>哲学家们都在想什么：44个哲学家的奇闻趣事和毕生思想<br>战夏阳<br>曾国藩传<br>有趣的事实<br>有话说<br>用户的本质：数字化时代的精准运营法则<br>永恒火焰（全3册）(读客熊猫君出品。通宵小说大师肯·福莱特中世纪三部曲，欧美读者平均3个通宵读完！）<br>隐藏的意识：潜意识如何影响我们的思想与行为<br>以色列：一个民族的重生（生动再现以色列跌宕起伏的建国历史，深刻揭示以色列民族深邃的灵魂）<br>医生最想让你做的事<br>伊本·赫勒敦：天才的一生<br>一流的教养<br>寻圣光的人<br>学习力：颠覆职场学习的高效方法<br>幸福哲学书<br>心是孤独的猎手<br>写作全技术<br>小偷家族<br>小趋势.2<br>销售就是会讲故事（精英销售的5大销售利器，巧用故事法则提升销售业绩）<br>像间谍一样观察<br>向美而生：众人受美的召唤<br>显微镜下的大明<br>希腊罗马神话<br>我只知道人是什么<br>我要快乐，不必正常<br>我的对面是你：新闻发布会背后的故事<br>文明的崩塌：公元前1177年的地中海世界<br>为将之道：美国名将指挥的艺术(美国军中极具影响的领导力读物。)<br>微文案：碎片时代的文案创意手册<br>危险的维纳斯【东野圭吾新作，揭露人性的弱点。复杂的情节，反转再反转，但反转的是故事，还是人心？】<br>王小波：绿毛水怪（李银河独家授权，并亲自校订全稿。王小波、李银河定情之作！“从《绿毛水怪》开始，他拥有我，我拥有他。”）<br>王朝物语<br>宋朝进行时：趣说宋朝300 年. 王朝开启卷<br>四个春天<br>说服<br>数据资本时代<br>视觉思维<br>时间的朋友2018（精校版）<br>胜任未来：赢得人生的六种能力<br>生命密码：你的第一本基因科普书<br>生命的河流：七堂关于人生的成长课<br>生而不凡：迈向卓越的10个颠覆性思维<br>深度社交：如何“深耕”人际关系的交际艺术<br>如何化解内心的焦虑·致公版<br>任正非：除了胜利，我们已无路可走<br>认知迭代：自由切换大脑的思考模式<br>认识经济<br>人性的因素<br>作家榜经典文库：人性的弱点<br>人生算法<br>人人都该懂的哲学<br>人间宋词<br>让心灵更自由<br>权力密码—当历史遇见经济学<br>全能侦探社<br>圈层效应：理解消费主力95后的商业逻辑<br>情商（全六册）<br>企鹅欧洲史·追逐荣耀：1648—1815<br>企鹅欧洲史·竞逐权力：1815—1914<br>企鹅欧洲史·地狱之行：1914—1949<br>基督教欧洲的巨变：1517—1648<br>奇谈百物语.眩<br>品牌物理学：隐藏在创意与故事背后的科学营销系统<br>你一定爱读的极简未来史<br>能力变现：如何把能力有效地转化为财富<br>脑与阅读：破解人类阅读之迷<br>脑与意识<br>内向者优势：内向的你，该如何爆发潜在能量，展现自己的竞争力<br>慕容雪村经典文集（共6册）（《原谅我红尘颠倒》_《天堂向左，深圳向右》_《成都，今夜请将我遗忘》_《多数人死于贪婪》_《慕容雪村随笔集》_《中国少了一味药》）<br>迷失华尔街<br>美国内战回忆录（全景插图版 上下册）<br>麦肯锡企业管理战略合集（套装共5册）<br>罗贝托·波拉尼奥作品系列（共6册）<br>卢丹的恶魔：法国神父“附魔”案<br>六史：唐史演义<br>六史：宋史演义<br>六史：清史演义<br>六史：前汉演义<br>六史：明史演义<br>六史：后汉演义<br>历史的温度（1-3）<br>冷山（奥斯卡同名获奖电影《冷山》原著）<br>看世界<br>凯尔特神话<br>巨人的工具<br>禁断的魔术<br>尽管到最后，你还是成为你自己：与华莱士的公路之旅<br>街道江湖（中国版《米格尔街》，90后新锐小说家王占黑短篇力作）<br>较量：乐观的经济学与悲观的生态学<br>讲给大家的中国历史04：帝国的昂扬精神<br>讲给大家的中国历史03：从列国到帝国<br>讲给大家的中国历史02：文明的基因<br>讲给大家的中国历史01：中国是怎么出现的<br>剑桥国别史系列（全三册）（剑桥大学扛鼎经典，畅销欧美20余年世界顶尖历史学家精心打磨的历史经典读本，美国史，意大利史，德国史合集）<br>见识丛书·大历史选集（套装共4册）<br>价值规律（水木然新作，看懂趋势，掌控未来）<br>极简思维：颠覆传统思维模式的极简法则<br>极简科学起源课<br>回到故乡的陌生人<br>华为没有秘密.2<br>后机器时代<br>后工业社会的来临（未来学经典著作，知识占有是否会取代资本占有决定未来社会的阶层结构。）<br>红血女王三部曲<br>横道世之介（《怒》《同栖生活》作者吉田修一 令人爆哭爆笑的青春缅怀大作）<br>赫尔辛基罗卡曼迪欧家族背后的真相<br>和谐两性：从了解对方到相互吸引（套装共3册）<br>硅谷增长黑客实战笔记<br>龟背上的世界<br>怪诞脑科学：战胜焦虑、混乱、拖延的自控术<br>高手：超越普通人的高效时间管理法<br>复明症漫记<br>父母的语言：3000万词汇塑造更强大的学习型大脑<br>非对称风险<br>对赌：信息不足时如何做出高明决策<br>读客经典文库：一个青年艺术家的画像(献给每一个永不妥协的青年！)<br>东京百年史——从江户到昭和，1867-1989（下）<br>东京百年史——从江户到昭和，1867-1989（上）<br>地球的故事<br>稻盛和夫经营哲学经典套系（共5册）<br>当下的启蒙：为理性、科学、人文主义和进步辩护<br>当时忍住就好了(哈佛大学性格自修课)<br>大鱼<br>大唐辟邪司（全3册）<br>大秦三部曲<br>大脑帝国<br>从这里读懂第三帝国（套装共8册）<br>从极简到极致：在擅长的领域做一个厉害的人<br>纯真告别（与《飘》《杀死一只知更鸟》荣并吉尼斯「全球三大畅销小说」，原名迷魂谷，哈利波特译者马爱农献译，火爆全球）<br>创业在路上<br>创新的价值<br>成为：米歇尔·奥巴马自传<br>长路（“世界名嘴” 奥普拉亲自推荐，席卷所有年度好书榜。）<br>不执着,叫看破 不完美,是生活<br>不正经的科学：对那些古怪问题的另类研究<br>必须牺牲卡米尔<br>北欧神话<br>爆款写作课：打造爆文的3个黄金法则<br>邦查女孩<br>奥尔加魔幻小说集（《白天的房子，夜晚的房子》《太古和其他的时间》共二册。）<br>埃及神话<br>《群·海》<br>做出明智判断<br>罪案迷城：消失的女高中生<br>最伟大的智力冒险<br>组织革新：构建市场化生态组织的路线图<br>自我边界<br>转机<br>猪的土地<br>中华经典诗文之美（共13册）<br>中国通史_从上古传说到1949(精装全三册)<br>中国人生哲学<br>中国历史大事年表<br>中国的当下与未来：读懂我们的现实处境与30年大趋势<br>指数定投实现财务自由<br>只是丢了手机而已<br>真情<br>哲学是怎样炼成的<br>增强型分析：ai驱动的数据分析、业务决策与案例实践 (数据分析与决策技术丛书)<br>曾国藩的经济课<br>责任病毒：如何分派任务和承担责任<br>在黑暗中等<br>圆圈正义<br>原生家庭生存指南：如何摆脱非正常家庭环境的影响<br>育儿的逻辑<br>与恶魔对话<br>与达尔文共进晚餐<br>有趣得让人睡不着的科普系列（套装共8册）<br>游牧民的世界史：修订版<br>游荡集<br>涌变<br>一束令人头晕目眩的阳光<br>一分钟说话<br>耶稣的学生时代<br>耶路撒冷三千年<br>盐野七生作品集（套装33册）（已出版作品大合集，一套读尽罗马史）<br>亚裔美国的创生：一部历史<br>学会幸福：人生的10个基本问题<br>悬崖边的树 (大家读大家)<br>行动教练：把员工带成干将<br>新民说·大英帝国套装<br>消失的世界<br>相亲中毒<br>下町火箭<br>西方学者眼中的东方伟人（套装共三册，毛泽东传_周恩来传_邓小平传）<br>伟大的思想（中英双语版·全48册）<br>维多利亚女王：帝国女统治者的秘密传记（全2册）<br>维多利亚女王<br>王蒙写给年轻人的中国智慧（全四册）<br>万智有灵：超出想象的动物智慧<br>推理宗师·松本清张诞辰110周年纪念精选集<br>天才时代：17世纪的乱世与现代世界观的创立<br>特斯拉模式：从丰田主义到特斯拉主义，埃隆·马斯克的工业颠覆<br>四书五经（全二十一册套装<br>斯维拉克“布拉格故事集”（套装4册）<br>刷屏<br>受益一生的六本书（套装六册）（鬼谷子&amp;自控力&amp;羊皮卷&amp;人性的弱点&amp;墨菲定律&amp;九型人格）（现象级畅销书）<br>受害者<br>世事无常<br>史景迁作品作品8册套装<br>史记的读法：司马迁的历史世界<br>时间的答案<br>十三夜<br>生死之间：当我们与疾病和死亡狭路相逢<br>生死秦始皇<br>生命之殿<br>深度思考<br>少有人看见的美<br>上帝的骰子<br>商业之巅：新商业时代的12个锦囊妙计<br>如何用手机拍一部电影<br>如何形成清晰的观点<br>如何启动黄金圈思维<br>如何看懂艺术2<br>如何讲好一个故事：引爆说服力的故事思维训练法<br>如何达成目标<br>如果人类是整个宇宙的大脑<br>人生十二法则<br>人人都该懂的批判性思维<br>人类为什么要探索太空<br>人类的价值（是什么让人类如此独特？是文化让我们与众不同！）<br>热爱生命<br>缺爱<br>全球通史：从史前到21世纪（第7版新校本 上下册套装）<br>去规模化：小经济的大机会<br>情商大师：如何快速成为一个淡定的人<br>普京：权力的逻辑<br>女儿的选择<br>内向高敏者_如何在外向的世界自在生活<br>哪吒<br>墓志铭图书馆<br>魔力的胎动<br>模型思维<br>民国人物传记<br>灭火：美国金融危机及其教训<br>米，面，鱼：日本大众饮食之魂<br>迷人的液体<br>美国式婚姻<br>美国人：从殖民到民主的历程（全3册）<br>美国成长三部曲(套装共3册)<br>没有思想的世界：科技巨头对独立思考的威胁<br>麦肯锡情绪管理课：学会正向思考，告别职场焦虑<br>麦肯锡公众表达课：准确发现痛点，才能有效说服<br>麦肯锡高效沟通课：掌控高难度谈判的13种技巧<br>麦肯锡高效工作法<br>逻辑的力量<br>罗马元老院与人民<br>罗马帝国的陨落：一部新的历史<br>罗马的复辟：帝国陨落之后的欧洲<br>灵魂漫长而黑暗的茶点时间【《全能侦探社》系列第二部<br>两个人的车站<br>梁实秋经典作品雅致生活系列（套装共5册）<br>历史与传奇<br>历史的温度（套装共4册）<br>李娃<br>黎明前说我爱你<br>老酒馆<br>困惑的三文鱼【全能侦探社3】<br>掘金大数据：电信数据金矿详解、挖掘及应用<br>精英必修课（全9册）(清单_excel_时间_方法_动机_专注力_用脑_领导力_沟通)<br>京极夏彦书楼吊堂系列（套装二册）<br>进化的故事<br>今天也要认真穿<br>她和她的秘密<br>结伴养老<br>甲骨文丛书·午夜北平（套装全2册）<br>加西亚·马尔克斯访谈录<br>激活你的高效人生（套装共6册）<br>货币战争 套装共5册<br>滑铁卢：决定欧洲命运的四天<br>华文全球史—大航海时代海上霸权系列（套装共3册）<br>黑暗物质：精灵守护神<br>合理膳食：提高记忆力，防止认知能力下降<br>孩子们<br>哈佛经济学家推理系列（套装共4册）<br>国外风云人物传记精选集（全10册）<br>桂花：阿多尼斯中国题材长诗<br>怪诞行为学（全5册）<br>怪诞行为学6：非凡的决定<br>共同体的焚毁：奥斯维辛前后的小说<br>工业互联网浪潮<br>高难度沟通_职场篇<br>独霸中东：以色列的军事强国密码（好望角书系）<br>动物奇葩说<br>第一推动丛书·诺贝尔奖得主作品<br>第一次十字军东征<br>地球编年史：第十二个天体<br>德国文化漫游：再遥远也能拥抱不灭的浪漫主义灵魂<br>德国历史中的文化诱惑<br>德国的细节<br>倒退的帝国：朱元璋的成与败<br>大象席地而坐<br>错觉：ai如何通过数据挖掘误导我们<br>村上春树作品集：长篇小说、随笔杂文、访谈纪实全收录（套装共21册）<br>从航海图到世界史：海上道路改变历史<br>从对抗到共赢：像顶级谈判专家一样行动<br>创造知识的方法论<br>创造未来城市<br>创意选择<br>穿越寒冬：创业者的融资策略与独角兽思维<br>褚时健经营哲学系列（套装共3册）：经营为王_管理至上_人生干法<br>尘世的梦浮桥<br>超级转化率：如何让客户快速下单<br>超级思维<br>超级话题<br>常识圆桌派：中国常识全集（套装共10册）<br>长大了就会变好吗？<br>蔡骏24堂写作课<br>财富自由新思维：洪校长教你快速实现财富倍增的55堂投资课<br>布拉格练习曲<br>布谷鸟的蛋<br>不妥协的谈判：哈佛大学经典谈判心理课<br>半小时漫画中国史（番外篇）：中国传统节日<br>巴菲特的第一桶金<br>巴别塔<br>八千里路云和月<br>爱因斯坦传（全2册）<br>爱尔兰人<br>《华尔街日报》是如何讲故事的（珍藏版）<br>_犹__钱的思维（88个不同的财商思维，帮助你全方位了解犹太人的财富智慧）<br>ai的25种可能<br>5g时代：经济增长新引擎<br>30天精读mba<br>作家榜经典：一间自己的房间（聪明女生的独立方式，从拥有一间自己的房间开始！女性觉醒必读） (大星文化出品)<br>作家榜经典：双城记<br>作家榜经典：茶馆<br>追捕祝融星<br>朱鹮的遗言<br>重口味心理学：我们内心的小怪兽<br>种子用户方法论<br>中央帝国密码三部曲（套装共3册）<br>中国人生哲学【大师的大师方东美，唐君毅、陈鼓应、成中英、傅佩荣等哲学大家的授业恩师，哈耶克、钱锺书、铃木大拙等大师一致推崇的一代哲学宗师方东美代表作。傅佩荣全新校订并作序推荐。】<br>秩序与历史（套装全五卷）（对秩序与真理的探寻，是人类精神的一种本能） (人文与社会译丛)<br>植物园的巢穴<br>职场谈判经典书系_高难度谈判_哈佛经典谈判课_哈佛谈判心理学(套装共3册)<br>远行译丛：老巴塔哥尼亚快车（从北美到南美，体验22种不同风情的火车）<br>远见（一本故事丰富的决策行为指南）<br>宇宙科普全书：汇集了国内外顶级天文机构和学术资源（套装共六册）（只要人类想做，就没有去不到的远方）<br>瑜老板三分钟京剧小灶（套装2册）<br>咏叹生死<br>永久记录<br>硬功夫：助你精进的八大硬核技能<br>赢家的逻辑<br>印尼etc：众神遗落的珍珠<br>银河界区三部曲<br>音乐大脑<br>译文好书榜：什么值得读作品精选集(套装共15册)<br>以眼还眼 ：犯罪与惩罚简史<br>伊斯坦布尔三城记<br>伊斯坦布尔的幸福<br>一间只属于自己的房间<br>野兔<br>演讲技巧：致颤抖的商业演讲小白们（高度实用的演讲建议）<br>岩波新书10：近代朝鲜与日本（史学家赵景达以其“在日韩国人”的独特身份，勾勒出一部跌宕起伏的朝鲜近代史！）<br>寻美：摄影中的东方美学<br>新中产家庭理财第一课<br>新闻业的怀乡病<br>新食货志<br>心理自助cbt书系（套装共五册）</em> 克服压力_克服低自尊_克服囤积癖_克服忧虑_克服完美主义<br>协同：数字化时代组织效率的本质<br>晓肚知肠_肠菌的小心思<br>小城畸人（全球百佳英文小说，美国作家之父舍伍德·安德森短篇经典，100周年纪念版）<br>销售冠军是如何炼成的——阿里铁军销售进阶课<br>向和平宣战：外交的终结和美国影响力的衰落（上下）<br>现代经管商务必读系列（套装10册<br>西方通史：从古代源头到20世纪（全3册）<br>五四运动史：现代中国的知识革命<br>无岸之岛<br>我心归处是敦煌：樊锦诗自述<br>我的奋斗3：童年岛屿<br>我包罗万象<br>文案的基本修养（99篇小文深入浅出、条分缕析，一本书讲透广告创意与文案之道）<br>外卖超级运营术<br>外出偷马【国际impac都柏林文学奖获奖作品！苏童、庆山、陶立夏都爱它！挪威就狂销30万本！被译作50多种语言！痛不痛的事，我们可以自己决定。】<br>图画的游戏：look！德国绘本的艺术<br>通俗心理学百科合集（套装共18册）<br>睡在汽车里的女孩<br>睡个好觉<br>世间的陀螺：写给亲人、故乡和远去的旧时光（将激烈的冲突消解于微笑与拥抱，《财新周刊》连载一年，引无数读者共鸣。））<br>诗意的宇宙：蔷薇、时空与21世纪物理学<br>失乐园<br>盛世的黄昏：乾隆（1736—1757）（新民说）<br>生活需要仪式感2<br>深度说服_用共情力和逻辑力轻松说服别人<br>上海译文top30名家名作大套装(套装共30本·2019年版)<br>三分钟漫画汽车史<br>如何写出一篇好文章：不动笔就能学会写文章的训练法<br>如何培养高财商孩子：影响孩子一生的金钱对话<br>如何看懂艺术<br>如何高效学语言<br>如何成为一个很厉害的人（精进版）（套装三册）<br>肉料理原来是这么回事儿<br>日读古诗词<br>认识顾客（原书第13版）<br>人性中的善良天使：暴力为什么会减少<br>人文精神的伟大冒险：人文艺术通史<br>人生效率手册：重塑升级版<br>人人都能学会的刷屏文案写作技巧<br>人类的旅程：基因的奥德赛之旅<br>人类的进击<br>人才盘点完全应用手册<br>热带<br>让我们灵魂激荡身体欢愉：一个男科医生的手记<br>缺陷也完美<br>全面战争·日式三国【吉川英治笔下的三国英雄记】【套装共5册】<br>全怪谈：扶桑鬼话（套装共6册）<br>区块链浪潮：连接技术与应用<br>清史九讲 (华文全球史)<br>清明上河图密码：隐藏在千古名画中的阴谋与杀局（全6册）<br>亲密关系：实操篇 寻找自我的旅程<br>强风吹拂<br>企鹅的忧郁（当代俄语文学新经典 《纽约时报》盛赞“惊心动魄的黑色幽默杰作！” 理想国出品）<br>偏执乐观：诺基亚转型的创业式领导力<br>诺贝尔奖经济学合集（套装共5册）（经济学领域的集大成作品）<br>女俘爱玛<br>你要好好的<br>你为什么不道歉<br>你当像鸟飞往你的山<br>你不是失败，只是差一点成功（给每一个颓丧和低谷中人的勇气之书，哈佛大学知名艺术史学家，教你如何从低谷反弹！)<br>拿破仑王朝<br>魔术师时代：哲学的黄金十年：1919-1929<br>米格尔在智利的地下行动<br>迈向财富自由之路<br>逻辑<br>论中国古代的知识分类与典籍分类<br>龙蛋<br>零售畅销秘<br>灵魂有香气的女子<br>裂变增长：快速创造规模化用户<br>量子空间<br>历史的镜子（全新修订版）<br>理性的边界<br>理查德·费曼传<br>离婚<br>老人的战争”六部曲<br>快乐贩卖机<br>恐妻家<br>看名画的眼睛系列：随日本美术史名家 开启艺术通识之门(套装共7册)<br>咖啡瘾史：一场穿越800年的咖啡冒险<br>巨浪下的小学<br>酒鬼与圣徒：在神的土地上干杯<br>精准购买<br>精英思想会系列：商业巨头白手起家的秘诀<br>经济情操论 (思想会)<br>进击的律师：双子星升起<br>金缮生活法<br>她在红尘外<br>简·爱<br>假如比尔街可以作证<br>记忆宫殿：130小时成就超级记忆力<br>极致零售：消费者主权时代的零售新图景<br>极简时间：如何从忙乱到时间自由<br>基因之河<br>荒凉山庄：插图珍藏本（套装上下册）<br>呼吸<br>好女孩<br>好好思考<br>汉字的故事<br>孩子如何学习<br>孩子如何思考<br>顾客心理战：读懂顾客心理，实现快速成交<br>故事力思维：3分钟讲好一个故事，你可以说服任何人<br>给大壮的信<br>格兰贝的年轻人<br>高效写作的秘密<br>高效清单工作法：聪明人的无压时间管理手册<br>风之影四部曲<br>反直觉 为什么我们总是容易情绪化决策<br>反本能2：如何对抗人性弱点<br>儿童用药家庭必备方案<br>敦煌本纪<br>读客经典文库：心灵的焦灼<br>读客经典文库：雾都孤儿<br>读客经典文库：刺青<br>抖音营销系统</em> 未来抖商<br>地铁上读书的女孩<br>灯塔工的值班室<br>弹弓神警<br>代体<br>大师经典：王力先生的古代文化通识课<br>大师和玛格丽特<br>大金王朝<br>打造儿童超级大脑<br>此生未完成：增订新版<br>春风十里不如你<br>成为极少数<br>沉睡者<br>超有料漫画中国史<br>超实用儿童心理学：孩子心理和行为背后的真相<br>草莓人生<br>别让情绪毁了你的努力<br>保持饥渴：不断获取新知识，升级底层操作能力<br>半小时漫画经济学2：金融危机篇<br>爸爸妈妈，请做我的摄影师<br>安身立命：大时代中的知识人<br>哀伤纪<br>醉步男<br>罪与罚 学术评论版(文学纪念碑)（传世译文和八篇学术解读文章的精妙结合。）<br>最后的儿子<br>自信的力量<br>重新定义增长<br>重来也不会好过现在<br>终身学习与认知升级畅销经典套装<br>中美科技巨头：从bath×gafa看中美高科技竞争<br>中国艺术精神<br>中国人的生存规矩<br>中国经济增长十年展望（2019—2028）<br>智识的冒险：精英如何应对复杂性和不确定性<br>智能战略<br>枕边书<br>这里是中国<br>掌控未来系列（套装共6册）<br>掌控沟通<br>战略推演：获取竞争优势的思维与方法<br>造物者之歌<br>云雷岛事件<br>约翰·博格与先锋集团：一个人改变一个行业（医生曾对他下了悲观的诊断，他却顽强地活了59年。作为ceo被开除，却创立了伟大的先锋集团） (博文视点图书)<br>有点意思：我的电影日记<br>有产生活启示录<br>游心之路<br>优雅老去：你的前100岁健康指南<br>优步：算法重新定义工作<br>银汤匙<br>遗忘，刑警<br>一个人生活<br>一个人的巴黎<br>一个好地方 (挪威现当代文学译丛)<br>夜袭动物园<br>岩波：日本社会写实精选系列（精选8册<br>寻找卡夫卡<br>雪晶的重量<br>学会呼吸<br>喧嚣<br>星河战队<br>小约翰<br>销售铁军<br>夏天、烟火和我的尸体<br>希腊与罗马两部曲：雅典的胜利<em>罗马的崛起<br>西贝的服务员为什么总爱笑：贾国龙激励3万员工的管理哲学<br>屋顶上的小丑<br>乌金的牙齿<br>我用古典的方式爱过你<br>我们为什么这么臭：我们原来是这样<br>我们深陷泥潭<br>我和这个世界不熟<br>我的生活不可能那么坏<br>我的生活不可能那么坏2·完美假期篇<br>我的宠物是个人<br>文明：bbc镜头下的世界文化遗产<br>文本与阐释 (大家读大家)<br>文案功夫：成为金牌文案的6大核心能力<br>威士忌原来是这么回事儿<br>危险闺密<br>万物有意思（中国篇_世界篇）（套装4册）<br>万物发明指南<br>童年兽<br>同名人<br>停车暂借问<br>挑战<br>唐朝历史的教训<br>孙频痛感三部曲（疼_盐_裂）套装共3册<br>送行<br>思维与陷阱<br>刷新品牌：用大数据重塑营销模式<br>世俗主义之乐 (人文与社会译丛)<br>始皇帝：秦始皇和他生活的时代<br>实用性思考的艺术<br>诗的引诱 (大家读大家)<br>生活需要孤独感<br>生活需要分寸感<br>沙丘六部曲<br>杀死玛丽苏<br>色彩性格心理学<br>如何写出走心文案<br>如何睡个好觉：哈佛医学院睡眠指导书<br>如何科学开发孩子的大脑：智商与情商发展指南<br>如何假装懂音乐<br>如何成为职场实力派<br>如果萨莉没离开<br>日本风俗小物（理想国出品）<br>认知红利<br>人世间<br>人人都能梦的解析<br>人人都该买保险<br>人类的起源<br>人间值得<br>绕日飞行<br>全球贸易摩擦与大国兴衰<br>全球不平等逸史<br>情商优势：情商与成功：珍藏版<br>清宫玄机录<br>亲历纽交所<br>千年帝国史<br>骑兵军<br>品牌年轻化<br>贫穷的本质：我们为什么摆脱不了贫穷·修订版（重新理解贫穷，探究穷人之所以贫穷的根源。）<br>票据革命<br>攀登者<br>欧洲历史文化巡礼（套装共9册）<br>女性与权力：一份宣言<br>匿名区<br>你的善良必须有点锋芒<br>你的善良必须有点锋芒2<br>那些忧伤的年轻人<br>明清叙事文学中的城市与生活 (大家读大家)<br>麦肯锡思考力系列（套装共3册）：麦肯锡逻辑思考力_麦肯锡问题思考力_麦肯锡战略思考力（破解各种职场问题，找到全优工作路径。）<br>理查德·耶茨文集·庸人自扰<br>理查德·耶茨文集·天命<br>理查德·耶茨文集·冷泉港<br>理财就是理生活（从零开始学理财，实现财务自由，做聪明的投资者 ）<br>朗读者i_ii 大全集共6册<br>狂想人生：皇后乐队传<br>快行动，慢思考<br>刻意观察<br>刻意放手<br>看日本：直击日本现状【从各自的角度阐释日本几十年来的变化历程和社会现象】(套装共4册)<br>开市大吉：老舍短篇小说选<br>卡洛·罗韦利：极简物理系列（共4册）<br>君主与大臣：清中期的军机处（1723—1820）<br>聚焦<br>经典科普课系列（套装共10册）<br>近代中西医的博弈：中医抗菌史 (中华书局出品)<br>金字塔原理大全集<br>解码时间：时间哲学简史<br>焦虑你好<br>降魔变<br>间谍学校：像间谍一样记忆<br>坚毅：培养热情、毅力和设立目标的实用方法<br>会说话的人，都拥有开挂的人生<br>挥云而去：十张画里看中国<br>怀柔远人：马嘎尔尼使华的中英礼仪冲突（第2版） (思想会)<br>华为奋斗密码<br>好好接话<br>捍卫隐私<br>海上大教堂<br>海盗思维：打造令人惊奇的客户体验<br>归属感<br>关系黑洞<br>古代人的日常生活<br>古代汉语常识<br>给年轻科学家的信<br>给大忙人的高效阅读课<br>高效休息法 世界精英这样放松大脑<br>高效沟通的100种方法<br>高效迭代：高手的自我进化方法论<br>腐败：人性与文化<br>非常之人：20人的历史时刻<br>番茄工作法<br>法式诱惑<br>多余的人<br>独居日记（梅•萨藤作品）<br>读客经典文库：再见，吾爱<br>读懂一本书：樊登读书法<br>懂得倾听，是学会沟通的第一步<br>定投十年财务自由<br>敌人与邻居：阿拉伯人和犹太人在巴勒斯坦和以色列<br>低风险，高回报<br>当爱变成了情感操纵：如何摆脱以爱为名的控制，重寻亲密、自在的情感关系<br>大撕裂时代<br>大地：三部曲（全3册）<br>从早“茫”到晚：都市上班族的每日渡劫和永恒轮回<br>从一到无穷大<br>从受欢迎到被需要：高情商决定你的社交价值<br>从容的告别<br>创新者的行动<br>创新大脑<br>称霸（上下册）<br>超级思维<br>超级大脑的七个习惯：激发大脑潜能，激活高效人生<br>场景方法论：如何让你的产品畅销，又给用户超爽体验<br>差异优势<br>残雪经典作品集（２4本套装）<br>财富的起源<br>不要害怕中国<br>不三<br>不管教的勇气<br>毕竟战功谁第一<br>比尔·布莱森：西方日常生活观察笔记系列<br>暴力与反暴力：法国大革命中的恐怖政治<br>半小时漫画中国史4<br>半小时漫画唐诗（2）<br>白城恶魔<br>把地上的事往天上聊<br>巴巴拉·w·塔奇曼作品系列（套装共6册）（普利策奖历史作家塔奇曼作品，.以文学的方式书写历史）<br>奥格威谈广告：数字时代的广告奥秘<br>暗幕下的格尔尼卡<br>爱情就是堆积如山的笔记<br>爱的四十条法则<br>20堂商业思维进阶课<br>20世纪思想史：从弗洛伊德到互联网<br>18个未来进行时<br>140亿年宇宙演化全史<br>最富足的投资<br>自我关怀的力量<br>自然作为理性：托马斯主义的自然法理论<br>重新设计生命：基因组编辑技术如何改变世界<br>重新定义心理学：关于心理学的另类思考<br>终身幼儿园<br>中国的改革哲学<br>中东死生门_走出中东（套装共2册）<br>征途美国<br>这本书能让你睡得好<br>禹域鸿爪<br>游戏数据分析实战<br>游牧者的抉择：面对汉帝国的北亚游牧部族<br>营销革命4.0：从传统到数字<br>英国史（全3卷）<br>阴影中的军队_黑水公司和他的平民勇士<br>一月物语<br>洋葱阅读法<br>延展：释放有限资源的无限潜能<br>新异化的诞生：社会加速批判理论大纲<br>新未来简史：区块链、人工智能、大数据陷阱与数字化生活<br>新媒体运营：产品运营_内容运营_用户运营_活动运营<br>新零售实战宝典：助你成为未来商业的头号玩家（套装10册） (新零售思想会)<br>像间谍一样思考_CIA情报官首度公开出奇制胜的商业技巧<br>希特勒的影子帝国<br>吴晓波经济史大合集（激荡三十年｜跌荡一百年｜浩荡两千年｜大败局 七册套装）<br>文字的历史<br>未来三部曲<br>为什么精英都是清单控<br>微心理学书系（套装四册）<br>王小波作品大全集<br>托马斯·弗里德曼精选套装：谢谢你迟到_世界是平的(套装共2册)<br>图解冥想术<br>铁道之旅：19世纪空间与时间的工业化<br>他缔造了哈佛：查尔斯W.艾略特传<br>苏珊·福沃德心理学经典作品集（依恋_原生家庭_执迷） 三册套装<br>死灵之书<br>斯坦福大学危机管理课<br>思享家丛书_1_12_通向常识的道路_正义的可能_亦摇亦点头_大先生(套装共4册)<br>思维的发现：关于决策与判断的科学<br>思维导图笔记整理术<br>数字游戏：关于足球，你全弄错了……吗？<br>数字乌托邦<br>释放：过上无压力生活的7个原则<br>世界哲学简史<br>世界历史_中国历史 极简本（套装共2册）<br>十二个明天<br>失落的经典”系列6册（拉德茨基进行曲_岛_使节_当你老去_杀局_恶魔的交易）<br>生命最后的读书会（美国亚马逊五星畅销好书！余秋雨作序、蒋方舟真诚推荐！）<br>生命的法则 (湛庐文化·科学素养)<br>生活中的运筹学<br>沙丘5：沙丘异端（伟大的《沙丘》系列，每个“不可不读”的书单上都有《沙丘》！）<br>三国全史：全两册<br>如父如子<br>认知三部曲<br>人类酷刑史：解密文明面具下的可怖人性<br>人类的明天<br>人间便利店<br>让思维自由<br>趣味物理：漫步平行宇宙（全四册）<br>情商高，就是说话让人舒服书系（套装共3册）<br>钱穆国学作品集（套装共十册）<br>奇迹唱片行<br>期权波动率与定价：高级交易策略与技巧 (金融期货与期权丛书)<br>苹果酒屋的规则<br>逆转思维<br>内容电商<br>魅力史：激发欲望与视觉征服的艺术<br>美洲五百年：一部西半球的历史<br>美国英语教师协会推荐：我爱读好英文合集（全14册）<br>美国国家图书馆珍藏名传系列（套装共8册）<br>美国的故事（七册套装）<br>梅毅说中华英雄史（全10册）<br>鲁豫有约：说出你的故事（共5册）<br>龙应台作品集<br>练习的力量_把事情做到更好的42法则<br>力量训练套装<br>潦草<br>蓝筹孩子<br>跨境电商宝典(套装共2册)<br>科技的狂欢<br>韭菜的自我修养(李笑来首次公开投资原则)<br>精准表达：让你的方案在最短的时间内打动人心<br>经济学关我什么事：生活中的经济学<br>进化拼图三部曲<br>今日简史：人类命运大议题<br>教宗与墨索里尼：庇护十一世与法西斯崛起<br>蒋介石和宋子文<br>简史四部曲（时间简史_思维简史_数学简史_技术简史）<br>技术创新简史<br>激情社会：亚当·弗格森的社会、政治和道德思想<br>基因：不平等的遗传<br>基因、大脑和人类潜能<br>黑木头<br>合作的进化 修订版<br>好好吃饭：无须自控力，三观最正的瘦身指南<br>给大家看的日本通史<br>高效PDCA工作术<br>干货书系：淡定是修炼出来的_四大沟通模式（套装共2册）<br>富人养成指南<br>弗洛伊德传<br>佛系_如何成为一个快乐的人<br>芬兰人的噩梦<br>放牧人生：湖区故事<br>犯罪心理套装（共四册）<br>反智时代：谎言中的美国文化<br>反常识经济学（套装共4册）<br>反常识经济合集（套装共4册）<br>恶之花<br>恶女：普通女性为何化身连环杀人狂，全面揭秘骇人听闻的女性连环杀手罪案现场。<br>东瀛文人·印象中国（套装共5册）<br>第一推动丛书·综合系列（套装共7册：复杂_复杂的引擎_皇帝新脑_逻辑的引擎_数学的意义_未来50年_真理与美）<br>帝国政界往事_公元1127年大宋实录_大明王朝纪事_大清是如何拿下天下的上册_下册(全新修订版)(套装共4册)<br>帝国崛起病<br>帝国的远征(《百年战争简史》《无敌舰队》《世界历史上的蒙古征服》套装三册)<br>道金斯科学经典系列：自私的基因＋盲眼钟表匠＋魔鬼的牧师（套装共三册）<br>单独中的洞见<br>从容养育：成长自我，成就孩子<br>此刻不要回头（20世纪殿堂级文学大师的悬疑经典！）<br>传奇的海：海洋上的野心、战争与征服（套装书全2册 甲骨文系列 海盗共和国_征服者）<br>城堡的故事_半部英国史<br>成为“最后一人”<br>沉浸感：不可错过的虚拟现实革命<br>禅的故事<br>不朽的音乐家三部曲<br>不完美人生的解答书（套装8册）<br>不完美风暴：美国中央情报局反恐30年<br>冰激凌家族<br>别拿相关当因果！因果关系简易入门<br>崩溃和救援：美国股市百年跌荡启示录<br>爱的沟通：写给男士的科学恋爱指南<br>【精品汇-313】西游八十一案（三部）<br>《松浦弥太郎：生活中的巧思与发现笔记》三部曲<br>《十宗罪6》<br>《科学美国人》精选系列（套装共4本）<br>NLP思维：高效人士都在用的影响力沟通技能<br>IBM商业价值报告系列（套装共6册）<br>1Q84<br>1%法则<br>重塑：信息经济的结构<br>重来_更为简单有效的商业思维<br>正义与幸福<br>真正的蒙氏教育在家庭精选（套装共三册）<br>掌控：开启不疲惫、不焦虑的人生<br>战争与回忆：全2册<br>战争风云：全2册<br>约翰·欧文经典代表作<br>约翰•欧文_独居的一年_盖普眼中的世界(套装共2册)<br>原则_爆裂_混乱_盗火（4册）<br>与罗摩相会<br>鱼·翅与花椒 (译文纪实)<br>游戏改变人生<br>用图表看懂世界经济（200余张体表厘清99个关乎世界时局的话题。）<br>用年表读懂中国历史<br>影响未来的新科技新产<br>英国史：全2册 (一部解读大英帝国崛起的皇家巨著。)<br>议事的科学<br>伊斯坦布尔：面纱下的七丘之城(读城系列)<br>一战简史_二战简史<br>一个投资家的20年（第2版）<br>夜莺<br>夜光的阶梯<br>雪珥-中国改革史系列（共三册）<br>性心理学（<br>心商<br>侠隐（姜文电影《邪不压正》原著小说）<br>无处停歇<br>我与你<br>我们的革命<br>未来的冲击<br>未来版图：全球聪明公司的科技创新趋势和商业化路径<br>为什么精英都是时间控<br>为何越爱越孤独（升级版）<br>危机经济学<br>图分析与可视化：在关联数据中发现商业机会<br>投资最重要的事（全新升级版）<br>统计学关我什么事：生活中的极简统计学<br>唐史并不如烟系列（共6册）<br>太年轻<br>算法的陷阱：超级平台、算法垄断与场景欺骗<br>思想的力量<br>水平思考：如何开启创造力<br>数据不说谎：大数据之下的世界<br>时间旅行者手册：从维苏威火山爆发到伍德斯托克音乐节<br>失踪的总统（2018年世界出版大事件，美国前总统克林顿长篇政治悬疑小说，揭秘最高白宫权力层幕后不为人知的故事）<br>圣殿春秋<br>烧掉你的商业计划书（最真实、可实践、接地气的创业方法）<br>沙丘4：沙丘神帝（伟大的《沙丘》系列，每个“不可不读”的书单上都有《沙丘》！）<br>扫地出门： 美国城市的贫穷与暴利<br>桑德斯上校：肯德基创始人的商战传奇<br>如何高效写作<br>人性的因素</em> 毛姆短篇小说全集2<br>人类符号简史（一部跨越人类想象世界和经验世界的思维颠覆史）<br>权力的转移<br>情境影响力<br>情感勒索：助你成功应对人际关系中的软暴力<br>企鹅与怪兽：互联时代的合作、共享与创新模式<br>年羹尧之死<br>魔鬼辞典<br>明治天皇：1852—1912（纪念碑式的传记伟作，一幅栩栩如生的明治天皇丰满肖像） (理想国译丛)<br>美国增长的起落<br>麦肯锡用人标准<em>未来的人才标竿<br>迈尔斯社会心理学套装(第8版 共4册） (社会心理学大众读本)<br>罗茜效应<br>邻人之妻<br>列奥纳多·达·芬奇传<br>跨界联动：告别单体经济<br>科学也反常：“科学咖啡馆”怪谈<br>精英必修课：清单<em>Excel_方法_时间（全四册）<br>精益思想丛书共9册（《精益思想》、《改变世界的机器》、《现场改善》、《六西格玛管理法》等）<br>经济的律动：读懂中国宏观经济与市场<br>经济的本质<br>金钱暗流<br>解密腾讯帝国（全6册）<br>街头巷尾：十九世纪中国人的市井生活<br>奖励的恶果<br>技术简史<br>即兴演讲：掌握人生关键时刻<br>货币强权：从货币读懂未来世界格局<br>黄帝内经说什么6本套装<br>合作的财富：获取合作红利的7个关键要素<br>好的爱情：陈果的爱情哲学课<br>哈佛商学院谈判课<br>国家治理与世界秩序（理想国译丛主题作品集 包含金与铁、创造日本、国家构建等 五册）<br>规划力：如何清晰预见成功轨迹<br>广州贸易——中国沿海的生活与事业（1700～1845）<br>寡头</em> 新俄罗斯的财富与权力 (译文纪实)<br>顾拜旦传（“奥林匹克之父”顾拜旦男爵传记小说，带你重温现代奥运复兴之路）（上下册合集）<br>故事课套装<br>给忙碌者的天体物理学[百科超注版]<br>高盛帝国(套装上下册)_全球唯一一部全面讲述高盛百年屹立的企业传记<br>峰会：影响20 世纪的六场元首会谈<br>分享经济时代（套装6册）<br>恶童安伦<br>对白：文字、舞台、银幕的言语行为艺术<br>锻炼改造大脑 (心视界)<br>读书毁了我<br>缔造和平：1919巴黎和会及其开启的战后世界<br>第三次浪潮<br>帝国的背影系列（套装共3册）<br>丹·布朗作品系列：本源<br>大国外交三部曲（套装三册）<br>大国大城（聚焦上海发展道路，呼吁取消人口自由流动门槛，逃回北上广！）<br>从量子到宇宙——颠覆人类认知的科学之旅<br>从1到N：企业数字化生存指南<br>创新者的基因<br>成长到死<br>陈春花最新财经管理系列套装（共16册）<br>超越无穷大：一次跨越数学边界的冒险之旅<br>超强大脑<br>超空间<br>超级精力管理术：你的精力管理决定你的人生层次 (普华自我管理系列图书)<br>草原帝国（法兰西学院院士的经典代表作）<br>不太多，不太少<br>比赛中的行为经济学：赛场行为与比赛胜负的奥秘<br>百岁人生：长寿时代的生活和工作<br>把不安当作朋友：如何直面我们内心的冲突<br>奥吉和我（《奇迹男孩》姊妹篇，<br>安静的美国人<br>【精品汇-308】西游八十一案：大唐泥犁狱<br>【精排】沙丘三部曲<br>[武志红导读版] 我们内心的冲突<br>AI进化论：解码人工智能商业场景与案例<br>20世纪简史：从无线电到柏林墙<br>2018高效行动指南系列（共9册）<br>10W_走心文案是怎样炼成的<br>100亿个明天<br>自由意志：用科学为善恶做了断<br>自我的智慧<br>子弹笔记术<br>资本主义简史<br>卓越密码：如何成为专家<br>终有一天你会懂<br>终身学习：10个你必须掌握的未来生存法则<br>中国哲学小史<br>智慧社会：大数据与社会物理学 (财富汇)<br>智慧城市2.0：科技重塑城市未来<br>直播营销<br>政府的边界<br>正义之心：为什么人们总是坚持“我对你错”<br>战略几何学：战略议题的思维工具<br>战后日本经济史<br>运营的套路：从想法到产品落地全程解析<br>元数据：用数据的数据管理你的世界<br>毓老师说易经(全3册)<br>御谜士三部曲<br>印加帝国的末日（甲骨文系列）<br>亿万：围剿华尔街大白鲨<br>一本小小的蓝色逻辑书_一本小小的蓝色记忆魔法书（两册套装）<br>养育女孩（成长版）<br>亚洲史概说（<br>亚历山大三部曲（天堂之火_波斯少年_葬礼竞技会）<br>雪球系列_手把手教你读财报_投资的本源_超越专业投资等(套装共6册)<br>许子东现代文学课<br>幸福的最小行动<br>新视角全球简史4本（套装）_玫瑰战争简史立_美国独立战争简史_诺曼人简史_英国文艺复兴戏剧简史<br>新商业经济模式系列（套装共5册）<br>新媒体写作平台策划与运营<br>新媒体革命2.0：算法时代的媒介、公关与传播<br>新零售：吹响第四次零售革命的号角<br>新编Office 2016应用大全（实战精华版） (Office办公无忧)<br>谢谢你迟到：以慢制胜，破题未来格局<br>小小陌生人<br>西方的智慧：从苏格拉底到维特根斯坦（全译本）<br>物质的秘密：藏在微观粒子里的神奇世界<br>无声告白_小小小小的火(套装共2册)<br>乌合之众：群体心理学（作家榜经典全译本插图珍藏版） (作家榜经典文库)<br>我身在历史何处<br>我的生活不可能那么坏<br>我的孤单，我的自我：单身女性的时代（一部单身的通俗史，三十位女性的故事）<br>文案创作完全手册（文案大师教你一步步写出销售力，畅销美国30年，资深广告人的超实用文案秘诀！） (小学堂)<br>瘟疫与人<br>为生命而阅读<br>微信营销与运营<br>微博营销与运营<br>万物起源：从宇宙大爆炸到文明的兴起<br>统计学七支柱<br>铁血蒙元<br>提升你的沟通技能(第四版)<br>腾讯战略法<br>唐望三部曲（套装共3册）【畅销欧美五十年！出版以来被翻译成二十几种文字！在70年代的西方被誉为“新时代思潮的开山力作”！摇滚巨星约翰·列侬、天才诗人吉姆·莫里森都是它的超级粉丝！】<br>探索生命系列：缤纷的生命_生命的未来（共2册）<br>所谓人际高手 就是让人舒服<br>算法之美：指导工作与生活的算法<br>苏珊·福沃德心理学经典作品集（三册套装）<br>四夷居中国：东亚大陆人类简史<br>四个维度的教育：学习者迈向成功的必备素养<br>谁说你不能坚持<br>市场真相：看不见的手与脱缰的马<br>声律启蒙)<br>生命3.0<br>生活需要仪式感<br>升维：争夺产品认知高地的战争<br>深度探索区块链：Hyperledger技术与应用 (区块链技术丛书)<br>深度管理<br>上帝的手术刀：基因编辑简史<br>商业的逻辑：正和岛智库揭秘新经济大趋势<br>如何对抗电商：日本零售企划专家教你提升服务的细节（套装共6册）<br>如果你再勇敢一点<br>认识身体<br>认识商业<br>人生拼图版<br>权力·制度·文化：国际关系理论与方法研究文集(第二版)<br>情绪是什么<br>亲和力：11法则激活完美人际关系（钻石版）<br>七堂极简哲学课：写给大忙人的哲学启蒙书<br>品牌三部曲3_品牌领导<br>品牌三部曲2_创建强势品牌<br>品牌三部曲1_管理品牌资产 (品牌三部曲：1)<br>诺基亚总裁自述_重压之下<br>牛津女学霸的30年职场观察录 (英国《金融时报》特辑)<br>你要如何衡量你的人生<br>内向谈判力（完整图文版）（每个人的首场谈判，都是面对自己。）<br>棉花帝國<br>迷人的数学：315个烧脑游戏玩通数学史<br>逻辑说服力_如何有逻辑地说服人<br>冷启动：零成本做营销<br>郎咸平说（套装共12册）<br>肯·福莱特悬疑经典：致命谎言（各国读者平均1个通宵读完！）<br>经济指标简史<br>金融投资400年_投资者必读金融理财宝典<br>假如真有时光机<br>迦梨之歌<br>基因魔剪：改造生命的新技术（超级有力的诺贝尔奖候选项目，《Science》年度十大科学突破之首）<br>活下去的理由<br>唤醒创作力：写给被“卡”住的创作者<br>荷尔蒙战争<br>汉密尔顿传(美国二百年国运的真正缔造者：我们只能坚持美国优先政策)<br>海外并购交易全程实务指南与案例评析<br>海的那一边<br>哈佛商业评论·职场赢家必备：高效工作，快乐生活【精选必读系列】（获知情绪管理、复原力、工作生活双全法则）<br>哈佛商学院最受欢迎的营销课<br>国王的两个身体（“经典与解释”书系重磅经典，2018年人文阅读，揭开民族国家的神圣谱系） (西方传统·经典与解释)<br>国家的兴衰<br>故事经济学<br>股市进阶之道：一个散户的自我修养<br>高维度思考法：如何从解决问题进化到发现问题<br>高难度对话：《跟任何人都聊得来》精进版<br>富有的习惯（揭秘富人与穷人的根本差距！27条“富有的习惯”，决定你一生财富！）<br>复杂经济学：经济思想的新框架<br>粉红牢房效应：绑架思维、感觉和行为的9大潜在力量<br>反脆弱：做一个内心强大的人<br>段子：人生何求<br>读懂中国改革5：如何应对未来十年<br>第五次开始<br>地中海争霸史<br>道家思想及其现代诠释<br>大脑勇士<br>大脑简史<br>大国工程<br>从无穷开始：科学的困惑与疆界<br>从零开始学运营<br>创业的艺术2.0：创业者必读手册<br>传播的进化：人工智能将如何重塑人类的交流<br>超越战略：商业模式视角下的竞争优势构建<br>产品经理必修课：上瘾＋体验为王＋产品经理方法论＋用户体验方法论（套装共４册）<br>拆掉思维的墙（套装9册）<br>布克奖小说通览<br>博弈与社会<br>镖人2（读客文化出品。轰动日本的中国漫画！《镖人》第二册轰动上市！漫画大师高桥留美子、藤泽亨，知名作家马伯庸，知名动画导演田晓鹏鼎力推荐！）<br>半小时漫画中国史3（“混子曰”创始人陈磊（二混子）全新力作，看半小时漫画，通三千年历史，用漫画解读历史，开启读史新潮流。）<br>百年流水线：一部工业技术进步史<br>暗网(全面深入揭秘“黑暗版淘宝”暗网的幕后世界和操纵者 现实中所有的罪恶，在暗网中，都是明码标价的商品。)<br>暗黑者四部曲（“高智商悬疑小说”大师周浩晖经典代表作，原名《死亡通知单》，中国高智商犯罪小说扛鼎之作。）<br>癌症的真相<br>《创新简史：从石斧到爆品》_激发创新灵感、揭秘知名企业创新成败的一本书;蜻蜓FM财经类签约作者、互联网行业观察者杨旸多年行业研究思考总结。<br>Python神经网络编程（异步图书）<br>Apache Kafka源码剖析<br>13次时空穿梭之旅<br>自我成长的力量（新民说）<br>资本的规则<br>注意力经济<br>重塑幸福：如何活成你想要的模样（改变二百万纽约人的心灵“断舍离”）<br>重思资本主义：实现持续性、包容性增长的经济与政策<br>重来_更为简单有效的商业思维<br>重读八十年代<br>中国近代思想与学术的系谱（增订版）<br>制度与繁荣<br>知识管理——为业务绩效赋能<br>知识大迁移：移动时代知识的真正价值<br>正面思维，创造幸福（定义个人幸福目标，运用吸引力法则，掌握正面思维秘诀，创造幸福生活。）<br>这不是你的错：海灵格家庭创伤疗愈之道<br>哲学家们都在想什么？<br>在耶鲁精进：成为专才之前;先成为通才(1)<br>云彩收集者手册<br>与圣人较真：跳出盒子的想法<br>有序：关于心智效率的认知科学<br>优雅的力量_让你脱颖而出的4种特质修炼<br>用户网络行为画像_大数据中的用户网络行为画像分析与内容推荐应用<br>永远的零售：厉玲的零售经营哲学<br>隐形人格<br>异类的天赋<br>一言力<br>一万年的爆发：文明如何加速人类进化<br>一本书读懂创投税<br>研究怪兽的人<br>薛兆丰经济学讲义<br>虚张声势：欧美央行的出牌逻辑与宏观调控思路<br>修炼影响力（《哈佛商业评论》2018年第4期）<br>新媒体运营实战技能 (互联网_新媒体营销规划丛书)<br>新媒体营销概论<br>新媒体文案创作与传播 (互联网_新媒体营销规划丛书)<br>小小小小的火(《无声告白》作者重磅新作，2017美国年度小说桂冠！）<br>项目管理知识体系指南（PMBOK指南）（第6版）<br>文明寻思录（第二辑）：中国新商道与商业新未来<br>玩转科学的“艺术家”.下册<br>图解物联网 (图灵程序设计丛书)<br>图解万物简史<br>塑造世界经济的50项伟大发明<br>思维跃迁： 投资回报率超N倍的理财书系列<br>思维简史<br>私募的进化：金融超级蓝海中的跌宕十年<br>私家珍藏人文书库（套装共16册）<br>数学现场：另类世界史<br>数据产品经理必修课：从零经验到令人惊艳<br>士大夫政治演生史稿<br>使节<br>时间的悖论：关于时间观的科学<br>失衡：为什么我们无法摆脱肥胖与慢性病<br>生命的未来 (媲美薛定谔《生命是什么》、 开启人造生命时代的引领之作、 刘慈欣、姬十三鼎力推荐)<br>深度营销：解决方案式销售行动指南<br>社群营销与运营 (互联网_新媒体营销规划丛书)<br>三磅宇宙与神奇心智<br>如何记忆<br>如何获得真正的财富<br>人生算法：已被证实的使个人和团队变得更好的15个套路<br>人生如逆旅，我亦是行人<br>人工智能的进化<br>人不过如此<br>穷查理宝典（珍藏本）<br>清明上河图密码：隐藏在千古名画中的阴谋与杀局（套装1-5册）(读客文化出品。全画824个人物逐一复活！超过20种推理诡计，多达80件悬案奇案！<br>清单人生(《外婆的道歉信》之后的故事。每个人都有自己的“重新开始”，而每个重新开始的人，都值得鼓舞。)<br>企业文化生存与变革指南 (卓越领导之道书系)<br>企业家的尊严——为什么经济学无法解释现代世界 (西方现代思想丛书)<br>奇妙数学史.数字与生活<br>你不理财，财不理你：30岁后，我靠投资生活（套装全二册）<br>能力都是逼出来的（纽约时报畅销书作家、高效能学院创始人布兰登·伯查德作品！《牧羊少年奇幻之旅》作者保罗·科埃略推荐！）<br>那不勒斯四部曲NO.4：失踪的孩子（全球畅销近千万册，HBO真人电视剧热拍中，两个女人50年的友谊和战争）<br>内容算法：把内容变成价值的效率系统<br>明年更年轻：欧美精英人士逆转生理时钟的关键法则<br>民国趣读系列（共5册）<br>迷人的温度<br>美丽的心灵系列共3册<br>猫次元：中国吸猫现象研究报告<br>罗伯特议事规则<br>路人甲：99%的社交红利来自那些意想不到的人<br>领导力的五项修炼<br>廉价的代价：资本主义、自然与星球的未来<br>连接：顾客价值时代的营销战略<br>来自东方的他者：中国古诗在20世纪美国诗学建构中的作用<br>啃碎词源：考研英语单词速记宝典<br>科学学习：斯坦福黄金学习法则<br>科学推理：逻辑与科学思维方法<br>看人的艺术<br>绝对自控<br>精简社交：用可视化图谱解决人际关系难题<br>金融战争：金融资本如何在全球掠夺财富<br>今天你哲学了没？（套装共5册）<br>结构化决策力：成为你想成为的自己<br>鉴若长河<br>简法<br>家政阿姨口述实录<br>极简思考：来自世界顶尖咨询公司的高效工作法<br>基督教与近代中国教育<br>火神<br>华章经管经典：用户分析和社群运营系列丛书（共6册)<br>华章经管经典：投资的基本素养，这些都是你要了解的系列丛书（共4册）<br>华章经管经典：经济.民智.经典系列，更深层次了解经济的逻辑（共5册）<br>华为管理变革<br>花钱的艺术<br>横越未知<br>黑箱社会：控制金钱和信息的数据法则<br>合作的财富：获取合作红利的7个关键要素<br>规模<br>管理美元<br>高手秘籍套装（全2册）<br>高情商谈判<br>疯狂行动力<br>风格感觉：21世纪写作指南<br>丰田一页纸极简思考法<br>非显著趋势<br>法显术见：检察官赵鹏的干货日志<br>多舛的生命：正念疗愈帮你抚平压力、疼痛和创伤（原书第2版）<br>帝国几何系列（全三册）<br>大数据之眼：无所不知的数字幽灵<br>大汉王朝的三张脸谱（全三册）<br>大国宪制：历史中国的制度构成<br>错误的行为_助推_赢家的诅咒（理查德·塞勒套装3册）<br>从行动开始<br>陈舜臣说史记：帝王业与百姓家<br>超越人类(美国基因政策专家带你了解未来医学、未来社会，以及未来的挑战。)<br>别相信他的脸<br>辩论的艺术<br>邊緣商機<br>半小时漫画中国史2<br>百年法（全2册）<br>奥古斯都<br>爱伦·坡短篇小说集<br>10秒沟通：跟任何人都聊得来的高效沟通术<br>作文四书：《讲理》《作文七巧》《作文十九问》《文学种子》<br>总能让你赢的101个怪诞心理游戏<br>终极感知：跑赢未来的8大预见<br>中日之间：忆与思(套装2册 甲骨文系列 甲午两甲子_中日之间）<br>中日之间：误解与错位 (甲骨文丛书)<br>中间人经济：经纪人、中介、交易商如何创造价值并赚取利润<br>这才是我要的工作<br>哲学·科学·常识<br>掌控未来系列（套装共6册）<br>增长黑客实战<br>运营本源<br>欲罢不能：刷屏时代如何摆脱行为上瘾<br>语言风格的秘密：语言如何透露人们的性格、情感和社交关系<br>愉悦哲学<br>意会时刻：用人文科学解决棘手的商业难题<br>以读攻读<br>一页纸工作整理术（餐巾纸系列）<br>一页纸创意思考术<br>一本书看透信贷：信贷业务全流程深度剖析<br>叶圣陶夏丏尊谈阅读与写作（套装共5册）<br>寻找回忆的人<br>学习和认知升级经典书<br>心智力：商业奇迹的底层思维<br>斜杠创业家<br>晓松奇谈4册套装（世界卷_人文卷_情怀卷_命运卷）<br>像阿德勒一样思考和生活<br>我最需要的理财常识书<br>我与卡明斯基<br>我未尽的苦难<br>未名社科·大学经典<br>同步<br>挑战认知边界：怪诞又实用的枕边书（共10册）<br>腾讯产品法<br>算法图解 (图灵程序设计丛书)<br>思想史：从火到弗洛伊德<br>谁在世界的中央：古代中国的天下观<br>数学思维秘籍系列（全七册）<br>数学传奇：那些难以企及的人物<br>首席品牌官日志<br>适者降临<br>失控的真相<br>神话的智慧<br>社交的尺度<br>商业的本质套装（全3册）<br>如何管好猩猩，用对猴子：把“乌合之众”铸造成精英<br>如何成为有效学习的高手 mobi<br>人类进化史诗系列（全六册）<br>人格心理学套装（第2版 全6册 精华本）<br>权力之路<br>权力与荣耀 (译文名著精选)<br>区块链开发系列3册（共3册）<br>钱：7步创造终身收入<br>期权、期货及其他衍生产品<br>品味传统文学之美（套装11册）<br>那些比拼命努力更重要的事_哈佛大学研究了75年的幸福课<br>暮日耀光_张居正与明代中后期政局(套装上下册)<br>魔鬼物理学（套装3册）<br>秘书工作手记——办公室老江湖的职场心法<br>梦的真相<br>美国总统经济学<br>卖掉法拉利的高僧”系列之获得圆满人生的7项美德<br>逻辑学是什么<br>罗马：一座城市的兴衰史<br>流量池<br>零秒思考<br>零秒工作<br>恋情的终结<br>历史的温度：寻找历史背面的故事、热血和真性情<br>历史的温度2：细节里的故事、彷徨和信念<br>看懂世界冲突的一本书<br>绝佳提问：探询改变商业与生活<br>精准推送<br>精准努力<br>经济奇点<br>进化拼图系列（共两册）<br>解离的真实：继续与唐望的对话<br>解放军为什么能赢：写给新一代人看的军史<br>阶层跃迁<br>交人先交心<br>降临（又名《你一生的故事》）（ 年度科幻大片，IMDb口碑爆棚，1月20号内地上映） (译林幻系列)<br>见识-商业的本质和人生的智慧<br>简明大历史<br>价值型销售<br>家族财富保障及传承<br>极致阅读手册<br>互联网商业的下半场：打造以人性为圆心、以科技为半径的商业模式<br>好好赚钱<br>硅谷工程师爸爸的超强思维训练课<br>宫崎市定人物论<br>工匠精神：缔造伟大传奇的重要力量【锤子科技CEO诚意推荐】<br>付费：互联网知识经济的兴起<br>丰子恺艺术四书（共4册）<br>繁荣的代价<br>洞察：精确观察和有效沟通的艺术<br>大英帝国的崩溃与美国的诞生<br>大脑整理术<br>从零开始做产品经理：产品经理的第一本书<br>创业理财必修课（套装共7册）<br>创业不死法则<br>穿过迷雾：巴菲特投资与经营思想之我见<br>冲破消极的自我<br>成为数据分析师：6步练就数据思维<br>超级营销必修课（套装全8册）<br>畅销的原理<br>财务自由之路（7年内赚到你的第一个1000万）<br>财富与权力：乔姆斯基解构美国梦终结的10个观点<br>不会讲故事，怎么带团队<br>不测的秘密：精准测试之路 (实战)<br>别想那只大象<br>被记住，你才能赢<br>半小时漫画中国史（修订版） (这本史书真好看文库)<br>半小时漫画世界史<br>白话区块链<br>把话说到点子上<br>艾柯谈美丑：美的历史·丑的历史(套装共2册)<br>埃森哲《展望》卓越绩效系列（套装书共9本）<br>阿德勒心理学经典（套装共4册）<br>《知道点世界历史》<br>自我实现的宇宙：科学与人类意识的阿卡莎革命<br>卓越行动力 90天后 遇见全新的自己<br>中国文化常识全集（套装共3册）<br>中国财政史十六讲_基于财政政治学的历史重撰)<br>真正全集：王阳明全集<br>运营其实很简单：互联网运营进阶之道<br>允许被说服<br>阅读写作技巧指南<br>鱼河岸小店<br>优秀的人,从来不会输给情绪<br>营销革命3.0_从产品到顾客,再到人文精神 (新经济必读丛书)<br>页岩革命：新能源亿万富豪背后的惊人故事<br>压榨式提问（和高手对话时，如何通过压榨式提问获取对方毕生功力。）<br>学习才是你赢得成功的唯一资本（《哈佛商业评论》增刊）<br>雄性衰落<br>行为投资学手册：投资者如何避免成为自己最大的敌人<br>行动的勇气_金融危机及其余波回忆录<br>新管理革命：知识经济如何重塑组织和管理<br>心理学理论怎么用（全7册） (心理学经典理论应用书系)<br>销售谈判管理制胜套装8册<br>相处的艺术：让人际关系提升你的幸福感（原书第5版）<br>贤二机器僧漫游人工智能<br>西方经典哲学合集（新华文轩经典通读）（共19册）<br>我知道他想看什么：用内容营销打造品牌影响力<br>我们为什么不说话<br>我们人类的进化：从走出非洲到主宰地球<br>头脑风暴升级 问题爆炸法（《哈佛商业评论》2018年第3期）<br>统计数据会说谎<br>同理心：高同理心人士的六个习惯<br>通往幸福的教育<br>太平洋战争系列：《山雨欲来》《铤而走险》《不宣而战》（全三册）<br>思维导图阅读与写作系列（套装共3册）：思维导图阅读法_高分作文秘笈_创意高手的超强思考工具<br>数据思维：从数据分析到商业价值<br>是非区块链：技术、投机与泡沫<br>试错力<br>时间，快与慢<br>胜出：非掠夺社交智慧与共享式领导力<br>深度学习：彻底解决你的知识焦虑<br>社会心理学精品译丛套装（共7册）<br>萨缪尔森经济学精选套装（第19版 共4册） (最后的宣言译丛)<br>如何活出生命的意义（美国图书馆协会年度排名前25位好书之一）<br>认知差：你比人生赢家差在哪？<br>人生没有后悔药<br>热点：引爆内容营销的6个密码<br>请停止无效社交<br>情绪勒索<br>跑着思考：人、狗、意义和死亡<br>欧洲文明史精品系列（8册）<br>您厉害，您赚得多<br>你的降落伞是什么颜色？<br>麦肯锡核心出版物《麦肯锡季刊》系列（套装书共8册）<br>麦肯锡工作法套装四册（轻松职场系列）<br>克莱因文集（经典套装全4册）<br>精准表达电子书<br>皆为戏言_新媒体时代的说话指南（秦朔、陈铭 、张力奋 诚意推荐）<br>讲故事<br>假性亲密关系<br>极客生活：我的第一本科学生活用书<br>机关秘书实用必备全书<br>回荡的钟声 互联网金融九堂课 经济的限度 中国做对了什么<br>互联网运营之道（套装全8册）<br>互联网供应链金融<br>好人为什么会作恶<br>告别失败感：正视工作、情感与生活中的失望情绪<br>高兴死了（我正在人生低谷，我现在高兴死了）<br>高效阅读<br>高效能时间管理术（第四版）<br>高难度沟通_麻省理工高人气沟通课<br>发现心流：日常生活中的最优体验<br>东尼·博赞思维导图系列(套装共7册)<br>地缘政治系列(套装共5册)<br>大宋帝国套装全3册<br>创新的创新：社会创新模式如何引领众创时代<br>超级运营术<br>常青：如何持久吸引客户（谷歌、星巴克等500强都在用的客户留存指南）<br>查理·芒格的原则<br>财富的理想国　关于财富的117条法则<br>比特币和数字货币初学指南（详解比特币和数字货币的基本知识与操作指南）<br>爆睡术：睡眠障碍心理分析实录<br>巴菲特致股东的信：投资者和公司高管教程（原书第4版） (华章经典·金融投资)<br>巴菲特之道（原书第3版）<br>八堂极简科学课<br>7分钟理财<br>30天精读MBA：世界知名商学院12 门课程精华（第四版）<br>20世纪的全球史：一个时代和一个瞬间(套装2册 甲骨文系列 摩登时代_午夜将至）<br>12堂魔力数学课<br>走红：如何打造个人品牌，成为下一个斜杠青年！<br>自律力（全世界成功人士都在践行的生活理念）<br>资深HR是如何炼成的？（套装共12册）<br>哲学起步<br>曾国藩智慧精髓大合集（曾国藩家书_挺经_冰鉴）套装共三册<br>在苍茫中传灯_一个投资者20年的知与行<br>约瑟芬·铁伊.推理全集<br>有效学习<br>有钱人和你想的不一样<br>意志力<br>易中天品读中国(2018全新修订版)(套装共6册)<br>以客户为中心<br>医院骑士团全史<br>虚拟人 (机器人与人工智能书系)<br>行为社会科学基本问题<br>新制造时代<br>新零售的未来<br>心灵晴雨图：河合隼雄谈自我认知<br>心的栖止木：河合隼雄谈心灵疗愈<br>协同的力量<br>嬉笑怒骂李敖大全集（套装10本）<br>无所事事的艺术<br>伟大的中国工业革命——“发展政治经济学”一般原理批判纲要<br>微粒社会<br>痛点：挖掘小数据满足用户需求<br>思维版图<br>数字经济2.0<br>手把手教你玩脱口秀<br>十字军的故事（全4册）<br>失败课（初创者和投资者的创业秘籍，1000个失败案例提炼的6步思维法，教你抵御初创谜潮。不是复制成功，而是规避失败！） (博集成功法则系列)<br>神经科学讲什么<br>身份危机<br>社交销售：人人都是销售员<br>商业模式创新设计大全：90%的成功企业都在用的55种商业模式<br>如何有效整理信息<br>如何系统思考<br>如何打造你的独特观点<br>认知升级<br>人机平台：商业未来行动路线图<br>平台革命：改变世界的商业模式<br>平均的终结：如何在崇尚标准化的世界中胜出<br>纳博科夫短篇小说全集 (纳博科夫作品系列)<br>魔鬼老大，天使老二：智能时代的个性化家庭教育<br>美国文明三部曲（全3册）<br>逻辑思维</em> 拥有智慧思考的工具<br>逻辑工作法<br>零基础学理财<br>老子之道<em>白云先生全新解读《道德经》；揭开书中尘封几千年的大道真义，治国安民的至道真言；养身兴家功成，天下万安<br>科学素养书系（套装共三册）<br>靠谱：顶尖咨询师教你的工作基本功<br>巨婴国<br>坚毅<br>价值为纲_华为公司财经管理纲要<br>基因社会<br>会讲故事才是好演讲<br>华杉讲透经典（共3册）（《孙子兵法》、《论语》、《孟子》）<br>互联网经济三部曲：《数字经济》_《分享经济》_《互联网_》（马化腾作品）<br>海滩上的爱因斯坦<br>哈佛商业评论·如何留住你的客户【精选必读系列】（全6册）（数字时代，如何留住你的顾客！）<br>怪诞行为学（全四册）（新版）<br>共鸣的灵魂：河合隼雄谈幸福 (入选2017年度“影响教师的100本书”，入围新京报书评周刊2017年度好书)<br>个体崛起（城市野心家陈立飞（Spenser）的职场励志新作，教你用高效方法循序渐进地撑起自己的野心。）<br>感知力：最重要的生存力与最强大的影响力 (湛庐文化•心视界)<br>概率的烦恼<br>富可敌国_对冲基金与新精英的崛起 (湛庐文化•财富汇)<br>复杂：信息时代的连接、机会与布局<br>疯传·传染（套装共2册）<br>读佛即是拜佛（全4册）<br>叠被子：海军上将的人生攻坚训练<br>地中海史诗三部曲（珍藏版全三册）<br>笛卡尔的错误：情绪、推理和大脑<br>大学与大师：清华校长梅贻琦传<br>大人的友情：河合隼雄谈友谊<br>从黎明到衰落_西方文化生活五百年,1500年至今（上下册）<br>刺杀骑士团长<br>创造自然：亚历山大·冯·洪堡的科学发现之旅<br>成长之痛：建立可持续成功组织的路径图与工具<br>超越理智：神经科学揭示情绪为何失控<br>白金数据<br>巴菲特的估值逻辑：20个投资案例深入复盘<br>《企鹅沟通力系列》合集(一天学一章，用一周时间学会管理大师的理论精华)<br>10人以下小团队管理手册（专为零基础主管量身打造的实用管理指南，日本人事咨询专家20年经验的集大成之作！）<br>中国大历史（全9册） - 中国大历史系列编委会<br>指数基金投资指南 - 银行螺丝钉<br>语文一生（套装4册） - 从维熙 &amp; 刘心武 &amp; 梁晓声 &amp; 李国文<br>有毒的逻辑：为何有说服力的话反而不可信 - 罗伯特 J.古拉（Robert J. Gula）<br>英国《金融时报》原文阅读精选集（套1_套2_套3 共30册） (英国《金融时报》特辑) - 英国《金融时报》<br>一切都与广告有关：成功吸引顾客购买的秘密 - [美]乔什·韦尔特曼<br>刷新：重新发现商业与未来 - 萨提亚·纳德拉<br>失序时代 - [美]理查德·哈斯<br>神经漫游者：重启蒙娜丽莎（科幻小说宗师、赛博朋克之父威廉.吉布森的经典名作） - （美）威廉.吉布森（William Gibson）<br>神经漫游者 - （美）威廉·吉布森<br>前沿趋势预测系列（共9册） - 安东尼·范·阿格塔米尔 &amp; 弗雷德·巴克 &amp; 布雷特·金著 &amp; 比约恩·布劳卿 &amp; 拉斯·拉克 &amp; 托马斯·拉姆什 &amp; 杰夫·科尔文 &amp; 皮埃罗·斯加鲁菲 &amp; 牛金霞 &amp; 闫景立 &amp; 约翰·C·黑文斯 &amp; 等夫金 &amp; 黛安娜·马尔卡希<br>零伯爵 - 姚向辉<br>历史博物馆：一套get所有知识点（全9册）（《中国通史》等史学成名作，“现代中国四大史学家”钱穆、吕思勉力荐） - 吕思勉 &amp; 郑振铎 &amp; 夏曾佑 &amp; 祝嘉 &amp; 戈公振 &amp; 卫聚贤 &amp; 潘天寿 &amp; 张亮采<br>浪潮（电影同名小说，被美国、德国、以色列列为公民教育必读本） - 托德·斯特拉瑟<br>可见的学习与思维教学：让教学对学生可见，让学习对教师可见（首次将全美最受追捧的“成长型思维模式” 运用课堂教学的权威指南） - （美）玛丽·凯·里琪<br>解码区块链<br>回荡的钟摆（知名经济学家许小年重磅新作！深度解析“中国模式”,中国经济改革步入深水区，探索市场化回归可能） - 许小年<br>哈佛商业评论·年后升职？先学会这些【精选必读系列】（全9册） - 哈佛商业评论<br>规则颠覆者（波士顿前总裁教你如何改变规则、对手和平台，轻松抢占利润蓝海！） - [日] 内田和成<br>工作是最好的修行 - 樊登<br>杠杆说服力：52个渗透潜意识的心理影响法则 - 凯文·霍根（Kevin Hogan）<br>对话最伟大的头脑大问题系列（套装共6册） - 约翰·布罗克曼(John Brockman)<br>电商产品经理宝典：电商后台系统产品逻辑全解析 - [中] 刘志远<br>当自我来敲门：构建意识大脑 - 安东尼奥·达马西奥<br>大江东去（全3册） - 阿耐<br>成交的秘密 (人生需要正能量-必读励志书系列) - 李昊轩<br>藏在地理中的历史学<br>蔡澜经典五部曲(套装共5册) ：蔡澜<br>彼得林奇投资经典全集<br>OKR：源于英特尔和谷歌的目标管理利器 - 保罗R.尼文（Paul R. Niven） &amp; 本·拉莫尔特（Ben Lamorte）<br>做自己人生的CEO：人人都需要的管理术<br>走近费曼丛书（套装共6册）<br>铁浆<br>旱魃<br>中医祖传的那点儿东西(2) (大国医系列)<br>中医祖传的那点儿东西(1) (大国医系列)<br>中央帝国的哲学密码<br>中国文化的性格<br>中国文化的精神<br>中国色彩【东瀛文人·印象中国】<br>中国经济2019<br>智慧书<br>张大小姐<br>战争的面目：阿金库尔、滑铁卢与索姆河战役<br>宇宙从一粒尘埃开始<br>有用的逻辑学<br>尤瓦尔简史三部曲<br>一眼识破真相的思考力<br>一个德国人的故事：哈夫纳回忆录，1914—1933<br>一本有趣又有料的科学书<br>雅贼典藏版（全11册）<br>寻找死亡的男人<br>血色子午线（美国当代文坛巨匠科马克·麦卡锡经典杰作，二十世纪最伟大的小说之一）<br>熊镇<br>幸福婚姻心理学（一本揭秘婚姻真相、改善婚恋关系的两性情感圣经！）<br>写给父母的未来之书：抓住0—7岁关键期培养一生的优势<br>像开创者一样思考：伟大思想者和创新者的76堂商业课<br>向死而爱<br>无印良品的整理收纳<br>无尽之夏<br>沃普萧丑闻 (约翰•契弗作品)<br>我是个怪圈<br>我们时代的精神状况<br>我发现了（完全修订版）<br>我忏悔<br>文学大师：松本清张杰作选<br>未来已来：数字化时代的商业模式创新<br>为什么精英都有超强专注力<br>往事与随想<br>网络心理学：隐藏在现象背后的行为设计真相<br>王国维与马衡往来书信<br>玩的就是规则<br>完美婚姻<br>斯坦福高效睡眠法<br>思辨与立场：生活中无处不在的批判性思维工具<br>谁偷走了美国梦：从中产到新穷人<br>数字货币投资宝典<br>世界观：现代人必须要懂的科学哲学和科学史（原书第2版）<br>十二个圣诞故事<br>生活轻哲学”书系（全11册）<br>社群营销与运营实战手册：电商引流_用户运营_活动策划_内容运营_品牌塑造<br>如何做出正确决定<br>如何才能不羞怯<br>日本合众国<br>人工智能不会做什么：100亿人类与100亿机器人共存的未来<br>全民自黑的英国：其实是一本全面的英国文化观察笔记<br>抢占心智<br>破茧成蝶2——以产品为中心的设计革命<br>品牌三部曲（戴维阿克系列）<br>欧洲与没有历史的人(文化人类学、政治经济学、后殖民和全球化论述诸领域的集大成之作。）<br>诺贝尔经济学奖经典收藏版【自由选择、生活中的经济学、增长的极限】（套装三册）<br>脑力升级手册<br>难道一切都是我的错吗？<br>那一天（摄影大师的自画像、人文摄影故事集）<br>那不勒斯四部曲<br>明史不忍细看<br>面具后的女人<br>蜜蜂与远雷<br>密室收藏家<br>美国创世记：埃利斯建国史系列（套装共4册）<br>卖掉法拉利的高僧<br>麻省理工科技创新(套装共四册)<br>两个世界的战争：2500年来东方与西方的竞逐<br>历史：详注修订本<br>理性之谜<br>理性的抉择：女性如何做决定<br>冷场<br>蕾蒂西娅，或人类的终结<br>朗读者系列(套装共4册)<br>考古的故事<br>进击的智人<br>极简西方哲学史<br>极简关系：职场成功，你需要处理好这四种关系<br>基督山伯爵（读客熊猫君出品，余华不吃不喝不睡，疯了般读完《基督山伯爵》！人类全部的智慧尽在其中！全三册一字未删完整版！） (读客经典文库)<br>机器70年 互联网、大数据、人工智能带来的人类变革<br>后谷歌时代：大数据的没落与区块链经济的崛起<br>好文案一句话就够了<br>哈佛通识读本：写给普通人的必修课（全6册） (博集经管商务必读系列)<br>哈佛决策课（哈佛商学院教授传授做出一个高质量决策的秘诀，吴晓波频道11月好书推荐）<br>哈佛极简经济学<br>哈佛、斯坦福、耶鲁大学经典课程分享（套装11册）<br>规模<br>故宫的古物之美<br>共生：未来企业组织进化路径<br>工匠精神：日本家族企业的长寿基因<br>给大家看的印度通史（印度史殿堂级作品）<br>高维度思考法：如何从解决问题进化到发现问题<br>高盛帝国(套装上下册)<br>高级男人手册_像拥抱女人一样拥抱生活<br>疯长：Facebook如何击败对手，指数时代的增长逻辑<br>反本能_深度思维_个体赋能（套装共3册）<br>发现东亚<br>二战中的巴黎：纳粹铁蹄下的欲望、背叛与死亡<br>读客经典文库：小妇人（全2册）<br>读客经典文库：三体全集（套装共3册）<br>洞见<br>冬泳<br>东西之道：《道德经》与西方哲学<br>订阅：数字时代的商业变现路径<br>迭代：新商业，新媒体与逆袭之路<br>地中海史诗三部曲（珍藏版全三册）<br>地平线2025_人工智能来了<br>大英帝国的崛起与衰落<br>大唐兴亡三百年<br>大江大河四部曲<br>打开一颗心<br>从商业和资本角度解读美国的崛起（《可口可乐传》_《摩根财团》<br>从1到N：企业如何实现持续高速增长<br>城市的张望<br>超级基因：如何改变你的未来<br>长物志<br>产品之旅：产品经理的方法论与实战进阶（双色）<br>伯纳黛特，你要去哪<br>别笑，我是正经哲学书<br>别让直性子毁了你<br>镖人(1-4卷）（读客熊猫君出品，轰动日本的中国漫画！）<br>全民寂寞的美国 ：其实是一本美国平凡小镇生活观察笔记<br>全民蠢萌的美国 ：其实是一本美国人日常生活观察笔记<br>奥斯曼帝国六百年：土耳其帝国的兴衰<br>埃勒里·奎因少年逻辑思维小说（11册套装）<br>阿里局<br>自私的基因：40周年增订版<br>自省之书<br>重新理解创业 ：一个创业者的途中思考<br>中信科技创新经典著作（套装共14册）<br>直觉泵和其他思考工具<br>哲学之美<br>掌控情绪，从来都不靠忍<br>在悖论中前行：物理学史话<br>余华作品全集(套装共13册)<br>英国人的故事<br>音乐入门：丰子恺音乐五讲<br>艺术及其背后的故事：米开朗琪罗与美迪奇家族（套装书全2册 甲骨文系列 米开朗_美第奇）<br>衣的现象学<br>学生街的日子<br>学会快乐<br>虚拟现实：万象的新开端<br>行为设计学：零成本改变<br>行为设计学：打造峰值体验<br>星尘（一部畅销20年的浪漫奇幻经典！《美国众神》作者尼尔·盖曼无比浪漫的奇幻经典！）<br>新零售：低价高效的数据赋能之路<br>写作这门手艺_普林斯顿大学写作课（美国书评人协会终身成就奖、普利策奖得主，公开讲述普林斯顿大学四十余年的写作课程）<br>写作是最好的自我投资<br>写给内向者的自我提升书4册套装 隐形人格_深度影响_爱自己的人自带光芒_恰到好处的挫折<br>写给大人的睡前故事<br>消失的星国<br>想象思维<br>希腊人的故事（全三册）<br>西方经典唐帝国研究两部曲<br>无所畏【冯唐2018全新作品，一部坦露自我的真诚之作！】<br>我的世界观<br>温柔的正义：美国最高法院大法官奥康纳和金斯伯格如何改变世界<br>未来之路<br>未来工作：智能时代的竞争力法则<br>未来的学校<br>王立铭·生命科学50讲<br>完全写作指南<br>挑战：压力如何塑造我们<br>天才赢在注意力<br>谈判就要搞懂心理学(套装4册）<br>算法霸权<br>四维人类<br>谁在收藏中国：美国猎获亚洲艺术珍宝百年记<br>刷屏：视频时代的疯传法则<br>数文明：大数据如何重塑人类文明、商业形态和个人世界<br>神探蒲松龄套装（共三册<br>神们自己<br>深度思维：透过复杂直抵本质的跨越式成长方法论<br>深度思考：不断逼近问题的本质<br>社会科学二十讲（从鲁滨孙漂流记开始讲起的社会科学故事书）<br>商学思维公开课套装共3册 隐性逻辑_1%法则_慢思考<br>如何阅读欣赏套装（全美备受欢迎的文学公开课教授托马斯·福斯特 ）<br>如何用数据解决实际问题(数据让洞见更准确，让沟通更简洁。）<br>如何想到又做到<br>如何控制负面情绪：风行美国60年的情绪自控力课程<br>如何戒掉坏习惯<br>日俄战争_起源和开战(套装共2册)<br>认知天性：让学习轻而易举的心理学规律（樊登推荐！）<br>权力之路<br>全译罗马帝国衰亡史(全12册)<br>驱动力：在奖励与惩罚已全然失效的当下，如何焕发人的热情<br>情感驱动<br>七堂思维成长课：精英群体的行为习惯<br>诺曼风云_拜占庭帝国_维京传奇 欧洲中世纪三部曲_燃烧的远征（套装共4册）<br>诺贝尔文学奖得主石黑一雄作品集（套装共8册）<br>女性脑<br>尼尔·盖曼奇幻经典：《美国众神》_《北欧众神》（共2册）（横扫所有世界级幻想小说大奖！囊括雨果奖、星云奖、轨迹奖、斯托克奖、SFX奖、格芬奖！）<br>奈飞文化手册<br>迷人的逻辑题<br>迷人的技术（让《科学》周刊主编开怀大笑的书，全球多位科学家与思想家幽默解答,改变未来的疯狂想法，亚马逊分类NO.1，读者评分8.2）<br>美好人生运营指南：哈佛MBA写给你的人生管理课<br>理解增长：Google 式增长为何遭遇质疑，如何实现真正的增长<br>老板，这种设计没人买！(优衣库、奥迪……六位经营领袖和设计师，六场顶尖访谈，为新经营者们画出对品牌发展的未来想象)<br>蓝色思维<br>肯•福莱特中世纪三部曲之：《圣殿春秋》_《无尽世界》<br>决策的大脑<br>经济的律动：读懂中国宏观经济与市场<br>经度：一个孤独的天才解决所处时代最大难题的真实故事<br>借东西的小人（全系列）<br>交际心理学（89个交际法则，超全面的社交问题“百科全书”，高情商的相处之道，帮你克服社交恐惧症，轻松成为交际达人）<br>简单的逻辑学<br>价值竞争：以客户为中心的销售转型<br>贾想1_贾想2（套装）<br>家·国·天下”系列三部曲（套装共3册）（文章入选中小学语文课本;著名作家梁晓声倾谈个人与家国历史）<br>基因中的人类简史<br>活好：我这样活到105岁<br>回答不了(感动千万读者，天才漫画家匡扶摇首部作品集)<br>皇帝腓特烈二世的故事（全2册）<br>荒诞医学史<br>黑匣子思维_我们如何更理性地犯错<br>高效工作法4册套装 极简思考_蜥蜴脑法则_清晰表达的艺术_全神贯注的方法<br>高敏感是种天赋Ⅱ（践行篇）<br>富爸爸点石成金_富爸爸21世纪的生意_富爸爸不公平的优势_富爸爸富人的阴谋_富爸爸财富大趋势（套装共五册）<br>二战史诗三部曲（珍藏版）<br>多样性红利<br>独抒己见<br>狄仁杰：大唐狄公案（全6册）<br>低欲望社会：“丧失大志时代”的新·国富论<br>单日人，双日人<br>大唐悬疑录<br>大思维：集体智慧如何改变我们的世界<br>创造的本源<br>超水平发挥<br>超人诞生：人类增强的新技术<br>产品经理精进课(第1辑)(套装共3册)<br>茶杯里的风暴<br>不乖：哈佛导师的自我突破心理学（畅销书《情感暴力》作者加藤谛三全新力作！）<br>保罗·柯艾略经典作品集（共3册，“牧羊少年奇幻之旅”系列作品）<br>八月炮火（精彩无比的一战经典之作） (理想国译丛)<br>5秒法则<br>11次奇妙自然探索之旅<br>自媒体之道<br>中信国学大典全集（套装共50册）<br>中华玄机：我要与你讲传统<br>中国制造2025工业控制与智能制造丛书(共6册)<br>中国思想史系列（套装共3册）<br>知名房地产投资者“水库论坛”版主“欧神”作品（套装2册）<br>遮蔽的天空<br>云梯：从新人到达人的职场进化论<br>与原生家庭和解<br>与神对话（全五卷）<br>有限与无限的游戏：一个哲学家眼中的竞技世界<br>英国王朝史：金雀花王朝与都铎王朝最辉煌的时刻（全2册 甲骨文系列 金雀花王朝_伊丽莎白女王）<br>英国史·全3卷（大英帝国的光荣与梦想）<br>亿万年的孤独：地外文明探寻史话<br>伊索寓言<br>一瓢纽约<br>一口气读完的人体秘密（套装共3册）<br>一出好戏<br>一本稀奇古怪的科学书<br>夜脑：在睡眠中自动学习的秘密<br>亚特兰蒂斯（全三册套装）<br>亚当夏娃在拂晓<br>幸福的科学<br>星座全书<br>小说的骨架：好提纲成就好故事<br>希腊神话故事集(诺奖作家霍桑写的希腊神话，名家翻译，涂鸦王国人气画师狮央精心绘图)(果麦经典)<br>五个人的战争：好莱坞与第二次世界大战（甲骨文系列）<br>文学经典怎么读：从IB中文到批判性阅读<br>未来算法进化系列（套装共5册）<br>未来工作法（未来职场的发展趋势，教你如何在未来的职场生存，面对新的工作方式有哪些必须掌握的技能。）<br>万能管家吉夫斯（共5册）<br>统计学的世界（第8版）<br>同情者(麦克阿瑟天才奖作家 第100届普利策小说奖获奖作品)<br>挑战认知边界：怪诞又实用的枕边书（共10册）<br>天才的编辑<br>探索人工智能系列（套装共4册）<br>泰普勒极简人生法则系列(套装共6册)<br>斯科特扬思维习惯高效全能套系（共4册）<br>数学极客：花椰菜、井盖和糖果消消乐中的数学<br>释放潜能：平台型组织的进化路线图<br>世界经济入门<br>时空的秘密<br>时间不存在<br>时机管理_完美时机的隐秘模式 (湛庐文化·财富汇)<br>时代三部曲<br>深思与省悟<br>如何欣赏一部电影<br>如何给狮子剥皮（一般人“闻所未闻”的趣味冷知识，来自大英图书馆的古老建议，维多利亚时代的自助指南。）<br>人工智能简史<br>亲爱的提奥：梵高传<br>潜意识与决策：泄露心思的无声告白<br>企鹅青少年文学经典系列（套装共10册）<br>七夏娃（套装全3册）<br>七个被绞死的人<br>葡萄园 (品钦作品)<br>骗局之王：查尔斯·庞兹自传<br>朋友圈的人际高手<br>你坏<br>你的生存本能正在杀死你：为什么你容易焦虑、不安、恐慌和被激怒？<br>尼尔·波兹曼系列：童年的消逝_娱乐至死（套装共2册）<br>南北战争三百年：中国4—6世纪的军事与政权<br>莫斯科绅士<br>美的情绪：西洋画派十二讲<br>玫瑰战争简史<br>罗马帝国的元老院<br>凛冬之棺<br>李筠·西方史纲50讲<br>冷启动：零成本做营销<br>兰亭序杀局.第1册<br>兰亭序杀局.3<br>兰亭序杀局.2<br>看懂世界格局系列全集（套装全六册）：大国博弈</em> 大国之略<em>石油战争_中国周边_用地图看懂世界格局_世界是红的<br>凯叔讲历史”系列·第一辑（套装全8册）<br>经济动物<br>经典重译系列（套装共3册）<br>经典常谈·文艺十六讲<br>金融帝国风云录（共5册）<br>解局：民国及建国初期的政局演变史（全2册 甲骨文系列 未了中国缘_国民党高层派系）<br>剑桥意大利史<br>剑桥美国史<br>剑桥德国史<br>简而美的哲学小史<br>季羡林：国学大师斑斓人生书系（全8册）<br>记忆魔法师<br>极致产品<br>极简心理学史<br>极简二战史<br>基于课程标准的STEM教学设计：有趣有料有效的STEM跨学科培养教学方案<br>黑石的选择<br>好习惯养成攻略<br>好奇心杂货铺：《经济学人》的万物解释<br>国家的启蒙：日本帝国崛起之源<br>官场现形记<br>高效算法：竞赛、应试与提高必修128例<br>房客<br>恶的科学：论共情与残酷行为的起源<br>洞见未来商业<br>东野圭吾新作品精选<br>第一推动丛书·综合系列_复杂的引擎（新版）<br>第一本经济学<br>地下城<br>大自然的社交网络<br>大学的精神<br>大浪潮：崛起的发展中世界<br>大家小史系列：民国经典史学读本（共3册）中国近代史_中国史纲_中国哲学史大纲<br>创造独特自我系列（套装4册）<br>超越原生家庭（原书第4版）<br>超级转化率<br>超级连接者<br>常赢投资系列：股市真规则_巴菲特与索罗斯的投资习惯_说谎者的扑克牌_滚雪球（上下）<br>猜测和偏见：何帆阅读笔记<br>不会被机器替代的人：智能时代的生存策略<br>不存在的人：从精神分裂、人格解体、离体体验……探索自我感从何而来 - 阿尼尔·阿南塔斯瓦米（Anil Ananthaswamy）<br>百岁人生：长寿时代的生活和工作<br>把碎片化时间用起来<br>奥田英朗：无理时代<br>暗逻辑_张鸣说历史背后的细节<br>安静冥想的力量（十册套装）<br>爱因斯坦的宇宙<br>爱的教育<br>V.S.奈保尔作品精选（共8册）<br>MBA教不了的创富课_我在30岁之前赚到1000万的经验谈<br>AI迷航<br>AI·未来<br>哈利波特與死亡聖器<br>哈利波特與魔法石<br>哈利波特與密室<br>哈利波特與火焰杯<br>哈利波特與混血王子<br>哈利波特與鳳凰社<br>哈利波特與阿茲卡班囚徒<br>哈利波特与被诅咒的孩子<br>毛姆-月亮和六便士<br>加布瑞埃拉·泽文-岛上书店<br>福尔摩斯探案全集<br>安迪·威尔-火星救援<br>中国通史共12卷22册<br>中国通史·一（1<del>11卷）<br>中国通史·二 （12</del>22卷）<br>卑鄙的圣人 _Cao Cao (T - Wang Xiao Lei<br>深入理解Java 7_核心技术与最佳实践 - 成富<br>互联网时代<br>每天懂一点色彩心理学<br>《鞋狗》(Shoe Dog)，作者：菲尔·奈特(Phil Knight)<br>MSL<br>grid<br>gene<br>Triumph and Tragedy - Winston Churchill<br>Their Finest Hour - Winston Churchill<br>The Hinge of Fate - Winston Churchill<br>The Grand Alliance - Winston Churchill<br>The Gathering Storm - Winston Churchill<br>Closing the Ring - Winston Churchill<br>War of the Whales</em> A True Story - Joshua Horwitz<br>(Trantorian Empire volume 1) Isaac Asimov-Pebble in the Sky<br>(Trantorian Empire 3) Isaac Asimov-The Currents of Space<br>(Trantorian Empire 2) Isaac Asimov-The Stars, Like Dust<br>Think Like a Freak - Steven D. Levitt &amp; Stephen J. Dubner<br>The Whole-Brain Child - Daniel J. Siegel<br>Supercharged Hormone Diet, The - Turner, Natasha<br>The Silkworm - Robert Galbraith<br>Mossad<br>Son of Hamas - Mosab Hassan Yousef<br>Maternal-Neonatal Nursing Made Incredibly Easy! (Incredibly Easy! Series) - Springhouse<br>Lee Child - Personal (Reacher 19)<br>Century Trilogy 03 - Edge of Eternity<br>Century Trilogy 02 -Winter of the World<br>Century Trilogy 01 - Fall of Giants<br>How to Clear Your Home of Ghosts &amp; Spirits - Debi Chestnut<br>Hell-Bent - Benjamin Lorr<br>Heidi Grant Halvorson Ph.D.-Succeed_ How We Can Reach Our Goals  -Hudson Street Press (2010)<br>HBR’s Must Reads Boxed Set (6 Books) (HBR’s 10 Must Reads)<br>Going Somewhere_ A Bicycle Jour - Brian Benson<br>Glenn Meade - Brandenburg- A Thriller Paperback<br>Dream Decoder - Zucker, Jonny, Zucker, Dr. Fiona [SRG]<br>Case Interview Secrets_ A Forme - Cheng, Victor<br>Case in Point_ Complete Case In - Cosentino, Marc<br>Boy’s Life - Robert McCammon<br>Amsterdam_City_Guide<br>(1000 Facts on…) Belinda Gallagher-1000 Facts - Planet Earth-Miles Kelly Publishing Ltd<br>身体知道答案-武志红<br>人类的群星闪耀时<br>货币放水的尽头：还有什么能拯救停滞的经济-（英）简世勋（King,S.D.） 著<br>先秦诸子百家争鸣<br>营销管理<br>第一时间看透对方：FBI教你破解身体语言（插图版）<br>我的求學夢<br>蒙曼說唐：武則天<br>毛泽东传（图文）<br>邓普顿教你逆向投资<br>(传记)曹操全传<em>从洛阳小吏到魏武大帝<br>星野道夫摄影作品：北极光<br>等一个人咖啡<br>罪与罚<br>最新简明英语口译教程<br>最好的女子<br>最寒冷的冬天：美国人眼中的朝鲜战争<br>最初的爱情，最后的仪式<br>走吧，张小砚<br>紫川（全集）<br>资治通鉴全译本（柏杨版）<br>追寻现代中国<br>追风筝的人<br>诛仙<br>朱镕基答记者问<br>中国最美的100风情小镇<br>中国历史通俗演义<br>中国大历史<br>张居正<br>曾有一个人，爱我如生命<br>再穷也要去旅行<br>原来这才是春秋（全2册）<br>遇见未知的自己<br>优雅一生的装扮课<br>优势谈判<br>雍正皇帝<br>佣兵天下<br>英雄志（至22卷完）<br>银河英雄传说（完美合集）<br>银河系漫游指南<br>易中天品三国<br>一只特立独行的猪<br>一口气读完世界历史<br>一个人旅行2<br>一个或所有问题<br>夜谭十记：让子弹飞<br>寻秦记<br>兄弟（上下合集）<br>幸福了吗<br>新东方GRE词汇精选<br>心是孤独的猎手<br>心理控制术<br>肖申克的救赎<br>小王子(精排四语插图版&amp;_41;<br>嫌疑人X的献身<br>仙楚<br>夏洛特的网（双语）<br>希区柯克悬念故事全集(全八册&amp;_41;<br>希腊神话故事<br>吸血鬼日记（1-4全集）<br>西方哲学史<br>悟空传<br>我们台湾这些年（完整插图版）<br>我的奋斗<br>我不是教你诈(1-5合集&amp;_41;<br>文化苦旅<br>惟我独仙<br>围城<br>王朔文集<br>王尔德童话_再编集<br>万物有灵且美<br>天机（全集）<br>天才在左疯子在右<br>唐诗三百首<br>他的国<br>岁月的泡沫<br>搜神记<br>送你一颗子弹<br>四书五经<br>舒克和贝塔全传<br>世界因你不同<br>史上最全的冷笑话集锦<br>史上第一混乱<br>时间简史<br>十一种孤独<br>失落的秘符<br>圣经（中英双语版）<br>神墓<br>上帝掷骰子吗<br>上班族必懂的office天择定律<br>莎士比亚全集<br>沙僧日记<br>色眼识人<br>三体（全集）<br>三毛流浪记（全集）<br>三口棺材<br>三杯茶<br>撒哈拉的故事<br>如何阅读一本书<br>人性的弱点<br>人生中不可不想的事<br>人生若只如初见<br>人间<br>全宋词<br>庆余年（全集精校）<br>青囊尸衣<br>青春咖啡馆<br>亲爱的安德烈<br>且听风吟<br>乔布斯的魔力演讲<br>乾隆皇帝（六册全集）<br>气场<br>平凡的世界<br>怒江之战（全集）<br>男人这东西<br>男人一本书<br>纳尼亚传奇（完美全集）<br>暮光之城（全集）<br>目送<br>莫泊桑短篇小说精选集<br>魔戒全集<br>明朝那些事儿（精编全集）<br>民主的细节<br>秘密<br>谜踪之国（全集）<br>冒死记录<br>茅山后裔（全集）<br>毛泽东最后七年风雨路<br>毛泽东传（图文）<br>蛮荒记<br>罗德斯岛系列（全集）<br>论语<br>鲁迅文集<br>流血的仕途：李斯与秦帝国<br>历史是个什么玩意儿（全集）<br>乐府诗集<br>郎咸平说：新帝国主义在中国2<br>郎咸平说：我们的日子为什么这么难<br>兰晓龙精选集<br>昆仑（全集）<br>哭泣的骆驼<br>康熙大帝（四册全集）<br>看不见的城市<br>巨流河<br>橘子不是唯一的水果<br>九州缥缈录<br>镜（合集）<br>鲸鱼女孩·池塘男孩<br>荆棘鸟<br>经济学原理（插图版）<br>近距离看美国（全集）<br>尽管去做–无压力的工作艺术<br>金字塔原理<br>金庸全集<br>金融的逻辑<br>剑桥中国史（全集）<br>家园</em>-<em>隋乱【完整】<br>基督山伯爵<br>基地<br>韩寒-长安乱<br>货币战争3：金融高边疆<br>货币战争2：金权天下<br>货币战争<br>活着就为改变世界_史蒂夫·乔布斯传<br>活着<br>黄河鬼棺（全集）<br>华音流韶（全集）<br>华尔街<br>呼啸山庄<br>厚黑学<br>后宫甄嬛传（全集）<br>黑死馆杀人事件<br>何以笙箫默<br>好妈妈胜过好老师<br>韩寒作品集<br>海边的卡夫卡<br>哈利·波特（完美全集）<br>哈尔罗杰历险记（全集）<br>国富论<br>郭德纲话说北京<br>鬼吹灯（全集插图版）<br>硅谷禁书<br>怪诞行为学（升级版&amp;_41;<br>给一个未出生孩子的信<br>覆雨翻云<br>福尔摩斯探案全集<br>佛祖在一号线<br>冯唐作品集<br>风语<br>二十四史（全集）<br>恶童日记三部曲<br>杜拉拉升职记（全集）<br>独唱团（第一辑）<br>斗罗大陆<br>动物庄园<br>东霓<br>缔造苹果神话<br>第一次一个人旅行<br>第二十二条军规<br>第二次世界大战回忆录<br>德川家康<br>盗墓笔记<br>当我们谈论爱情时我们在谈论什么<br>大唐双龙传<br>大唐狄公案（全集）<br>大秦帝国（精排全集）<br>大江大海一九四九（插图版）<br>达芬奇密码<br>村上春树三大杰作（合集）<br>匆匆那年<br>此时此地<br>窗边的小豆豆<br>城门开<br>城邦暴力团<br>沉默的大多数<br>尘缘<br>尘曲完整版<br>尘埃落定<br>拆掉思维里的墙<br>茶人三部曲<br>草样年华（全集）<br>草房子<br>藏地密码（全集）<br>沧海（全集）<br>灿烂千阳<br>蔡康永的说话之道（完整版）<br>不生病的智慧<br>不上火的生活<br>不去会死！<br>不能承受的生命之轻<br>不负如来不负卿<br>不抱怨的世界2<br>不抱怨的世界<br>博尔赫斯小说集<br>伯恩的身份<br>别为小事抓狂<br>别跟我说你懂日本<br>边荒传说（实体书版全集）<br>彼得·潘<br>背包十年<br>北洋裂变：军阀与五四<br>悲惨世界<br>宝贝，宝贝<br>百年孤独<br>白夜行<br>把时间当作朋友<br>巴黎圣母院<br>巴黎没有摩天轮<br>傲慢与偏见<br>安徒生童话<br>阿狸·永远站<br>阿狸·梦之城堡<br>35岁前要做的33件事<br>35岁前要上的33堂理财课<br>30而励<br>1Q84（全集）<br>1988：我想和这个世界谈谈<br>1984<br>做个快乐读书人-(美)刘墉<br>做高效能的自己-宿春君,汪文娟　<br>左手婚姻，右手爱情-赫本的眼睛<br>最新律师诉讼代理与培训全书-卢璟<br>最美不过诗经-李颜垒<br>最爱人间四月天：林徽因诗文精选-林徽因著；赵明华注<br>组织部来了个年轻人-王蒙<br>走出沼泽地——学生心理个案分析-徐慧珠<br>总有一头猪相信爱情：唐僧记事簿-廖文克<br>总经理把私营公司做大做强20个绝招-张永生<br>自由（freedom）-(美)乔纳森·弗兰岑<br>自修适用白话本国史<br>自卑与超越-阿德勒<br>自卑与超越-（奥地利）阿弗雷德·阿德勒著，李青霞译<br>字里禅心：汉字的另类阐释-赵文竹<br>追随你的心-史蒂夫·乔布斯<br>追随内心-（美）道伊奇曼<br>追梦人陈天桥-刘立京<br>赚在起跑线：股市赢家模式-玉名<br>赚钱金点子大全集-赵凡禹<br>煮酒话太宗：皇二代的千秋家园梦-黄如一<br>逐日英雄施正荣-辛华<br>珠宝首饰鉴评-田培学,张立新<br>肘后备急方-东晋葛洪撰<br>周汝昌梦解-周汝昌<br>重说中国近代史-张鸣<br>重生手记-凌志军<br>忠诚与背叛-何建明<br>中医体质养生说明书-《生活坊》编委会<br>中医入门你问我答-刘为绾<br>中医不死！-罗萌<br>中小学生必读丛书：繁星·春水-冰心<br>中文系-李师江<br>中华饮食文献汇编-张宇光<br>中华姓氏大探源-李浩然<br>中华上下五千年：先秦·南北朝时期-墨人<br>中华上下五千年：隋唐·近现代时期-墨人<br>中华上下五千年-诸葛祥蜀,赵荣织<br>中华百味.第2辑一学就会的家常面点100例-《中华百味》编委会<br>中国最美的度假旅行地TOP100-陈长春<br>中国自助游<br>中国之最-《书立方》编委会<br>中国饮食习俗-范川凤<br>中国一九五七-尤凤伟<br>中国文人的命运-李辉<br>中国围棋史话-薛克翘<br>中国通史-邵士梅<br>中国通史-吕思勉<br>中国式商务应酬细节全攻略-廖春红<br>中国式二代-晋阳<br>中国千亿大镇-林德荣<br>中国民俗节日-袁学骏<br>中国民间演艺-杜学德<br>中国民间信仰-陈旭霞<br>中国民间美术-杜云生,王军利<br>中国梦——唐骏正传-傅桦<br>中国历史典故辞典-阙勋吾<br>中国皇后传-邵士梅<br>中国国家地理-《学生探索者》编委会<br>中国房地产到底该怎么办-常青<br>中国读本·中国的玉文化-姚士奇<br>中国地产首富真相-魏昕,廖小东<br>中国大趋势4：中国经济未来十年-高连奎<br>中国茶经-于观亭<br>智慧教育-何锡涛等<br>智慧减压术——缓和精神压力，轻松过招的28个放松技巧-林可行,张小云<br>智斗小三-半颗心望月<br>致命文字：中国古代文祸真相-李钟琴<br>致加西亚的信-(美)哈伯德(Hubbard,E.)<br>炙膏肓睮穴法<br>纸上卧游记-程雨城<br>只为途中与你相见-霍洪声<br>职务犯罪侦查权研究-张兆松<br>职务犯罪疑难案例精析-蒋苇,兰元富,于海侠<br>职权-吴海中<br>直销帝国Ⅰ-田燕<br>知性力-(日)大前研一<br>真爱没那么累，幸福没那么贵<br>浙江省优秀教育科研论文集（2008）-浙江省教育科学研究院<br>浙江基础研究二十年-蒋泰维<br>浙东海洋文化研究-苏勇军<br>这样投资更幸福：你应该知道的投资密码-田仁灿,顾冰<br>这样喝咖啡最健康-张晔　左小霞　著<br>这样喝茶最健康-丁辛军,毕晓峰,张莉<br>这些事，员工应该自己作主-李昊<br>这些都是我给你的爱-周语<br>这年头一定要会点应酬学-张铁成<br>这年头一定要会点经济学-张铁成<br>找准你的职场定位职场中的5种典型人格-杜君立<br>张居正第一卷-熊召政<br>张居正第二卷-熊召政<br>张居正（第四卷）-熊召政<br>张居正（第三卷）-熊召政<br>张大千徐悲鸿-林乾,范敏,王连敏,赵琳琳<br>战争与和平-列夫·托尔斯泰(Tolstoy.L.N.),周煜山<br>战国纵横：鬼谷子的局3-寒川子<br>战国纵横：鬼谷子的局2-寒川子<br>战国纵横：鬼谷子的局-寒川子<br>曾文正公全集-曾国藩<br>曾文正公集：全2册-（清）曾国藩<br>曾国潘家书赏析-本书编写组<br>阅微草堂笔记<br>喻世明言<br>醒世恒言<br>三体V4.0 beta<br>镜花缘<br>警世通言<br>金瓶梅（崇祯本）<br>韩寒-一座城池<br>韩寒-像少年啦飞驰<br>韩寒-三重门<br>韩寒-零下一度<br>韩寒-可爱的洪水猛兽<br>韩寒-光荣日<br>韩寒-毒<br>韩寒–就这么漂来漂去<br>浮生六记<br>出發<br>博客十年-阮一峰<br>《我喜欢你，也愿意放弃你[精品]》言情小说<br>《死亡密码[精品]》藤萍<br>《谁杀了岳飞[精品]》<br>《另一半中国史（插图版）[精品]》<br>《历史为什么选择了毛泽东[精品]》<br>《李光耀论中国与世界[精品]》<br>《离开前请叫醒我[精品] 青春文学小说》<br>《官途》<br>三联生活周刊2018第50期<br>第一财经<br>第一财经 2019年5期<br>第一财经 2019年3期<br>财经201920<br>财经201919<br>财经201918<br>财经201917<br>财经201916<br>财经201915<br>第一财经 2019年7期<br>财经201922<br>vista看天下201833<br>最后的访谈系列（套装共6册）（<br>张岪与木心<br>战时灯火（读客熊猫君出品。诺贝尔奖得主石黑一雄熟读到可以背出来的书！布克奖50周年大奖“金布克奖”得主翁达杰！）<br>在别人的句子里<br>有所不为的反叛者：批判、怀疑与想象力<br>修道院纪事<br>熊镇2<br>熊镇<br>喜鹊谋杀案<br>乌金的牙齿<br>送行<br>四个春天<br>死屋：沙皇统治时期的西伯利亚流放制度<br>时间的秩序<br>萨拉戈萨手稿<br>人生海海<br>你当像鸟飞往你的山<br>渺小一生（套装上下册）<br>米格尔在智利的地下行动<br>伦敦人<br>六里庄遗事<br>猎人<br>加西亚·马尔克斯访谈录<br>呼吸<br>佛兰德镜子<br>拔蒲歌<br>82年生的金智英<br>转化率——电商运营核心思维与实操案例<br>中华经典藏书（升级版）下（40册：孙子兵法、三十六计、古文观止、梦溪笔谈、世说新语、千家诗、楚辞、了凡四训、山海经、徐霞客游记、茶经、随园食单、地藏经、药师经、人间词话、小窗幽记、古诗十九首、玉台新咏、阅微草堂笔记、三字经、百家姓、千字文、弟子规、围炉夜话、黄帝内经、曾国藩家书、金刚经、心经、坛经、菜根谭、聊斋志异、西厢记、窦娥冤、唐诗三百首、宋词三百首、元曲三百首、诗经、颜氏家训、商君书、搜神记<br>只管去做<br>有翼之暗<br>优质代码：软件测试的原则、实践与模式（异步图书） (软件开发方法学精选系列)<br>写给男人的第一本怀孕书（全球热卖 风靡欧洲，数百万家庭都在使用的孕期指南！一本让你笑破肚皮的怀孕圣经！） (生活孕期系列)<br>五运六气三十二讲<br>我的第一本怀孕书（全球热卖 解答所有你想知道，但却难以启齿的问题！风靡欧洲，数百万家庭都在使用的孕期指南！韩国上市一星期，销量突破40000册！） (孕期指南系列)<br>瘟疫与人<br>万古神帝<br>腾讯Android自动化测试实战<br>态度改变与社会影响<br>太平御览<br>十四堂人生创意课<br>胜间和代教你提升思考力<br>清明上河图密码：隐藏在千古名画中的阴谋与杀局（全6册）<br>亲密关系_通往灵魂的桥梁(新版) (心灵书坊)<br>钱从哪里来<br>南怀瑾选集第6卷 禅海蠡测、禅话、中国佛教发展史略、中国道教发展史略<br>男模私教让你四周练出一身肌 (品尚生活系列 透视健身房，让你成为健身达人)<br>内容电商运营实战：内容打造+内容运营+内容变现<br>门诊处方全书<br>论大战略<br>领导力与新科学（经典版） (湛庐文化财富汇系列)<br>李欣频创意宝典：十四堂人生创意课Ⅱ<br>基因工程(第4版)<br>黄煌经方医话·临床篇<br>黄煌经方使用手册（第3版）<br>荒诞医学史（一本彻底颠覆你对传统医学理解的书，人人都能看得懂！有点味道的书~）（凤凰联动畅销系列之一）<br>怀孕40周看这本就够了 (孕产一本就够系列 复旦大学教授、孕期营养学泰斗邵玉芬，携手著名妇产科专家团队，为孕妈妈40周孕期保驾护航)<br>厚黑学+百弊放言+妄谈疯话(套装共3册)<br>福尔摩斯探案全集(图注本)(套装共9册)<br>独眼少女 (午夜文库)<br>冬泳（阿乙_蒋方舟_李诞_谈波 齐声推荐， 颇具潜力的青年作家、第四届豆瓣阅读征文大赛首奖得主班宇（@坦克手贝吉塔）短篇力作首度成集）<br>第一次当奶爸（全球热卖 北京玛丽妇婴医院、新浪、腾讯、网易、搜狐读书频道重磅推荐；《妈咪宝贝》等倾力报道。风靡欧洲，数百万家庭都在使用的奶爸教科书！） (孕期育儿系列)<br>从零开始学运营（方便上手、随学随用、案例详实、实用性高，助你成为懂营销、会策划、善实战的运营人） (互联网电商运营策略及实战指南)<br>变量：看见中国社会小趋势<br>变量2<br>白骨精学习法：让你的年收入持续增长<br>《内经》中的古中医学<br>Succeed</em> How We Can Reach Our Goals<br>Selenium 2自动化测试实战<em>基于Python语言<br>R数据可视化手册<br>NSCA’s Essentials of Training Special Populations<br>NSCA’S Essentials of Tactical Strength and Conditioning<br>NSCA’S Essentials of Personal Training - 2nd Edition<br>Manual NSCA</em> Fundamentos del entrenamiento personal (Deportes) (Spanish Edition)<br>Google软件测试之道<br>10堂量子创意课<br>中国为什么有前途<em>翟东升_著 - 翟东升<br>曾国藩的经济课【知名学者张宏杰继畅销书《曾国藩传》后年度重磅力作 - 张宏杰<br>袁腾飞讲历史（全12册）（《这个历史挺靠谱》（全3册）、《袁腾飞 - 袁腾飞<br>印钞者 - 徐瑾<br>一本书读懂财务报表_财务报表分析从入门到精通(轻松图解版)（人人 - 文杨<br>信念的魔力</em>(成功大学文库) - 克劳德·布里斯托<br>图释易经的故事<em>一口气轻松读懂华夏文明之源</em>(图释经典系列) - 史冷金<br>特德·姜作品中英文合集(20部) - 特德·姜(Ted_Chiang)<br>思辨与立场：生活中无处不在的批判性思维工具 - 理查德·保罗(Richard_W.Paul)<em>&amp;<em>等<br>树莓派开始，玩转Linux - Vamei</em>&amp;<em>周昕梓<br>树莓派开发从零开始学–超好玩的智能小硬件制作书 - 胡松涛<br>如何讲好一个故事：引爆说服力的故事思维训练法 - [南非]默里·诺塞尔<br>庆余年(精校版) - 猫腻<br>你不是失败，只是差一点成功（给每一个颓丧和低谷中人的勇气之书，哈 - 萨拉·刘易斯<br>李银河说爱情 - 李银河<br>可怕的中年 - [英]贾森·黑兹利</em>&amp;</em>[英]乔尔·莫里斯<br>进退博弈<em>帝国史上的权力生存与人性惆怅 - 史冷金<br>风起陇西 - 马伯庸<br>从报表看企业——数字背后的秘密（管理者终身学习）（雪球网大V唐朝 - 张新民<br>从报表看企业——数字背后的秘密（第3版） - 张新民<br>变量2 - 何帆<br>What_if_那些古怪又让人忧心的问题 - （美）兰道尔·门罗<br>心流<br>父母的语言：3000万词汇塑造更强大的学习型大脑<br>10<br>心流<br>OKR工作法：谷歌、领英等顶级公司的高绩效秘籍<br>寻人不遇<br>运动改造大脑<br>父母的语言：3000万词汇塑造更强大的学习型大脑<br>即兴演讲：掌握人生关键时刻<br>即兴演讲：掌握人生关键时刻<br>第一推动丛书·综合系列：复杂<br>原则<br>刺杀骑士团长<br>回答不了(感动千万读者，天才漫画家匡扶摇首部作品集)<br>鱼·翅与花椒 (译文纪实)<br>遮蔽的天空（蒙尘70年的世纪文学经典，兰登书屋、《时代周刊》百大英语小说）<br>一瓣河川<br>三万英尺<br>断代<br>深蓝的故事<br>九个人<br>天长地久：给美君的信（龙应台2018全新力作）<br>苹果酒屋的规则 - 约翰·欧文<br>巴菲特致股东的信：投资者和公司高管教程（原书第4版） (华章经典·金融投资)<br>鱼·翅与花椒 (译文纪实)<br>非平面<br>十二怒汉<br>希望为电影：从“纽约无成本制片之王”到产业革新先锋<br>北野武的小酒馆<br>理解一张照片：约翰·伯格论摄影<br>美术馆里聊怪咖<br>必须找到阿历克斯（横扫25国的重磅推理小说！）<br>东野圭吾：假面山庄<br>知更鸟<br>清明上河图密码：隐藏在千古名画中的阴谋与杀局（套装1-5册）<br>推理之王1：无证之罪<br>在另一个宇宙的1003天<br>山茶文具店<br>云边有个小卖部<br>奇迹男孩<br>夏日终曲<br>莫斯科绅士<br>圣殿春秋<br>长日将尽 (诺贝尔文学奖得主石黑一雄最重要代表作)<br>使女的故事.<br>染匠之手<br>鱼·翅与花椒 (译文纪实)<br>存在主义咖啡馆——自由、存在和杏子鸡尾酒<br>韭菜的自我修养（2019）<br>巴菲特致股东的信：投资者和公司高管教程（原书第4版） (华章经典·金融投资)<br>薛兆丰经济学讲义<br>掌控谈话<br>奈飞文化手册<br>Yuan Ze - [Mei ]Rui _Da Li Ou<br>教宗与墨索里尼：庇护十一世与法西斯崛起<br>半小时漫画世界史<br>铁道之旅：19世纪空间与时间的工业化<br>20世纪简史：从无线电到柏林墙<br>无敌舰队<br>娜塔莎之舞：俄罗斯文化史<br>规模<br>生命3.0<br>给忙碌者的天体物理学[百科超注版]<br>哲学·科学·常识<br>云彩收集者手册<br>基因传<br>荒诞医学史<br>非平面<br>双峰：最终档案<br>日本合众国<br>时间不存在<br>死灵之书<br>尼尔·盖曼奇幻经典：《美国众神》_《北欧众神》（共2册）（横扫所有世界级幻想小说大奖！囊括雨果奖、星云奖、轨迹奖、斯托克奖、SFX奖、格芬奖！）<br>《黑暗的左手》三部曲（《黑暗的左手》《失去一切的人》《世界的词语是森林》）<br>电幻国度<br>与罗摩相会<br>非平面<br>镖人(1-4卷）（读客熊猫君出品，轰动日本的中国漫画！）<br>读客经典文库：银河铁道之夜（日本动画传奇吉卜力的灵感来源）<br>回答不了(感动千万读者，天才漫画家匡扶摇首部作品集)<br>漫长的告别（读客熊猫君出品，怪不得村上春树读了12遍！每每陷入困境，村上春树便打开《漫长的告别》！说一声再见，就是死去一点点。）<br>观山海 - 杉泽<br>如父如子<br>莫斯科绅士<br>我们一无所有<br>奥古斯都<br>房思琪的初恋乐园<br>回答不了(感动千万读者，天才漫画家匡扶摇首部作品集)<br>追寻逝去的时光(第1卷)_去斯万家那边 (周克希译文集)<br>那不勒斯四部曲NO.4：失踪的孩子（全球畅销近千万册，HBO真人电视剧热拍中，两个女人50年的友谊和战争）<br>宋徽宗<br>汉密尔顿传(美国二百年国运的真正缔造者：我们只能坚持美国优先政策)<br>阿加莎·克里斯蒂的真实人生<br>沈从文全传：沈从文的前半生_沈从文的后半生（增订版全二册）<br>椰壳碗外的人生：本尼迪克特·安德森回忆录<br>彼得·汉德克经典作品合集<br>重新定义系列（共四册）：重新定义公司+重新定义管理+重新定义团队 - 埃里克·施密特</em>&amp;<em>乔纳森·罗森伯格</em>&amp;<em>布赖恩·罗伯逊</em>&amp;<em>博<br>重新定义公司<em>谷歌是如何运营的</em>(奇点系列) - 埃里克•施密特</em>&amp;<em>乔纳森•罗森伯格<br>智能战略(马云力荐，阿里巴巴的成功与战略新蓝图。畅销书《智能商业 - 曾鸣<br>远见：如何规划职业生涯3大阶段 - 布赖恩•费瑟斯通豪<br>伟大的思想(第一辑)(套装全10册)(双语版)</em>(企鹅口袋书系列 - 亨利•戴维•梭罗<em>&amp;<em>拉尔夫•瓦尔多•爱默生</em>&amp;<em>弗里德里希尼<br>伟大的思想(第四辑)(套装全10册)(双语版)</em>(企鹅口袋书系列 - 亚伯拉罕·林肯</em>&amp;<em>托马斯·霍布斯</em>&amp;<em>普鲁塔克</em>&amp;<em>威廉·詹姆<br>伟大的思想(第三辑)(套装全10册)(双语版) - 爱德华•吉本</em>&amp;<em>弗吉尼亚•伍尔芙</em>&amp;<em>托斯丹•凡勃伦</em>&amp;<em>玛丽<br>伟大的思想(第六辑)(套装全10册)(双语版)</em>(企鹅口袋书系列 - 乔治·艾略特<em>&amp;<em>贾科莫·莱奥帕尔迪</em>&amp;<em>莎士比亚</em>&amp;<em>柏拉图</em><br>伟大的思想(第二辑)(套装全10册)(双语版)</em>(企鹅口袋书系列 - 米歇尔·德·蒙田<em>&amp;<em>列夫·托尔斯泰</em>&amp;<em>弗里德里希·尼采</em>&amp;</em><br>三大师 - 斯蒂芬茨威格<br>如何聊电影 - 安·霍纳迪<br>企业财务分析的底层逻辑，一张图说清 -<br>品格的力量 - 塞缪尔•斯迈尔斯(Samuel_Smiles)<br>美国儿科学会育儿百科（第6版，2018全新增订 - 斯蒂文·谢尔弗<br>逻辑十九讲（修订版） - 【美】威廉姆•沃克•阿特金森<br>历史的温度2：细节里的故事、彷徨和信念 - 张玮<br>科学速读：脑内新世界 - 新科学家杂志<br>儿童沟通心理学（如何说孩子才会听<em>怎么听孩子才肯说，你的话，孩子 - 李群锋<br>断舍离(2019年新版，全书修订50%以上。宫崎骏、张德芬、李冰 - 山下英子<br>断舍离 - [日]<em>山下英子<br>定投十年财务自由 - 银行螺丝钉<br>第二十二条军规</em>(纪念版) - ［美国］约瑟夫·海勒<br>从点子到产品：产品经理的价值观与方法论 - 刘飞<br>创业维艰 - [美]本·霍洛维茨<br>创新的资本逻辑：用资本视角思考创新的未来 - 田轩</em><br>成为：米歇尔·奥巴马自传 - 米歇尔·奥巴马<em>(Michelle_Obama)<br>半小时漫画中国史（修订版）_(这本史书真好看文库) - 二混子<br>追踪师（《无证之罪》、豆瓣年度十大高分图书《长夜难明》作者、华语 - 紫金陈<br>中国自助游（2017全新彩色升级版） - 《中国自助游》编辑部<br>一个人的狂欢<em>内向性格的力量 - 罗莉·海尔格<br>喜宴</em>(名家自选学生阅读经典) - 王安忆<br>太阳黑子（热映电影《烈日灼心》原著，由邓超、郭涛、段奕宏、王珞丹 - 须一瓜<br>世界重启 - [英]<em>路易斯•达特内尔<br>日本人为何选择了战争：小林秀雄奖获奖作品、畅销日本十年、日本近现 - 加藤阳子<br>人类的起源（亲身挖掘化石的新鲜刺激_打破知识边界的大师视野_破解 - 理查德·利基<br>区块链原理、设计与应用</em>(区块链技术丛书) - 杨保华</em>&amp;<em>陈昌<br>轻断食<em>正在横扫全球的瘦身革命 - 麦克尔·莫斯利</em>(Michael_Mosley)_,_咪咪·史宾<br>南方之星（科幻大师儒勒·凡尔纳的科幻探险小说首次译成中文；成功预 - 儒勒·凡尔纳<br>妙趣横生博弈论：事业与人生的成功之道 - 电子书免费赠送_行行微信491256034<br>理财就是理生活 - 艾玛·沈<br>理财就是理生活 - 艾玛·沈(2)<br>好好思考【知名知识管理研究者、“得到”说书人成甲继《好好学习》之 - 成甲<br>孩子如何思考（《园丁与木匠》作者经典再现儿童心理学革命性成果，揭 - 艾莉森·高普尼克<br>第二曲线创新（混沌大学创办人李善友蛰伏三年最新力作_30万学员必 - 李善友<br>伯罗奔尼撒战争史___详注修订本（套装上、下册） - [古希腊]修昔底德<br>编程大师访谈录</em>(图灵程序设计丛书) - 拉默斯<em>(Susan_Lammers)<br>编程大师访谈录 - Susan_Lammers<br>北京1980 - 于晓丹<br>5G时代——什么是5G，它将如何改变世界(都在说中国5G世界领先 - 项立刚<br>中国缺什么，日本缺什么 - 近藤大介<br>永别了,武器</em>(译文名著精选) - 欧内斯特·海明威(E.Hemingway)<br>西贝的服务员为什么总爱笑：贾国龙激励3万员工的管理哲学 - 贾林男,<br>图解观呼吸<em>学会呼吸<em>改变人生(佛法中的心理疗法) - 蓝梅<br>睡个好觉：如何科学改善你的睡眠——知乎周不润作品</em>(知乎「一小时 - 周不润</em>&amp;<em>知乎<br>深度工作_如何有效使用每一点脑力 - [美]_卡尔·纽波特<br>零秒工作（麦肯锡精英多年经验总结，教你如何将工作速度和工作效率提 - 赤羽雄二<br>快乐的科学 - [德]尼采<br>口才如金：快速提升会销业绩的演讲技巧 - 金克成<br>丰田一页纸极简思考法 - [日]浅田卓<br>丰田模式（危机应对篇）：如何化危机为机遇</em>(精益思想丛书) - 杰弗瑞<em>K.<em>莱克(Jeffrey_K._Liker)</em>&amp;_蒂莫<br>丰田模式_精益制造的14项管理原则 - 杰弗瑞·莱克(Jeffrey_Liker)<br>丰田模式(实践手册篇)_实施丰田4P的实践指南</em>(精益思想丛书) - 杰弗瑞·莱克<em>(Jeffrey_K.Liker)<br>丰田每天都在坚持的习惯 - 【日】OJT解决方案股份有限公司,_朱悦玮,<em>ePUBw.COM<br>丰田供应链管理：透视丰田产业链制胜的秘密武器</em>(精益思想丛书) - 安纳兹_V.艾弗(Ananth_V.lyer)<br>反常识 - 邓肯·J.瓦茨<br>大国大城（聚焦上海发展道路，呼吁取消人口自由流动门槛，逃回北上广 - 陆铭<br>超级大脑的七个习惯：激发大脑潜能，激活高效人生 - 吴梦怡_【日】菅原道仁<br>肠子的小心思 - 【德】朱莉娅•恩德斯<br>白天的房子，夜晚的房子 - 奥尔加·托卡尔丘克<br>奥马哈之雾：我们是否误读了巴菲特 - 任俊杰,朱晓芸_著<br>资本,让你看懂世界格局 - 西瓜子<br>终身学习：10个你必须掌握的未来生存法则 - 丹·苏利文<br>遇谁都能聊得开 - 【美】莉儿·朗蒂,_曾琳,_ePUBw.COM<br>选择：为什么我选的不是我要的？ - [美]希娜·艾扬格<br>行为设计学：零成本改变 - 奇普·希思</em>&amp;<em>丹·希思<br>无论如何都想告诉你的世界史（经济学家讲3000年世界史中的12次 - 玉木俊明<br>完全写作指南（哥伦比亚大学教师30年教学经验锤炼而成，人手必备的 - 劳拉·布朗<br>突破现实的困境：趋势、禀赋与企业家的大战略 - 克里斯·布拉德利</em>&amp;<em>贺睦廷</em>&amp;<em>斯文·斯密特<br>日本人为何选择了战争 - 加藤阳子<br>让你在公司显得很能干的52种方法（获取如何取得成功的秘诀） - 罗斯<em>·_麦卡蒙<br>区块链：定义未来金融与经济新格局 - 张健<br>皮囊 - 蔡崇达<br>逆商：我们该如何应对坏事件（逆商理念的开创者保罗•史托兹博士：衡 - 保罗•史托兹<br>能力迁移（如何练就跨行业间可复用技能，普利策奖得主多维度调研行业 - 乔治·安德斯<br>浪潮之巅第4版 -<br>浪潮之巅 - 吴军<br>基本穿搭：适用一生的穿衣法则（不理潮流、不浪费时间和金钱，日本超 - 大山旬<br>沟通赢家：玩转四大沟通模式 - 徐丽丽<br>格局逆袭：普通人的制胜之道 - 宗宁<br>对赌：信息不足时如何做出高明决策 - 安妮·杜克<br>11堂极简系统思维课：怎样成为解决问题的高手 - 【罗马尼亚】史蒂文•舒斯特<br>学会提问(原书第10版) - 尼尔•布朗_、斯图尔特•基利<br>我们如何思维 - 约翰·杜威</em>(John_Dewey)<br>思维的模式（颠覆你的思维，打破你的想象，大师帮你大开脑洞；现代人 - 阿尔弗雷德·诺思·怀特海<br>数学本来很简单 - 赛·太蒙尼<br>人类网络：社会位置决定命运 - 马修·杰克逊<br>情绪急救_应对各种日常心理伤害的策略与方法 - 盖伊·温奇博士</em>(Guy_Winch_Ph.D)<br>七十二堂写作课：夏丏尊叶圣陶教你写文章（汉语写作的指导圣经） - 夏丏尊<em>叶圣陶<br>名创优品没有秘密 - 杜博奇<br>论大战略 - 约翰·刘易斯·加迪斯</em>&amp;<em>dushuxiezi360.com<br>苦难英雄任正非 - 王育琨<br>疾病的模样：京虎子医学科普笔记 - 京虎子<br>从受欢迎到被需要：高情商决定你的社交价值 - 张萌,_ePUBw.COM<br>厨艺的常识：理论、方法与实践（厨艺小白也有拿手菜！下厨前一定要学 - 迈克尔·鲁尔曼<br>出众，从改变习惯开始 - 【德】马克·列克劳,_陈玉嫦,_ePUBw.COM<br>出身：不平等的选拔与精英的自我复制 - 【美】劳伦·A._里韦拉,_江涛,_李敏,_ePUBw.COM<br>肠子的小心思（好污好欢乐，雷萌有粑粑的味道，慎入！！2016年期 - 【德】朱莉娅•恩德斯<br>别独自用餐_：克林顿还是穷小子时如何建立顶级社交圈（十周年作者修 - (美)_基思•法拉奇（Keith_Ferrazzi），(美)塔尔<br>【精排】长安十二时辰（上下册） - 马伯庸<br>直觉泵和其他思考工具 - 【美】丹尼尔·丹尼特（Daniel_C._Dennett）</em>&amp;_<br>用得上的商学课 - 路骋<br>饮食的迷思：关于营养、健康和遗传的科学真相（拒绝盲目跟风，活出自 - 蒂姆·斯佩克特<br>行星全书 - [美]尼尔马拉•纳塔瑞杰<em>著<em>美国国家航空航天局（NASA）_图<br>星座全书（观星进阶必备图书，有关星座的一切，都能在这里找到答案！<br>微习惯_简单到不可能失败的自我管理法则 - [美]斯蒂芬·盖斯<br>失误：为什么我们总爱犯错？ - 凯瑟琳·舒尔茨<br>如何用数据解决实际问题 - [日]柏木吉基_著；赵媛_译<br>人人都是产品经理 - 苏杰<br>人间失格 - 太宰治<br>获客 - 何润</em>&amp;_张艳琳<br>活下去的理由 - 马特·海格<br>华杉讲透《孙子兵法》 - 华杉<br>反脆弱_从不确定性中获益 - 纳西姆•尼古拉斯•塔勒布<br>读客经典文库：漫长的告别（怪不得村上春树读了12遍！每每陷入困境 - 雷蒙德·钱德勒<br>低风险创业  - 樊登<br>从一到无穷大：科学中的事实和臆测 -<br>被讨厌的勇气 - 岸见一郎、古贺史健<br>“凯叔讲历史”系列·第一辑（套装全8册） - 凯叔<br>引爆流行 - 马尔科姆·格拉德威尔<br>一条改变世界的鱼：鳕鱼往事 - 马克·科尔兰斯基<br>行走在非洲丛林</em>(自然丛书) - 阿尔伯特·史怀哲<br>文明的进程系列：上帝之饮+黑石头的爱与恨+万用之物+一条改变世界 - [美]汤姆·斯丹迪奇<em>&amp;</em>[美]巴巴拉·<em>弗里兹</em>&amp;<em>[美]马克<br>万万没想到用理工科思维理解世界 - 同人于野<br>太宰治经典系列（维庸之妻+晚年+斜阳+人间失格+奔跑吧，梅勒斯） - 【日】太宰治<br>杀人游戏 - 雷钧<br>认识身体.2 - 加文·弗朗西斯<br>认识身体 - 加文·弗朗西斯<br>起风了(宫崎骏收山之作原著小说) - 堀辰雄<br>密室中的旅行</em>(保罗·奥斯特作品) - 保罗·奥斯特<br>美国创世记：埃利斯建国史系列（套装共4册） - 约瑟夫·J.埃利斯<br>鲤·写作课（以文学之名，重新发现此时此地的中国） - 张悦然<br>老谋子司马懿 - 秦涛<br>精进：如何成为一个很厉害的人（知乎604939个赞同认证的惊喜之 - 采铜<br>火星三部曲<em>绿火星+红火星+蓝火星【共3册】<em>金·斯坦利·罗宾逊 - 金·斯坦利·罗宾逊<br>胡麻的天空 - 秀英奶奶<br>河合隼雄代表作：《长大成人的难处》《故事与神奇》《青春就是梦和游 - 河合隼雄<br>好好说话2：简单有效的高情商沟通术 - 马薇薇</em>&amp;<em>黄执中</em>&amp;<em>周玄毅</em>&amp;<em>邱晨</em>&amp;_胡渐彪<br>父母的语言：3000万词汇塑造更强大的学习型大脑 - 达娜·萨斯金德（Dana_Suskind）</em>&amp;<em>贝丝·萨斯金德（<br>法医秦明作品集_幸存者+清道夫+第十一根手指+无声的证词+尸语者 - 秦明<br>德里罗作品_白噪音 - 唐·德里罗</em>(Don_DeLillo)<br>毕业前杀人游戏 - Unknown<br>比海更深（电影大师是枝裕和温情代表作，《比海更深》原著小说，《步 - 是枝裕和；佐野晶<br>埃及神话 - 加里·J.肖<br>掌控：开启不疲惫、不焦虑的人生（用科学、朴素的精力管理，打造碎片 - 张展晖<br>原生家庭<em>如何修补自己的性格缺陷</em>(苏珊福·沃德心理学经典作品， - 苏珊·福沃德博士<em>&amp;<em>克雷格•巴克<br>医学的真相：如何在不确定信息下做出正确决策 - [美]悉达多·穆克吉<br>行为设计学（套装4册） - 奇普·希思</em>&amp;_丹·希思<br>小小陌生人（暗黑版《唐顿庄园》） - 萨拉·沃特斯<br>细节：如何轻松影响他人（市场版）（完整图文版） - [美]_史蒂夫·马丁</em>&amp;<em>[美]<em>诺瓦·戈尔茨坦</em>&amp;</em>[美]<em>罗<br>我们为什么被霸凌？（探明源头，才能真正将霸凌扼杀在摇篮里！） - 陈岚<br>为什么我们总是在逃避 - 约瑟夫·布尔戈<br>特斯拉传：实现不可能（硅谷钢铁侠埃隆·马斯克舍命狂奔背后的生存哲 - 哈米什·麦肯齐<br>他从凤凰来：沈从文传 - 金介甫<br>斯坦福的高效睡眠法 - 【日】西野精治;君风竹译<br>世界观：现代人必须要懂的科学哲学和科学史（原书第2版） - 理查德·德威特（Richard_DeWitt）<br>生命最后的读书会 - 威尔•施瓦尔贝<br>棋王 - 阿城<br>逆商：我们该如何应对坏事件<br>你是你吃出来的：吃对少生病，病了这样吃 - 夏萌<br>见识商业的本质和人生的智慧3312473<br>见识：商业的本质和人生的智慧 - 吴军<br>坚毅 - [_美]_安杰拉·达克沃思<br>激荡十年，水大鱼大 - 吴晓波<br>管理大师稻盛和夫经典收藏版共6册（《拯救人类的哲学》、《干法》、 - （日）稻盛和夫,（日）梅原猛、（日）森田直行<br>断舍离 - [日]_山下英子<br>读懂中国制造2025 - 吴晓波等<br>城里的房子：读懂中国房产财富的逻辑 - 徐远<br>成事：冯唐品读曾国藩嘉言钞<br>被讨厌的勇气：“自我启发之父”阿德勒的哲学课 - (曰）岸见一郎，（日）古贺史健<br>安静的力量 - (美)_耶尔<br>阿里铁军销售课 - 李立恒<br>7步签单 - [美]大卫·桑德拉<br>重新理解创业 ：一个创业者的途中思考_4977753<br>重拾交谈_5230450<br>智能商业_5443500<br>夜脑：在睡眠中自动学习的秘密_4577071<br>学会写作_3561063<br>细节：如何轻松影响他人（市场版）（完整图文版）_1799314<br>深度销售：一线销售的深度行动指南_5129391<br>三口棺材（【不可能犯罪小说】的巅峰之作，全球读者顶礼膜拜，世界推理文学史上不可忽视的里程碑，至今难以超越。）_5673873<br>如何改变习惯：手把手教你用30天计划法改变95%的习惯_1121230<br>日本推理四大奇书（推理文学史上的不可逾越的四大伟业，日本文学之“黑色水脉”，异端文学的四大高峰）_5109265<br>皮肤的秘密_5568159<br>你的第一本保险指南（针对中青年群体的保险科普指南）_5523410<br>流量池_3817658<br>刻意练习：如何从新手到大师_1007360<br>极简主义——风靡欧美的工作与生活理念_3186508<br>活好：我这样活到105岁_4933579<br>活出生命的意义_3392119<br>黑洞之书_5323916<br>沟通圣经：听说读写全方位沟通技巧（从沟通开始成就一个社会人的自我。）_4467512<br>共情力（哈佛大学前讲师首创共情认知行为疗法，助你解决压力引起的焦虑和恐惧）_3402744<br>高效人士用超级笔记术（日本丰田、索尼等企业员工必备。整理、创意、传达笔记，提高工作效率，你与精英之间就差一本笔记。） (博集经管商务必读系列)_5455060<br>富有的习惯（揭秘富人与穷人的根本差距！27条“富有的习惯”，决定你一生财富！） (博集经管商务必读系列)_4687395<br>读懂中国制造2025_1068875<br>读懂这三本书，才算真懂大数据！（套装共3册） (如何读懂大数据主题系列)_2181840<br>被讨厌的勇气：“自我启发之父”阿德勒的哲学课_325857<br>阿里铁军销售课_5598139<br>21招，让孩子独立_5741871<br>做自己人生的CEO：人人都需要的管理术<br>做自己的天使投资人：耶鲁芝大双MBA传授打造高端MBA人才的大智慧<br>做销售就是做渠道：发掘高收益的潜在客户<br>作家的灵感宝库<br>自我赋能<br>中国都市中的消费实践：符号化及其根源<br>中国道路能为世界贡献什么<br>致广大而尽精微：普惠金融中国实践案例<br>制怒：如何掌控自己和他人的情绪<br>知识管理如何改变商业模式<br>知识产权多维度学理解读<br>正念癌症康复<br>真正的问题解决者：社会企业如何用创新改变世界<br>这就是OKR：让谷歌、亚马逊实现增长的工作法<br>语言本能<br>与真实的自己和解<br>音乐符号<br>依赖共生：亲密关系中的依赖型人格<br>心、脑与科学<br>鞋狗<br>消极情绪的力量<br>下一站 火星：马斯克、贝佐斯与太空争夺战<br>突破：程序员如何练就领导力<br>数联网——大数据如何互联<br>世界趋势2050<br>生而不凡：迈向卓越的10个颠覆性思维<br>社会资本与企业创新能力：内外差异性的视角<br>设计大师的商业课<br>商业模式4.0：重塑未来商业逻辑<br>如何在组织内有效开展导师制：世界500强企业广泛践行的人才培养系统<br>如何给别人留下好印象：职场第一课·印象管理<br>任正非：除了胜利，我们已无路可走<br>人生没有后悔药<br>人生复本<br>人人都在说谎：赤裸裸的数据真相<br>人人都要有创业者精神<br>人人都该懂的科学哲学<br>人脉：构建人际网络，拓展商业机会的行动指南<br>人工智能时代：未来已来<br>全球贸易和国家利益冲突<br>圈层效应：理解消费主力95后的商业逻辑<br>情境影响力<br>培养高情商的孩子：让孩子受益一生的情绪管理法<br>逆境成长：坚韧人格养成手册<br>内容之王：出版业的颠覆与重生<br>魔鬼逻辑学<br>模仿的技术：企业如何从“山寨”到创新<br>领导力核能<br>老去是生命的礼物  世间的一切遗憾都是成全<br>快书写，慢思考<br>块数据4.0：人工智能时代的激活数据学<br>客户的游艇在哪里：华尔街奇谈（典藏版）<br>科学的诞生（全两册）<br>精通社交销售：在数字化时代急需提升的销售技能<br>经验的重构：杜威教育学与心理学<br>经济学要义<br>金融的解释：王福重金融学通识课<br>解读区块链：重新定义未来经济<br>教师的操心<br>简单逻辑学<br>极致用户体验<br>极简思维：高效能人士的思维跃迁<br>极度效率<br>激活：点燃企业活力的能量八原则<br>华为组织运营方法论<br>呼吸：音乐就在我们的身体里<br>关键影响力：如何调动团队力量（原书第2版）<br>共生：互联网人才模式重构、变革与红利<br>高效能人士的影响力法则<br>改革开放口述史<br>复杂经济学：经济思想的新框架<br>父母的语言：3000万词汇塑造更强大的学习型大脑<br>非洲的民主与选举（法政科学丛书）<br>当代中国的阶层结构分析<br>大数据经济：大数据时代，互联网加法如何做？<br>催眠术：一种奇妙的心理疗法（第3版）（邰启扬催眠疗愈系列）<br>从零开始做播客：创造网红主播<br>褚时健传<br>城市隐秩序：复杂适应系统理论的城市应用<br>超越原生家庭（原书第4版）<br>不再害羞：如何提高你的社会适应力<br>不平等的增长：收入分配的国际比较<br>爱情就是被催眠了<br>阿米巴核能：人人成为经营者<br>《华为终端战略》<br>《高情商管理》<br>MBA一日读2.0：一日之内学完知名商学院的全部课程<br>HBO的内容战略<br>ETF全球投资指南<br>5G移动通信系统：从演进到革命<br>1分钟沟通课<br>重构跨境电商：阿里巴巴中小企业全球化实践<br>战略几何学<br>阅读力：未来小公民的阅读培养计划<br>游戏剧本怎么写<br>医生最想让你做的事<br>幸福哲学书<br>销售经理的22条jun规：如何带出高绩效的销售团队<br>像间die一样观察<br>显微镜下的大明<br>数据资本时代<br>时间的压力<br>失序的金融<br>深度学习<br>如何做出正确决定<br>如何戒掉坏习惯<br>如何成为面向未来的学习者（原书第7版）<br>人类：一个机器人的回忆录<br>人工智能会取代人类吗<br>权力密码——当历史遇见经济学<br>企鹅欧洲史系列1648-1914 (套装2册)<br>尼安德特人<br>巨人的工具<br>机器70年——互联网、大数据、人工智能带来的人类变革<br>华为没有秘密.2<br>互联网供应链金融<br>供应链金融运营实战指南<br>非对称风险<br>发现利润区<br>对赌：信息不足时如何做出高明决策<br>大数据与智慧社会：数据驱动变革、构建未来世界<br>大数据营销分析与实战解析<br>大数据供应链：构建工业4.0时代智能物流新模式<br>大数据产业革命：重构DT时代的企业数据解决方案<br>标准化的偏执狂：金色拱门背后的麦当劳<br>《苹果故事：乔布斯的简洁之道》<br>《蚂蚁金服：从支付宝到新金融生态圈》<br>《简洁之美：苹果运营的秘密》<br>《极致服务：如何创造不可思议的客户体验》<br>《互联网下半场》<br>《过剩之地：美式富足与贫困悖论》<br>《大数据掘金：挖掘商业世界中的数据价值》<br>《触点管理：互联网+时代的德国人才管理模式》<br>bing临城下：中国上市公司并购风云：1993-2018<br>AI：人工智能的本质与未来<br>中国的改革哲学<br>中国道路的历史基因<br>中产阶级如何保护自己的财富<br>知识的错觉<br>曾国藩传张宏杰版<br>谢谢你迟到<br>说服<br>美国式幸福<br>讲给大家的中国历史1中国是怎么出现的<br>基因、大脑和人类潜能<br>改革的改革<br>读书毁了我<br>创水记<br>城里的房子：读懂中国房产财富的逻辑<br>成为数据分析师<br>变量：看见中国社会小趋势<br>百岁人生 ——长寿时代的生活和工作<br>《只为遇见你：试管婴儿妈妈孕育手记》<br>《无压力社交》<br>《未来之路<br>《天空的另一半》<br>《数学好的人是如何思考的》<br>《美第奇家族的兴衰》<br>《精益设计：设计团队如何改善用户体验（第2版）》<br>《进击的智人》<br>《哈佛的6堂独立思考课》<br>《关闭华尔街<br>《个体赋能》<br>《疯长：Facebook如何击败对手，指数时代的增长逻辑》<br>《带着数字和玫瑰旅行》<br>《从1到N：企业如何实现持续高速增长》<br>《不做无效的营销》<br>《阿里局》<br>《7-Eleven经营秘籍》<br>知乎电子书「儿童教育」套装（全十册） - 知乎<br>真正的蒙氏教育在家庭精选（套装共三册）<br>遇到百分之百的女孩<br>微习惯<br>数学女孩3<br>数学女孩2：费马大定理<br>数学女孩1<br>神的孩子全跳舞<br>南华录：晚明南方士人生活史<br>哈佛中国史（全六卷）<br>高兴死了！！！<br>成长的密码是什么，我也是第一次做父母心理系列丛书（共4册）<br>Yan Zhi He Shen Cai Yi Ge Du Bu - Sen Tuo Lang Deng Zhu<br>言情年度畅销作品大合集（套装共39册）<br>刺杀骑士团长<br>JavaScript高级程序设计（第3版）<br>知识管理<br>我是一朵孤独的流云<br>同步：秩序如何从混沌中涌现<br>随着日子往前走<br>思维导图 - Tony Buzan<br>私募的进化<br>谁在世界的中央：古代中国的天下观<br>士大夫政治演生史稿<br>皆为戏言：新媒体时代的说话指南<br>华杉讲透国学经典（3册装）<br>横越未知<br>从零开始读懂投资理财学<br>从零开始读懂经济学<br>自我实现的宇宙<br>资源革命<br>中国财政史十六讲<br>掌控大趋势<br>行动的勇气<br>相处的艺术<br>现实不似你所见<br>我们为什么会发胖？<br>我辈孤雏<br>网络的力量<br>图灵的大教堂<br>天才向左，疯子向右（2册装）<br>松本清张经典推理大全集<br>死生有命·富贵在天<br>时间，快与慢<br>生命的活法<br>设计你所喜爱的人生<br>三星内幕：揭开三星第一的真相<br>情感机器<br>清晰表达的艺术<br>你的生存本能正在杀死你<br>美国种族简史<br>梅奥住院医生成长手记<br>逻辑思维简易入门<br>李嘉诚传：峥嵘<br>看懂世界冲突的一本书<br>卡耐基口才的艺术与人际关系<br>京极夏彦百鬼夜行中短篇集<br>近距离看美国（4册装）<br>好好赚钱<br>故宫物语<br>给孩子讲量子力学<br>高兴死了！！！<br>第一大亨（2册装）<br>第二性Ⅱ<br>第二性I<br>道金斯传（2册装）<br>财富与权力<br>伯罗奔尼撒战争史·下册<br>伯罗奔尼撒战争史·上册<br>FBI心理洞察术<br>APPLE独霸未来的秘密蓝图<br>7分钟理财<br>30天精读MBA<br>跃迁：成为高手的技术<br>幽默管理学<br>遗失的智慧<br>心智跃迁四部曲（4册装）<br>无所事事的艺术<br>微信营销36计<br>枢纽：3000年的中国<br>时间重生<br>神经科学讲什么<br>身份危机<br>人类的荣耀：是什么让我们独一无二<br>企业的大数据战略<br>女性巅峰系列（4册装）<br>漫画心理学与读心术<br>刻意练习：如何成为一个高手(1)<br>匠人匠心：愚直的坚持<br>华为研发（第3版）<br>跟知名主持人学超级口才<br>赋能领导力<br>房思琪的初恋乐园<br>对冲之王：华尔街量化投资传奇<br>东野圭吾：白金数据<br>超有效的10堂销售心理课<br>超有效的10堂销售口才课<br>超有效的10堂销售技巧课<br>爸爸军团<br>真实的幸福<br>曾文正公家书<br>印度三部曲3：百万叛变的今天<br>印度三部曲2：受伤的文明<br>印度三部曲1：幽暗国度<br>一本书读懂法律常识<br>新零售时代三部曲<br>销售中的心理学<br>王二的经济学故事<br>王道的经营（6册装）<br>生命的未来<br>莎士比亚悲剧喜剧全集（5册装）<br>如何养育男孩<br>认知盈余（经典版）<br>人类存在的意义<br>情绪勒索<br>千面英雄<br>脑机穿越：脑机接口改变人类未来<br>麦肯锡图表工作法<br>晋升<br>基因传：众生之源<br>活出最乐观的自己<br>会讲故事才是好演讲<br>动物武器<br>创业头条<br>创新者的密码<br>持续的幸福<br>昨日的世界：一个欧洲人的回忆<br>中国震撼三部曲<br>再生砖<br>远见<br>原则<br>宇宙墓碑<br>信任的速度<br>惜别<br>沃顿商学院最实用的谈判课<br>未来时间使用手册<br>屠夫十字镇<br>统整的力量<br>斯通纳<br>全脑教养法<br>千年金融史<br>企业理论四书<br>奇特的一生<br>南明史：1644—1662<br>美国的故事（7册装）<br>逻辑的引擎<br>咖喱香肠的诞生<br>金融危机简史<br>极简生活法则<br>高效能人士的第八个习惯<br>富足（经典版）<br>傅雷译巴尔扎克作品集<br>发现你的天赋<br>东方学术概观<br>超级版图<br>超级IP<br>参与感：小米口碑营销内部手册<br>财富的理想国<br>玻璃球游戏<br>被仰望与被遗忘的<br>安徒生童话故事集<br>阿西莫夫：银河帝国（15册装）<br>音乐入门：丰子恺音乐五讲<br>虚拟现实：万象的新开端<br>星际穿越<br>新教育场域的兴起1895-1926<br>我们需要多少钱<br>完全写作指南<br>头发：一部趣味人类史<br>挑战：压力如何塑造我们<br>苏珊·福沃德心理学经典作品集（依恋 原生家庭 执迷）三册套装<br>苏富比的早餐：职业拍卖大师写给你的艺术启蒙A-Z<br>斯坦福商业决策课<br>十二个明天<br>深思与省悟<br>深入理解Java虚拟机：JVM高级特性与最佳实践<br>如何提升爱的能力<br>人工智能简史<br>区块链：定义未来金融与经济新格局<br>牛奶可乐经济学<br>尼罗河上的惨案<br>名画中的希腊神话：轻松读懂艺术史<br>美的情绪：西洋画派十二讲<br>漫步华尔街(原书第10版)<br>麻省理工深度思考法<br>季羡林：国学大师斑斓人生书系（全8册）<br>极简法则_从苹果到优步的深层简化工具<br>还原真实的美联储<br>哈佛商学院谈判课<br>股票投资的24堂必修课<br>发现心流：日常生活中的最优体验<br>狄更斯英国简史<br>传习录<br>超级连接者<br>不会被机器替代的人：智能时代的生存策略<br>AI 未来<br>专注力：化繁为简的惊人力量<br>中国震撼三部曲<br>中国人的心灵<br>战天京<br>月光狂想曲<br>悠悠南北朝之三国归隋的统一路<br>悠悠南北朝：宋齐北魏的纷争史<br>用手帐书写更有趣的生活<br>以色列的诞生<br>夜脑：在睡眠中自动学习的秘密<br>喧哗与骚动<br>星空的琴弦：天文学史话<br>侠隐.<br>无须等待<br>我的一生略小于美国现代史<br>未来的冲击<br>危机经济学<br>图解创新管理经典<br>算法的陷阱<br>斯坦福大学危机管理课<br>思考的艺术（原书第10版）<br>思考，快与慢<br>时机管理<br>生命的法则<br>社群营销<br>女性脑<br>你以为你以为的就是你以为的吗？<br>内向超越与多元文化<br>秒懂力<br>美国人与中国人<br>领导力思维<br>列奥纳多·达·芬奇传<br>潦草<br>老板，这种设计没人买！<br>绝非偶然：社会心理学家阿伦森自传<br>精准表达.<br>经济的律动<br>技巧：如何用一年时间获得十年的经验<br>黑石的选择<br>海洋与文明<br>风流南宋.<br>费孝通论社会学学科建设<br>第五项修炼：学习型组织的艺术与实践<br>第三次浪潮<br>当代社会人类学发展<br>大争之世：战国<br>长寿的基因<br>被仰望与被遗忘的<br>柏拉图四书<br>八犬传（套装共七册）<br>爱的沟通：写给男士的科学恋爱指南<br>GUCCI：古驰王朝<br>学习经典套装（套装共7册）<br>自然作为理性<br>注意力经济<br>哲学·科学·常识<br>用图表看懂世界经济<br>意愿的冲撞<br>议事的科学<br>养育女孩<br>亚伯拉罕·林肯传<br>幸福的最小行动<br>瘟疫与人<br>为什么精英都是清单控<br>铁血蒙元<br>算法之美<br>数字乌托邦<br>世界文明史讲稿（修订版）<br>柔软的宇宙<br>奇妙数学史：数字与生活<br>品三国<br>脑力触发<br>麦肯锡用人标准：未来的人才标竿<br>冷启动：零成本做营销<br>科技重塑中国<br>技术创新简史<br>激情社会<br>基因：不平等的遗传<br>基辛格：理想主义者<br>回荡的钟摆<br>哈佛非虚构写作课<br>规划力：如何清晰预见成功轨迹<br>故事经济学<br>根本恶<br>高情商谈判<br>傅雷家书<br>二战的细节<br>帝国崛起病<br>大自然的常数<br>大国工程<br>从1到N：企业数字化生存指南<br>成为“最后一人”<br>成功人士的7个秘密<br>超级精力管理术<br>财政经典文献九讲<br>不可预知时代的可预知结果<br>比赛中的行为经济学<br>BBC世界史<br>AI进化论<br>一口气文史系列（套装共11册）<br>王阳明全集（修订版·套装共3册） - 王阳明<br>宋词小札 - 刘逸生<br>古典散文小品丛书（套装共7本）<br>父与子的编程之旅：与小卡特一起学Python (图灵程序设计丛书) - [美] Warren Sande<br>渡边淳一经典畅销书籍（21册套装）(1)<br>中国做对了什么<br>制度与繁荣<br>知识大迁移<br>在耶鲁精进<br>运营的套路<br>游戏改变人生<br>小小小小的火<br>无敌舰队<br>伟大创意的诞生：创新自然史<br>万物起源<br>玩的就是信用卡<br>同时<br>腾讯战略法<br>生活中的运筹学<br>升维：争夺产品认知高地的战争<br>认识商业<br>群体性孤独<br>千古一帝秦始皇<br>内心的重建<br>论摄影<br>领导力的五项修炼<br>来自纳粹地狱的报告<br>国王的两个身体<br>硅谷革命：成就苹果公司的疯狂往事<br>高效演讲（全彩版）<br>风格感觉：21世纪写作指南<br>大国宪制<br>从点子到产品<br>沉浸感：不可错过的虚拟现实革命<br>布克奖获奖小说通览<br>缤纷的生命<br>癌症的真相<br>3G资本帝国<br>数字黄金<br>规模<br>《重新设计生命：基因组编辑技术如何改变世界》<br>《中国经济2019》<br>《指挥大师的领导课》<br>《哲学之美》<br>《医生最想让你读的书》<br>《写作是最好的自我投资》<br>《写给父母的未来之书<br>《像开创者一样思考》<br>《我的世界观》<br>《网络心理学：隐藏在现象背后的行为设计真相》<br>《斯坦福高效睡眠法》<br>《谁将主宰世界：支配世界的思想和权力》<br>《刷屏：视频时代的疯传法则》<br>《世界》<br>《破茧成蝶2：以产品为中心的设计革命》<br>《奈飞文化手册》<br>《理性的抉择：女性如何做决定》<br>《老子之道》<br>《蜡烛图精解：股票和期货交易的永恒技术（典藏版）》<br>《活好：我这样活到105岁》<br>《管理架构师：如何构建企业管理体系》<br>《高维度思考法》<br>《高是种天赋》<br>《多样红利》<br>《东西之道》<br>《地平线2025：人工智能来了》<br>《大自然的社交网络》<br>《茶杯里的风暴》<br>《iPhone简史 》<br>走出荒野<br>重塑制造业（实践篇）<br>终身失忆人<br>原型与集体无意识<br>与原生家庭和解<br>英格兰文学（牛津通识读本）<br>希腊人的故事（全三册）<br>微文案：碎片时代的文案创意手册<br>石黑一雄作品集（套装共8册）<br>神经的逻辑<br>七堂思维成长课<br>品牌物理学<br>脑与意识<br>昆虫记<br>考古的故事<br>管理美元：广场协议和人民币的天命<br>二战史诗三部曲（珍藏版）<br>独立，从一个人旅行开始<br>城市的张望<br>长物志：做自己生活的设计师<br>彼得·林奇的成功投资<br>暗网<br>再造卓越<br>赢家的诅咒<br>一千零一次死亡<br>耶鲁大学公开课：死亡<br>新零售：低价高效的数据赋能之路<br>希望为电影<br>吾国与吾民<br>无印良品世界观<br>无人生还<br>我的孤单，我的自我：单身女性的时代<br>为什么嫉妒使你面目全非<br>万有引力之虹<br>土耳其简史<br>天才的编辑<br>态度<br>索罗斯传<br>算法霸权<br>思维<br>数文明<br>扫地出门：美国城市的贫穷与暴利<br>趋势<br>你一生的故事<br>男人来自火星，女人来自金星：修炼亲密关系的方法<br>内向者沟通圣经<br>蒙台梭利家庭方案<br>美术馆里聊怪咖<br>美国政党与选举<br>流血的仕途：李斯与秦帝国（全两册）<br>领导力的精进<br>蓝色思维<br>坚毅<br>驾驭未来：抓住奇点冲击下的商机<br>火星编年史<br>荷尔蒙战争<br>好战略，坏战略（畅销版）<br>诡异心理学<br>方尖碑之门<br>第一推动丛书·宇宙系列_黑洞战争<br>存在感<br>城堡<br>成为独角兽<br>奥斯曼帝国的终结<br>用脑拿订单<br>电话销售中的心理学<br>《猫武士二部曲·新预言》第一季《午夜追踪》<br>《猫武士二部曲·新预言》第五季《黄昏战争》<br>《猫武士二部曲·新预言》第四季《星光指路》<br>《猫武士二部曲·新预言》第三季《重现家园》<br>《猫武士二部曲·新预言》第六季《日落和平》<br>《猫武士二部曲·新预言》第二季《新月危机》<br>做有出息的孩子<br>做情緒的小主人<br>做偶像老爸老妈<br>最好的健康给孩子<br>走向清华：冷智妈妈育儿拙记<br>自尊女孩手册<br>自尊男孩手册<br>准妈妈怀孕必备手册<br>专家给学生的心理呵护书<br>中国英才家庭造<br>中国女性的感情与性<br>中国农村留守儿童调查：世纪之痛<br>中国儿童早期能力训练方案0-3岁<br>智慧父母　天才儿女<br>正义联盟：正邪大战，一触即发！<br>正面管教<br>拯救男孩<br>这样说孩子最能接受<br>招生办<br>怎样对孩子说“不”<br>孕妇学校<br>孕产·胎教·育儿细节全方案<br>月亮说的话<br>遇见好老师<br>育儿要懂心理学<br>育儿学校<br>幼儿工作者的视野<br>有趣的制造<br>有趣的食物链（布奇乐乐园系列）<br>有奉献精神的父母培养大人物<br>犹太人给子女的8种福分<br>优秀父母决定孩子一生的对话法<br>用智慧造就孩子<br>用妈妈的信任握住孩子的手<br>影响孩子一生的性教育<br>影响孩子一生的50种习惯<br>赢在青春起跑线：这样学习更轻松<br>赢在青春起跑线：责任胜于能力<br>赢在青春起跑线：我的圈子我做主<br>赢在青春起跑线：青春密语（女孩版）<br>赢在青春起跑线：青春密语（男孩版）<br>英才，就是这样培养出来的<br>益生菌健康宝典<br>医生爸爸，药剂师妈妈的育儿经<br>一岁就上常青藤<br>一个哲理点醒孩子一生<br>一分钟读懂孩子心理<br>耶和迪博士妊娠分娩育儿全书<br>爷爷奶奶的“孙子兵法”<br>颜氏家训<br>学校不大教的56门必修课<br>学前儿童游戏<br>学会与孩子沟通<br>新学习革命<br>新亲子时代的教子法则<br>新婚·孕产·育儿<br>心灵导航教子有方<br>小学一年级决定孩子的一生<br>小学生妈妈们的第一本教科书<br>小王子写给妈妈的信<br>小朋友最爱问的经典科学谜题<br>小男子汉<br>现场教育 造就英才·城市家庭<br>现场教育 造就英才·爱心农村<br>希腊三部曲<br>夕会故事：做人的教育与启迪<br>我身边的家庭教育故事<br>我陪老婆坐月子<br>我们男孩<br>我家小孩有人缘<br>我家小孩会学习<br>我的事业是父亲2：蔡笑晚教育家书<br>我的圈子我做主<br>我的美利坚本科岁月<br>我带安琪安东游学世界<br>望子成龙（王子版）<br>望女成凤（公主版）<br>王金战育才方案——学习哪有那么难<br>顽皮故事集<br>玩到5岁，学啥都不晚<br>图解养育女孩<br>图解养育男孩<br>透析童年——让爱走向成熟<br>童年不同样<br>天才少年必备：孩子一生最受用的40种能力<br>提升孩子竞争力的72个方法：让孩子赢在“起跑线”<br>疼孩子,今天开始学保健<br>胎教影响孩子未来的神奇手册<br>斯特娜夫人自然教育全书<br>斯波克博士教子经<br>说对了，孩子就会了<br>谁误解了孩子的行为<br>谁拿走了孩子的幸福<br>双赢育儿法：好方法成就好妈妈<br>世界上最受欢迎的九种教育方法<br>世界华文优秀儿童文学精选-同学少年<br>时尚妈咪孕育笔记<br>时尚妈咪宝贝计划<br>十月的秘密：辣妈驾到<br>神奇的电（布奇乐乐园系列）<br>善解童贞——决定孩子一生幸福的性教育<br>三十几岁轻松做妈妈<br>锐意：走近联合国的女孩<br>如何阅读一本书<br>如何说青少年才会听，怎么听青少年才肯说<br>如何说孩子才能和平相处<br>如何说孩子才肯学<br>如何说孩子才会听：父母与孩子沟通的圣经<br>如何教宝宝学数学<br>如何对孩子说“不”<br>让我们做最好的母亲<br>让你的孩子更聪明：5岁前，将孩子的智商再提高30分<br>让孩子自己去打拼<br>让孩子着迷的101本书<br>让孩子心灵强大<br>让孩子国学起步语文腾飞<br>让孩子爱上数学的扑克游戏<br>青春密语（男孩版）<br>青春密语(女孩版)<br>亲子财商训练第一书<br>起诉教育<br>奇迹课程<br>七田真天才胎教法<br>七田真0<del>6岁育儿法<br>七～八年级，孩子一生的关键期<br>凭什么让学生爱上你<br>平凡的孩子也有春天<br>平安成长比成功更重要<br>培养最了不起的男孩<br>培养领袖儿童<br>培养了不起男孩的100个细节<br>培养孩子最好的情商<br>培养孩子好习惯的60招<br>培养孩子财智基因的60个细节<br>鸟类朋友（布奇乐乐园系列）<br>你在为谁学习<br>你会和孩子说话吗？<br>你的世界安全吗？<br>你的孩子一定有自己的强项<br>男孩来自火星，妈妈怎么办<br>男孩的冒险书<br>那些让孩子感到幸福的事儿<br>母道<br>母爱的力量——母爱如何塑造和促进婴儿的大脑发育<br>名人是怎样教育孩子的<br>蒙台梭利幼儿教育著作精选<br>美丽的教育<br>美国语文：美国当代中学语文教程<br>每天5分钟，激励孩子成就好未来<br>每个孩子都是第一名<br>没有教不好的孩子，只有不会教的父母<br>猫头鹰的叫声<br>忙碌爸爸也能做好爸爸<br>慢养：给孩子一个好性格<br>妈妈是最好的老师<br>妈妈是一盏明亮的灯<br>妈妈是孩子最好的老师<br>妈妈给女儿的信<br>妈妈改变孩子一生的101种方法<br>妈妈改变孩子的一生<br>妈妈成长记<br>妈妈必须教给女儿的事<br>妈妈，请这样跟我说话<br>妈妈CEO<br>留学垃圾<br>领先一步-让我变聪明的60个思维训练<br>零吼叫养出100%好孩子<br>林格教你：21天提高孩子做人与做事习惯<br>林格教你：21天提高孩子学习与思维习惯<br>林格教你：21天提高孩子思维力和表达力<br>林格教你：21天提高孩子记忆力和想象力<br>林格教你：21天提高孩子观察力和创造力<br>理解儿童的行为：从出生到5岁有效管理<br>梨园往事<br>乐爷爷的“孙子兵法”<br>老土的女孩儿<br>劳拉育儿经——0</del>1岁养育指南<br>懒妈妈快乐育儿经<br>快乐育儿百科<br>快乐的孩子最健康<br>卡尔·威特的教育<br>决定孩子一生的理财教育<br>决定孩子一生的50种性格<br>决定孩子命运的12个习惯<br>精养女儿实验报告——高老师秘传教女有方100例<br>接纳孩子：父母的接纳奠定孩子的一生<br>教育专家16年的教子手记：好妈妈胜过好老师<br>教育是一种大智慧<br>教育是没有用的<br>教育就是习惯培养<br>教育就是培养好习惯——孙云晓教育作品集<br>教育就是个性品质培养：好品性，好命运<br>教育的核心是培养健康人格——孙云晓教育作品集<br>教育从尊重开始——孙云晓教育作品集<br>教育病<br>教养可以这么浪漫<br>教学作为德性实践<br>教出专心的孩子<br>教出这样的好孩子<br>教出优秀男孩就这么简单<br>教出完美女孩就这么轻松<br>教出品行良好的孩子<br>讲给孩子的人体使用手册<br>剑桥家训<br>价值10亿的教育课<br>家教沉思录：家庭教育的通俗读本<br>家家都有好孩子<br>家长的革命<br>家长必修的21堂教育课<br>会玩的孩子更聪明<br>会跳舞的向日葵：香草和好朋友们的故事<br>怀孕必读<br>话说对了，孩子就会听了<br>画出好成绩<br>红孩子<br>嘿，我知道你<br>和儿子一起成长<br>和爸爸妈妈一起快乐写作<br>好孕自然来<br>好妈妈胜过好医生<br>好妈妈胜过好老师<br>好妈妈成就好孩子<br>好妈妈不妨“懒”一点<br>好教育好人生<br>好家庭胜过好学校<br>好家庭就是好学校<br>好孩子是这样教出来的<br>好孩子是家庭的财富<br>好孩子从妈妈的好耐心开始<br>好父母胜过好老师<br>好父母教好“富二代”<br>好父母成就好孩子：百名校长为家长支招<br>好方法成就好妈妈<br>好大的勺子（布奇乐乐园系列）<br>好爸爸胜过好老师：实践篇<br>好爸爸胜过好老师<br>好爸爸教育好孩子的100个细节<br>海市蜃楼<br>海伦·凯勒的教育<br>孩子你为什么不听话<br>孩子到底应该怎么管<br>孩子成长中的56个怎么办<br>孩子啊，你将会是有钱人<br>孩子，我们来谈谈生命<br>孩子，妈妈知道你的心理<br>孩子，爸爸其实不想和妈妈离婚<br>怪医杜里特的故事<br>怪医杜里特的故事(2)<br>故事里有你的梦想<br>给男孩的危险手册<br>给父母们的50个忠告<br>告诉孩子怎样爱<br>高野优的幸福育儿百科<br>高效能学习的78个金点子<br>高效能父母的21个教子习惯<br>感动中国的十大优秀母亲<br>改变孩子一生的200句话<br>改变孩子，先改变父母<br>父母是孩子最好的营养师<br>父母是孩子最好的医生<br>父母是宝宝最好的营养师0-3<br>父母会说话，孩子就听话<br>父母改变 孩子改变<br>父母的品格影响孩子的一生<br>父母的品格<br>父母大学<br>父母必知的100个教子智慧<br>福禄培尔幼儿教育著作精选<br>冯德全早教方案⑩：用对方法教孩子<br>风在哪里：2-3岁综合读本（布奇乐乐园系列）（套书）<br>放学后的侦探队<br>方舟子带你走近科学<br>发现母亲：成为天才的母亲<br>儿子韩寒<br>儿童的成长：另一种记忆<br>儿童吃什么：儿童营养饮食经<br>断奶宝宝吃什么<br>独生子女教育启示录<br>独生子女的幸福未来<br>读懂孩子的身体语言：好父母的必读手册<br>东京塔<br>调教<br>第56号教室的奇迹<br>德慧智慧性 图文思维教育：别把孩子教笨了<br>大头儿子升级版：GO GO GO踢球去系列（3册）<br>大海在哪里<br>大肚皮私想录<br>聪明格·1 入门篇<br>聪明，就是这样培养出来的<br>处世与礼仪<br>吃对了就能大大提高孩子的智力<br>成就孩子一生的50种心态<br>成绩单<br>超右脑快速记忆法<br>超右脑开发训练<br>曹文轩美文朗读丛书<br>不择手段背单词<br>不打不骂教孩子的100种方法<br>不打不骂教孩子60招<br>不必牺牲自己也可以教出幸福的孩子<br>捕捉儿童敏感期<br>宝贝要上幼儿园<br>宝贝不生病<br>宝贝，宝贝<br>棒棒老师系列：会魔法的新老师<br>伴随孩子成长的小故事<br>爸爸妈妈我和她：童稚独白<br>爸爸妈妈家庭教育心理学<br>爸爸的游戏革命——玩出聪明孩子<br>爸爸的习惯革命——亲亲我的宝贝<br>爸爸的亲子游戏书<br>安妮的天使<br>爱你以性<br>爱丽斯漫游奇境<br>爱和自由—孙瑞雪幼儿教育演讲录（全新增订第四版）<br>爱孩子，更要懂孩子<br>阿特米斯之精灵的赎金<br>阿特米斯之北极圈大战<br>阿米：星星的孩子<br>阿米2：宇宙之心<br>《第一届“THE NEXT&amp;#8226_文学之新”新人选拔赛作品集》上<br>“不听话”的孩子怎样教<br>“笨”孩子的硕博之路<br>80后新爸妈育儿经(0～7岁）<br>50个父母常犯的教子错误<br>4年级，决定孩子一生的关键<br>40周胎教全程指导<br>3岁决定孩子的一生<br>31个坏习惯毁了孩子的大未来<br>10岁之前教会孩子如何做人<br>1-2年级，塑造孩子一生的关键<br>0~3岁宝宝潜能开发<br>资本之王<br>隐性逻辑：教你快速切换思考方式<br>演讲的本质<br>心智探奇：人类心智的起源与进<br>心智社会<br>卧底经济学（全4册）<br>为孩子重塑教育：更有可能成功的路<br>思想本质：语言是洞察人类天性之窗<br>视觉锤<br>十二怒汉<br>人类简史<br>穷查理宝典<br>慢思考 _ 大脑超载时代的思考学<br>联邦论：美国宪法述评<br>决战大数据：大数据的关键思考<br>激荡十年，水大鱼大<br>灰犀牛<br>帝王师：张居正<br>帝王师：刘伯温<br>大数据时代<br>超文案<br>爆发：大数据时代预见未来的新思维<br>TED思想的力量系列<br>24部西方思想大师巨著<br>追风筝的人12.99<br>终身成长<br>知行合一王阳明12<br>一分钟财富课14<br>天朝的崩溃<br>设计心理学（4册装）<br>日本新中产阶级29.99<br>培根随笔8.94<br>玫瑰的名字9.99<br>江湖外史9.99<br>价值的理由<br>计算进化史：改变数学的命运19.99<br>管理学100年19.9<br>管好自己，就靠这几招15.6<br>赌神数学家<br>达·芬奇密码23.99<br>阿尔萨斯的一年14.94<br>谁的青春不迷茫 你的孤独，虽败犹荣（套装共2册）<br>远山淡影-石黑一雄<br>无可慰藉-石黑一雄<br>长日留痕-石黑一雄<br>被掩埋的巨人 -石黑一雄<br>曹文轩小说馆(套装共5册)<br>余秋雨作品集 （套装共14册）<br>做最好的自己：做人不要太老实<br>做最好的自己<br>做人处事精美短文选<br>做单<br>最好的创业完全手册<br>自我修炼的经典佳作：卓有成效的管理者<br>卓有成效的管理者<br>赚钱小窍门：生活中不可或缺的赚钱智慧<br>中国特种部队生存实录<br>中国式管理的30个大手段和40个小细节<br>中国人性潜规则<br>中国人史纲<br>中国经济转型30年（1978-2008）<br>中国经济再崛起——预测中国经济的未来<br>中国经济的12个问号<br>中国经典营销案例大全和世界营销绝妙点子<br>中国发现世界谜团玄机：古地图密码<br>中国第一职业经理人唐骏自传：我的成功可以复制<br>职业生涯之上班手册<br>职业生涯之环境手册<br>职场局中局<br>职场成功经验：上班族必懂的OFFICE天择定律<br>政府有钱为何不如民间富有：金融的逻辑<br>证券投资知识及指引<br>这才是经济学：经济学的误解与真相<br>增长与危机管理<br>曾仕强再掀易经管理风暴：洞察易经的奥秘<br>在北大讲易经：太易自主管理<br>再危机：泡沫破灭时,我会通知你<br>有效时间管理法则：放开自己<br>永恒的价值-巴菲特传<br>影响中国历史的六大巨人<br>影响你一生的管理哲学：管理十诫<br>赢在起点：职场新人要懂的52件事<br>赢市场<br>赢得好人缘的行动指南：女人交际书<br>赢单<br>营销管理<br>以人为本——孔子管理学<br>一课经济学<br>一个外企面试官的面经<br>一个美国资本家的成长—世界首富沃伦·巴菲特传<br>一个成本杀手的管理自白<br>一部黑社会百科全书：阴影中的人<br>阳光伴我行——大学生情绪管理<br>幸福女人必修的经济学<br>心灵思维法则：如何掌控你的财富与生活<br>心灵鸡汤<br>小书包里的经济学<br>萧条经济学的回归和2008年经济危机<br>西方管理思想史（插图第4版）<br>五项管理口袋书<br>卧底经济学<br>我们怎么过冬-当经济环境糟糕时<br>我们相信变革<br>我和我的经济适用男<br>温州样本：温州民营经济草根创业史<br>伟大的中国经济转型<br>伟大的博弈<br>微观经济学<br>网上开店七日通<br>团队建设与员工管理<br>天下女人的婚恋必修课：嫁人经济学<br>腾讯十年真实创业成长史：腾讯十年<br>探索爱的本质：少有人走的路<br>孙子兵法与三十六计<br>瞬间抓住人心的66个关键<br>瞬间赢得同伴信任的心理学-冷读术<br>输赢作者商场角逐大戏：绝对角力<br>输赢<br>守财理财经：幸福女人必修的经济学<br>市场营销学60例<br>世界营销绝妙点子800例<br>世界上最神奇的24堂课<br>世界上最富有的人：卡内基新传<br>史蒂夫·乔布斯管理日志<br>实战外汇投资<br>时间管理幸福学：管理好自己和时间的关系<br>十字路口的中国经济<br>商界政界通行无阻的美国女人：反骨者赢<br>色眼识人-FPA性格色彩密码<br>三天读懂经济学<br>如何有效提升执行力：赢在执行(员工版)<br>如何管理软件企业<br>融资风暴<br>日常生活的冒险<br>任正非管理日志<br>人性记录<br>人生的智慧<br>人力资源顶级方法与实操大全<br>让生命拥有一切可能：活出自己<br>让人无法说NO的攻心说话术<br>诠释500强外企生存秘密：赢单<br>全球化的视角：世界是平的<br>趣味经济学100问<br>穷爸爸富爸爸<br>情商铸就精英<br>清算谎言经济学<br>清·华<br>轻松抓住企业经营大局：看不懂财报,做不好管理<br>强大团队如何炼成：团队建设与员工管理<br>企业最佳实践案例：企业过冬12种活法<br>企业家长远战略：增长与危机管理<br>企业高效的保证：赢在精细化<br>七匹狼专卖店运作手册<br>平面设计师应该知道的印刷流程<br>牛奶可乐经济学3<br>牛奶可乐经济学<br>尼米兹<br>内向者优势：如何在外向的世界中获得成功<br>民国经济<br>梦想管理<br>美元刀：美元全球经济殖民战略解析<br>美元霸权与经济危机（上、下册）<br>美高科技业真相：乔布斯的秘密日记<br>每个人的经济学<br>冒牌千金推理系列<br>曼昆经济学原理<br>麦肯锡三部曲1：麦肯锡方法<br>马云管理日志<br>马云点评创业<br>领导的秘密：成功领导的17堂课（管理的阶梯·转型）<br>恋爱教科书—教你如何谈恋爱<br>郎咸平文字全集<br>郎咸平说谁都逃不掉的金融危机<br>郎咸平说：谁在拯救中国经济-1293101278495<br>困局经济学<br>快速提升员工能力：赢在执行（员工版）<br>科特勒营销管理<br>看高盛如何算赢世界：干掉一切对手<br>看懂经济迷局<br>看不懂的中国经济<br>看不懂的世界经济<br>开发你的潜能：199个侦探推理游戏<br>开车经济学<br>精神现象学<br>经济周期循环论<br>经济指标解读<br>经济学的香槟<br>经济学大师如是说<br>经济危机孕育最大商业机会<br>经济视野下的历史变迁：帝国启示录<br>经济杀手：美国欺诈全球真相<br>经济低增长企业对策：中小企业融资渠道<br>经济的坏脾气<br>经典营销案例149篇<br>金融资产鲸吞黑幕：做赔<br>金融资本的内幕：揭秘高盛<br>金融危机下如何找份好工作：赢在路上<br>金融如何影响世界历史：货币崛起<br>金融波动与家庭财富管理<br>解码中国管理模式<br>接受21天不抱怨挑战：不抱怨的世界<br>教你做职场细节达人：赢在精细化<br>健康管理手册：白领必备<br>嫁人经济学<br>绩效考核量化管理全案<br>货币战争（1～4实体书版全集）-宋鸿兵<br>货币长城<br>华为时间管理培训<br>华尔街<br>后现代经济<br>后危机时代的中国机会·经济篇<br>和经济学先生约会<br>哈佛女孩刘亦婷<br>哈佛经理的谋略<br>过剩经济学<br>国富论<br>广告学<br>管理者的性格魅力：领袖性格<br>管理者的心理课<br>管理要像一部好电影<br>管理学教程<br>管理思想全书<br>管理如歌<br>管理人生的策略：跬步人生<br>管理：使命、责任、实务——实务篇<br>管理（原书修订版）下册<br>管理（原书修订版）上册<br>股市入门基础<br>股市大赢家：我用K线写日记<br>股票作手回忆录 埃德温·利非弗、杰西·利弗莫尔<br>股票-从入门到精通<br>沟通技巧实用宝典<br>攻心为上<br>工作生活双赢法则：少的力量<br>跟老子学无为领导 跟孔子学有为管理<br>给你一个亿<br>高效能人士的七个习惯<br>岗位职责大全<br>感情经济学：如果梁山伯懂点博弈论<br>改造心灵一生等待的书：与神对话<br>福布斯富豪的资本运作：赢在资本<br>反思与展望：中国经济学60年<br>法律与资本主义的兴起<br>动荡时代的管理<br>电子商务理论<br>第一：中国经济改革源头探秘<br>地产大亨冯仑的创业人生：野蛮生长<br>德鲁克经典管理案例解析<br>德鲁克管理思想解读<br>从员工管理开始<br>从优秀到卓越（社会机构版）<br>从零开始学攻心术<br>从零开始<br>从此不再开口就紧张：如何在任何场合讲话都不怯场<br>创世神之神的赌约<br>成就你一生的100个哲理<br>成精变人<br>成功哲学：世界富豪智慧<br>成功人士战胜疲劳的办法<br>成功传之王的风<br>陈志武与女儿谈商业模式<br>陈志武说中国经济<br>沉浮史玉柱-一个感动中国的创业故事<br>炒股的智慧<br>超越金融索罗斯的哲学<br>超级师傅<br>超级记忆力——图像记忆法<br>超爆魔鬼经济学<br>操纵<br>不做经济白痴<br>崩溃的帝国——催化世界经济权力交接的新进程<br>北京大学光华管理学院：给你一片海阔天空<br>白领必备健康管理工具书：健康管理手册<br>《中华人民共和国合同法》释义<br>YOU身体使用手册2：腰部管理<br>IT管理框架<br>facebook效应- [美] 大卫·柯克帕特里克<br>ERP项目管理散记<br>24小时改变你的人生<br>21世纪的管理挑战·管理的实践<br>18岁以后读点经济学<br>11经济与社会<br>神秘博士：沙达（英伦国民科幻喜剧 专注穿越五十年 谢耳朵周末必备剧目）<br>美国众神<br>英语词缀与英语派生词  - Li Ping Wu<br>英语词根与单词的说文解字 - Li Ping Wu<br>新东方考研英语乱序 2013版<br>词以类记：TOEFL iBT词汇 - 张红岩<br>TOEFL词汇词根＋联想记忆法：45天突破版 - 俞敏洪<br>第七感<br>爆裂<br>所谓情商高，就是会说话<br>有毒的逻辑：为何有说服力的话反而不可信<br>理性乐观派：一部人类经济进步史- 英 里德利（Ridley M.）<br>经济学原理<br>Blind Faith - Lyons</em> CJ<br>The Ginger Man - J. P. Donleavy<br>The Postman Always Rings Twice - James M. Cain<br>The Sheltering Sky - Bowles, Paul<br>Sophie’s Choice - William Styron<br>Under The Net - Iris Murdoch<br>Wide Sargasso Sea - Jean Rhys<br>The Magus - John Fowles<br>Ironweed - William Kennedy<br>Tobacco Road - Erskine Caldwell<br>Midnight’s Children - Salman Rushdie<br>Sons and Lovers (Barnes &amp; Noble Classics - D. H. Lawrence<br>Loving - Henry Green<br>The Call of the Wild and White Fang - Jack London<br>pg5247<br>Ragtime - E.L. Doctorow<br>pg5658<br>The Death of the Heart - Elizabeth Bowen<br>A Bend in the River - V.S. Naipaul<br>Angle of Repose - Wallace Stegner<br>The Adventures of Augie March - Saul Bellow<br>Brideshead Revisited - Evelyn Waugh<br>Darkness at Noon - Arthur Koestler<br>A Room with a View - E. M. Forster<br>Kim (Barnes &amp; Noble Classics Series) - Rudyard Kipling<br>Finnegans Wake - James Joyce<br>The Prime of Miss Jean Brodie - Muriel Spark<br>Scoop - Evelyn Waugh<br>A Farewell to Arms - Ernest Hemingway<br>Nathanael West - The Day of the Locust<br>A House for Mr. Biswas - V.S. Naipaul<br>A High Wind in Jamaica - Richard Hughes<br>The Alexandria Quartet - Lawrence Durrell<br>Catch-22 - Heller, Joseph<br>House of Mirth (Barnes &amp; Noble Classics  - Edith Wharton<br>Main Street (Barnes &amp; Noble Classics Ser - Sinclair Lewis<br>Heart of Darkness and Selected Short Fic - Joseph Conrad<br>Of Human Bondage - W. Somerset Maugham<br>A Clockwork Orange - Burgess, Anthony<br>The Catcher in the Rye - J.D. Salinger<br>The Wapshot Chronicle - John Cheever<br>From Here to Eternity_ The Restored Edit - Jones, James<br>The Moviegoer - Walker Percy<br>The Sound and the Fury - William Faulkner<br>pg1845<br>The Age of Innocence - Edith Wharton<br>Some Do Not . . ._ A Novel - Ford Madox Ford<br>No More Parades_ A Novel - Ford Madox Ford<br>A Man Could Stand Up - Ford Madox Ford<br>The Maltese Falcon - Dashiell Hammett<br>On the Road - Jack Kerouac<br>Light in August - William Faulkner<br>Pale Fire - Vladimir Nabokov<br>Portnoy’s Complaint - Philip Roth<br>Norman Mailer - The Naked and the Dead<br>Tropic of Cancer - Miller, Henry<br>Brave New World - Aldous Huxley<br>Women in Love (Barnes &amp; Noble Classics S - D. H. Lawrence<br>pg28948<br>pg2021<br>pg974<br>The Sun Also Rises - Ernest Hemingway<br>Point Counter Point - Aldous Huxley<br>The Valley of Bones - Anthony Powell<br>The Soldier’s Art - Anthony Powell<br>The Military Philosophers - Anthony Powell<br>The Kindly Ones - Anthony Powell<br>The Acceptance World - Anthony Powell<br>Temporary Kings - Anthony Powell<br>Hearing Secret Harmonies - Anthony Powell<br>Casanova’s Chinese Restaurant - Anthony Powell<br>Books Do Furnish a Room - Anthony Powell<br>At Lady Molly’s - Anthony Powell<br>A Question of Upbringing - Anthony Powell<br>A Buyers Market - Anthony Powell<br>Deliverance - James Dickey<br>Lord of the Flies - William Golding<br>The Heart of the Matter - Graham Greene<br>Lolita - Vladimir Nabokov<br>Go tell it on the mountain - James Baldwin<br>Howards End - E. M. Forster<br>The bridge of San Luis Rey - Thornton Wilder<br>All the King’s Men - Robert Penn Warren<br>As I Lay Dying - William Faulkner<br>A Handful of Dust - Evelyn Waugh<br>Sister Carrie (Barnes &amp; Noble Classics S - Theodore Dreiser<br>The Golden Bowl - Henry James<br>Animal Farm - George Orwell<br>pg2775<br>pg4217<br>The Studs Lonigan Trilogy -  James T. Farrell<br>F. Scott Fitzgerald - Tender is the Night<br>pg432<br>Wings of the Dove (Barnes &amp; Noble Classi - Henry James<br>A Passage to India - E. M. Forster<br>pg416<br>U.S.A_ - John Dos Passos<br>Appointment in Samarra - John O’Hara<br>Henderson the Rain King - Saul Bellow<br>Native Son - Richard Wright<br>The Great Gatsby - F. Scott Fitzgerald<br>Invisible man - Ralph Ellison<br>Slaughterhouse-Five - Kurt Vonnegut<br>The Heart is a Lonely Hunter - Carson McCullers<br>An American Tragedy - Theodore Dreiser<br>To the Lighthouse - Virginia Woolf<br>I, Claudius - Robert Graves<br>Nineteen Eighty-Four - George Orwell<br>Under the Volcano - Malcolm Lowry<br>The Grapes of Wrath - John Steinbeck<br>Ulysses - Gabler Edition   </p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>封城下的外卖骑手：运送着希望的“无名之辈”</title>
    <link href="/2021/01/07/2020-06-03-everydayEnglish/"/>
    <url>/2021/01/07/2020-06-03-everydayEnglish/</url>
    
    <content type="html"><![CDATA[<h3 id="In-a-City-Under-Lockdown-Hope-Arrives-by-Motorbike-封城下的外卖骑手：运送着希望的“无名之辈”"><a href="#In-a-City-Under-Lockdown-Hope-Arrives-by-Motorbike-封城下的外卖骑手：运送着希望的“无名之辈”" class="headerlink" title="In a City Under Lockdown, Hope Arrives by Motorbike  封城下的外卖骑手：运送着希望的“无名之辈”"></a>In a City Under Lockdown, Hope Arrives by Motorbike  封城下的外卖骑手：运送着希望的“无名之辈”</h3><p>平日里，外卖骑手无处不在，但也总被忽视；而在疫情之下的武汉，他们是许多市民与外界的唯一连接，构成了这座城市的动脉。本篇文章，讲述了一位外卖员的故事，他的工作既支撑着武汉的“生命线”，同时也在靠这份收入维持一家人的生计。</p><p>By Vivian Wang</p><p>Delivery drivers in Wuhan and across China offer a lifeline to millions of people barricaded in their homes during the coronavirus outbreak, but the work puts them at risk.</p><p>新冠疫情期间，武汉和中国各地的送货骑手，成为了数百万被困家中居民的生命线，但这项工作使他们陷入风险之中。</p><p>The delivery driver did not want to go upstairs.</p><p>这位外卖骑手不想上楼。</p><p>The driver, Zhang Sai, hovered outside an apartment building in Wuhan, the central Chinese city at the heart of the coronavirus outbreak. He had been ordered not to take food to customers’ doors in order to minimize the risk of infection.</p><p>骑手张赛在中国中部城市武汉——此次冠状病毒疫情中心——的一幢公寓楼外踌躇。为了将感染的风险降至最低，他接到命令不得将食物送到顾客的家门口。</p><p>But the woman on the phone was pleading, he recalled. The food was for her mother, who couldn’t go down to meet him.</p><p>但是，他回忆说，电话中的女士在恳求他上去。食物是给她母亲买的，而她母亲无法下楼见他。</p><p>Mr. Zhang relented. He would drop off the order and sprint away. As he placed the bag on the floor, Mr. Zhang said, the door opened. Startled, he rushed away. Without thinking, he said, jabbed the elevator button with his finger, touching a surface he feared could transmit the virus.</p><p>张赛心软了。他本想放下东西然后马上离开。张赛说，当他把袋子放在地上时，门突然开了。他吓了一跳，匆忙跑开了。他想都没想，就用手指戳了电梯按钮，触碰到了可能带有病毒的按钮表面，这让他很担心。</p><p>That was how Mr. Zhang, 32, found himself speeding back to his delivery station with one finger held aloft, careful not to touch the rest of his hand — a quarantine in miniature.</p><p>就这样，32岁的张赛火速赶回到他的配送站点，一路上高高举着一根手指，小心翼翼地避免碰到手的其他部分——如同一个小型隔离现场。</p><p>“I was very scared,” he recalled in a telephone interview. “Because I ride a scooter, I felt the finger was like a flag.”</p><p>“我当时很害怕，”他在电话采访中回忆道。“因为我骑的是电动车，我感觉那一根手指头就像一面迎风的旗子。”</p><p>For many in China, delivery drivers like Mr. Zhang are the only connection to the outside world. Once a ubiquitous but invisible presence on the streets of nearly every Chinese city, the drivers are now being heralded as heroes.</p><p>对于许多中国人来说，像张赛这样的外卖骑手是他们与外界唯一的联系。在中国几乎每座城市的街道上，他们曾是无处不在却被人忽视的存在，而现在却成了人人称颂的英雄。</p><p>Throughout China, at least 760 million people — almost a tenth of the world’s population — face some form of residential lockdown. The restrictions are particularly strict in Wuhan, where government efforts to contain the virus have barricaded most of the 11 million residents in their homes.</p><p>在整个中国，至少有7.6亿人——几乎是世界人口的十分之一——面临着某种形式的住宅封锁。这种限制在拥有1100万居民的武汉尤其严格，政府为遏制该病毒的扩散实施各类举措，导致大多数人不得不待在家里。</p><p>Each household can send someone out for necessities just once every three days. Many residents do not venture outside at all, for fear of infection. Of the more than 2,100 deaths and nearly 75,000 infections linked to the new virus, the majority have been in Wuhan.</p><p>每个家庭每三天可以派一个人外出一次购买生活必需品。由于担心感染，许多居民根本不敢冒险外出。与新冠病毒相关的2100多例死亡和近7.5万例感染中，大多数发生在武汉。</p><p>But people still have to eat — which is why Mr. Zhang and legions of delivery drivers find themselves on the street each day. As Wuhan and the rest of the China hunkers down, they have become the country’s vital arteries, keeping fresh meat, vegetables and other supplies flowing to those who need them.</p><p>但是人们还是得吃饭，这就是为什么张赛和大批送货骑手每天都在街上忙碌的原因。随着武汉和中国其他地区的人们困守家中，他们已经成为这个国家的重要动脉，让新鲜的肉、蔬菜和其他物资流向需要的人。</p><p>It is grueling and dangerous work. Mr. Zhang, who works for Hema, a supermarket chain owned by the tech giant Alibaba, crisscrosses the city armed only with the face masks and hand sanitizer that his company supplies each morning.</p><p>这是项艰巨而危险的工作。张赛为科技巨头阿里巴巴旗下的连锁超市盒马鲜生工作，每天早上配备公司提供的口罩和消毒洗手液在城市中穿梭。</p><p>His company uniform, bright blue with a hippo logo, tells the local authorities that he is allowed to be on the road.</p><p>他身着鲜蓝色的公司制服，上面带有河马标识，这样地方当局知道他是可以上路的。</p><p>At night, he tries not to think about the epidemic. He listens to pop songs and looks for good news on TV.</p><p>在晚上，他试图不去想有关疫情的事。他会听听流行歌曲，看看电视上是否有好消息。</p><p>The dozens of trips he makes each day are born of not just Wuhan’s necessity but his own. His wife and 4-year-old twin boys, as well as his father, rely on him for financial support. He never considered taking time off, even after the danger of the outbreak became clear. When his family asked him to stop, he ignored them, too.</p><p>他每天要递送几十趟货，不仅是出于这座城市的需要，也是为了他自己的生活。他的妻子、4岁的双胞胎男孩以及他的父亲，都要依靠他提供经济支持。即使疫情的危险越来越明显，他也从未考虑过请假。就算家人要求他停下来时，他也不听。</p><p>Mr. Zhang’s family lives outside Wuhan, and he cannot visit because of the outbreak, but he video chats with them daily.</p><p>张赛的家人不住在武汉，由于疫情爆发他无法回去看他们，但他每天都会和家人们视频聊天。</p><p>If he goes fast and works long days, Mr. Zhang said, he could make about 8,000 yuan a month, or just over $1,100 — more than he made in his previous job as a mail courier. The average monthly salary in Wuhan in 2017 was about 6,640 yuan, according to the data provider CEIC.</p><p>张赛说，如果他骑得快一点并且工作时间够长，每个月可以赚大约8000元（约合1100美元出头），这比他以前担任邮递员的工作时赚的要多。根据数据提供商CEIC的数据，2017年武汉市平均月薪约为6640元。</p><p>Mr. Zhang and his colleagues offer one another a constantly updating stream of advice. It was one of Mr. Zhang’s colleagues who told him to use a key to press elevator buttons. Another afternoon, someone said in the company group text that a suspected coronavirus patient had died in Neighborhood 125. Don’t enter that area of Wuhan anymore, the message said.</p><p>张赛和他的同事们互相提供随时更新的建议。张赛的一个同事告诉他要用钥匙按电梯按钮。某天下午，有人在公司群里说，125小区一个疑似患者去世了。信息上说，大家就不要再进那个小区了。</p><p>“So damn unlucky,” a colleague said. “Those orders were assigned to me.”</p><p>“真他妈倒霉，”一位同事说。“125的单子派给我了。”</p><p>So far, none of Mr. Zhang’s co-workers have fallen sick, he said.</p><p>张赛说，到目前为止，他的同事没有一个生病。</p><p>The epidemic has brought some unexpected bright spots. Before, Mr. Zhang said, he sometimes ran red lights during rush hour in order to meet his delivery goals for the day. Now, the streets are empty. He has no problem getting around.</p><p>疫情带来了一些意想不到的亮点。张赛说，以前，为了完成当天的递送任务，他在高峰时段有时候会闯红灯。现在，街道空无一人，他去哪都很顺畅。</p><p>People are nicer, too. Some customers barely opened the door or avoided eye contact. After the outbreak erupted, everyone said thank you.</p><p>人们的态度也更好了。曾经，有些客户几乎不来开门或者看都不看一眼。疫情暴发后，每个人都说“谢谢”。</p><p>“There’s a saying: ‘A man’s words are kind when death is close,’” Mr. Zhang said. “Everybody is very tired. Everybody has been suffering for so long.”</p><p>“有一句话说：‘人之将死，其言也善。’”张赛说。“大家都很辛苦，都被折腾太久了。”</p><p>Those interactions are rarer now. This week, the Wuhan authorities ordered neighborhoods to establish “contactless delivery” points. When Mr. Zhang has a delivery, he takes it to a designated checkpoint in the customer’s neighborhood and leaves.</p><p>如今，这些互动也更少见了。本周，武汉当局下令各社区建立“无接触配送”点。张赛拿到货物后，便将其送到客户所在社区的指定检查站然后离开。</p><p>By far the best change, though, has been to Mr. Zhang’s after-work routine. Usually, he’d watch a movie or spend time with friends. Now, every night, he writes in a journal. Then he sends the entries to various online publications that — much to his delight — have begun sharing them.</p><p>不过，到目前为止，最好的变化在于张赛下班后的生活。通常，他会看个电影或和朋友聚一聚。现在，他每天晚上都会写日记。然后，他将日记发送给各种网络媒体，令他高兴的是，网络媒体已经开始发表这些日记。</p><p>His first post was published Jan. 30, in the online magazine Single Read. It was called “Self-narration of a Wuhan takeout worker.” Since then, he has published five more.</p><p>他的第一篇文章发表于1月30日的在线杂志《单读》中。标题为“一个武汉外卖员的自述”。从那以后，他又发表了五篇。</p><p>He writes of calling a friend to ask him to support his sons if he gets sick; of watching two older men play chess outdoors without masks; of taking in a crisp Wuhan day, with few around to share it.</p><p>他在文中写道，如果他生病了，就打电话给一位朋友，请他照顾自己的儿子们；写道自己看到两位老人在户外下象棋，不戴口罩；写他在武汉度过了天气爽朗的一天，身边却没有多少人可以分享。</p><p>“Normally, you would see more people sunbathing, playing chess, grocery shopping, doing nothing,” he wrote in that entry, dated Jan. 30. “Usually, I think they’re too noisy. Only now do I discover a city without people yelling is boring.”</p><p>“你本可以看到更多晒太阳的人，下棋的人，买菜的人，没有任何事可以忙的人，”他在1月30日的那篇文章中写道。“平时我嫌他们太吵，现在才发现，没有人嚷嚷的城市，没有意思。”</p><p>Mr. Zhang said he had always harbored literary aspirations. He has written novels, poems and fairy tales, but none of those earlier writings were published.</p><p>张赛说，他一直怀有文学抱负。他写过小说、诗歌和童话，但这些早期的作品都没出版过。</p><p>He has only a middle school education, and thought that would put off editors. But they have published his entries after making only some grammatical changes, he said.</p><p>他说，他只有初中学历，并认为会因此被编辑拒之门外。而实际上他们仅做了一些语法改动后就发表了他的文章。</p><p>He reads every comment left on his posts. Many people say they cannot believe a delivery driver wrote them.</p><p>帖子下面的每一条评论他都读。许多人说他们无法相信这些文字出自一位外卖骑手。</p><p>“I think people like me because I’m just one of them,” he said.</p><p>他说：“大家喜欢我可能是因为我就是他们身边的人。”</p><p>Mr. Zhang plans to keep writing after the outbreak ends. He has already started taking fewer deliveries, to have more time to write.</p><p>张赛计划在疫情结束后继续写作。他已经开始减少接单量，以便有更多时间写东西。</p><p>If outlets stop publishing his work, he’ll keep making deliveries to earn money. But he will not stop writing.</p><p>如果媒体不再发表他的作品，他会继续送货赚钱。但他不会停止写作。</p><p>“The epidemic has made many people close their mouths. It has made many of the unlucky among us close their mouths forever,” Mr. Zhang wrote in one post. “I want to talk now.”</p><p>“疫情让人闭嘴。让身边不幸的人永远闭嘴，”张赛在一篇文章中写道，“我想说话了。”</p><p>(c) 2020 The New York Times Company</p><p>内容拓展：<br>画面感式写作：呈现的内容像小说，或电影的剧本，有特写镜头。<br>全景式写作（传统写作手法）<br>Effect- Cause写作：先讲结果，再讲原因</p><p>▍生词好句</p><p>hope arrives<br>希望到来</p><p>news arrives 消息传来 </p><p>lifeline UK /ˈlaɪflaɪn/ US /ˈlaɪflaɪn/<br>n. 生命线；命脉（indispensable aids）</p><p>economic lifeline 经济命脉<br>Tourism is the economic lifeline for the country.<br>旅游业是这个国家的经济命脉。  </p><p>barricade UK /ˈbærɪkeɪd, bærɪˈkeɪd/ US /ˈberəkeɪd, berəˈkeɪd/<br>vt. 把……困在；设路障</p><p>Students are barricaded in their dormitory.<br>学生们被困在宿舍。<br>Though we are barricaded in our homes, we constantly send out the message. They will encourage our students.<br>尽管我们被困在家中，但我们将持续发出声音。这些声音会鼓励着我们的学员。</p><p>barricade n. 路障<br>Put some barricades along the road/at the end of the road<br>在路边或路的尽头放置路障</p><p>词根：barrel（n. 桶）  </p><p>put sb. at risk<br>让某人冒险<br>hover UK /ˈhɒvə/ US /ˈhʌvər/<br>vi. 徘徊  </p><p>A question hovered on his lips.<br>有一个问题在他的嘴边打转。<br>to be hovering between life and death<br>在生死之间徘徊  </p><p>at the heart of…<br>在……中心<br>minimize UK /ˈmɪnɪmaɪz/ US /ˈmɪnəmaɪz/<br>vt. 最小化  </p><p>词根：mini-  </p><p>plead UK /pliːd/ US /pliːd/<br>vi. 恳求（较beg更紧急）  </p><p>近义表达：beg  </p><p>relentUK /rɪˈlent/ US /rɪˈlent/<br>vi. 心软（soften）  </p><p>His parents relented and let him go on holiday with his friends.<br>他的父母心软了，让他和他的朋友一起去度假了。  </p><p>drop off<br>把某物放下<br>sprint away<br>跑掉<br>Startled UK /ˈstɑːtəld/ US /ˈstɑːrtəld/<br>adj. 受到惊吓的  </p><p>startle v. 受到惊吓  </p><p>rush away<br>跑掉<br>Jab UK /dʒæb/ US /dʒæb/<br>vt. 按（电梯等）<br>transmit UK /trænzˈmɪt/ US /trænsˈmɪt/<br>vt. 传播<br>find oneself doing sth.<br>（回过神来）发现自己正在做某事  </p><p>I found myself speaking in front of audience for three hours without a break.<br>回过神来，我发现我已经滔滔不绝地讲了三个小时。  </p><p>Aloft UK /əˈlɒft/ US /əˈlɑːft/<br>adv. 在空中，在高处  </p><p>a flag flying aloft 迎风飘扬的旗帜  </p><p>scared UK /skeəd/ US /skerd/<br>adj. 害怕的（frightened）<br>scooter UK /ˈskuːtə/ US /ˈskuːtər/<br>n. 电动车<br>ubiquitous UK /juːˈbɪkwɪtəs/ US /juːˈbɪkwətəs/<br>adj. 无处不在的<br>invisible UK /ɪnˈvɪzəbəl/ US /ɪnˈvɪzəbəl/<br>adj. 看不见的<br>herald UK /ˈherəld/ US /ˈherəld/<br>vt. 宣布，称作（acclaim）  </p><p>herald sb. as sb. 称某人为某人  </p><p>herald n. 先驱；征兆<br>International Herald Tribune 国际先驱论坛报<br>The bird is the herald of spring.<br>小鸟是春天到来的信号。<br>Morning Herald 先驱晨报  </p><p>Throughout UK /θruːˈaʊt/ US /θruːˈaʊt/<br>prep. 整个，遍及（all over）<br>residential lockdown<br>居家隔离<br>Household UK /ˈhaʊshəʊld/ US /ˈhaʊshoʊld/<br>n. 一户，家庭（family）<br>necessity UK /nəˈsesəti/ US /nəˈsesəti/<br>n. 必需品  </p><p>necessary adj. 必需的  </p><p>once every three days<br>每三天一次<br>venture UK /ˈventʃə/ US /ˈventʃər/<br>vi. 冒险（做某事）<br>legion UK /ˈliːdʒən/ US /ˈliːdʒən/<br>n. 军团（a group of soldiers）；众多  </p><p>legion尤指古罗马军团<br>legions of 众多，大量  </p><p>hunker down<br>蹲下来；为困境做准备<br>vital artery<br>大动脉，重要命脉（lifeline）  </p><p>vital adj. 性命攸关的<br>artery n. 动脉  </p><p>grueling UK /ˈɡruːəlɪŋ/ US /ˈɡruːəlɪŋ/<br>adj. 艰巨的（difficult）  </p><p>a grueling/difficult task 一项艰巨的任务  </p><p>crisscross UK /ˈkrɪskrɒs/ US /ˈkrɪskrɒːs/<br>vt. 穿梭  </p><p>类似叠音词：<br>ticktock n. （时钟）滴答声<br>zigzag v. 之字形行进  </p><p>be armed with<br>佩戴…装备<br>face mask<br>口罩<br>hand sanitizer<br>洗手液  </p><p>sanitizer n. 消毒剂<br>sanitize v. 消毒  </p><p>bright blue<br>亮蓝色<br>Hippo UK /ˈhɪpəʊ/ US /ˈhɪpoʊ/<br>n. 河马<br>epidemic UK /ˌepəˈdemɪk/ US /ˌepɪˈdemɪk/<br>n. 重大传染病  </p><p>epidemic 在一定人群中传播的流行病，如流感<br>pandemic 大规模流行病  </p><p>be born of<br>诞生于，由于（because of）<br>take time off<br>休假<br>video chat<br>视频聊天<br>Suspected UK /səˈspektɪd/ US /səˈspektɪd/<br>adj. 疑似的<br>assign UK /əˈsaɪn/ US /əˈsaɪn/<br>vt. 分派，指派  </p><p>assign an order to sb 派单给某人  </p><p>fall sick<br>生病（get sick）<br>co-worker UK /ˌkəʊˈwɜːkə/ US /ˌkoʊˈwɜrːkər/<br>n.  同事  </p><p>近义表达：colleague  </p><p>unexpected bright spots<br>意料之外的好处<br>run red lights<br>闯红灯<br>get around<br>溜达，转悠<br>Barely UK /ˈbeəli/ US /ˈberli/<br>adv. 几乎不<br>erupt UK /ɪˈrʌpt/ US /ɪˈrʌpt/<br>v. 爆发<br>A man’s words are kind when death is close.<br>人之将死，其言也善。<br>“contactless delivery” points<br>“无接触配送”点<br>designated checkpoint<br>指定检查点<br>Entry UK /ˈentri/ US /ˈentri/<br>n. 投稿作品；参赛作品；进入<br>much to one’s delight<br>让某人高兴的是<br>Single Read<br>在线杂志《单读》<br>write of<br>提及<br>crisp UK /krɪsp/ US /krɪsp/<br>adj. 天气爽朗的；脆的  </p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Flink之Data Sink 实战</title>
    <link href="/2021/01/07/2020-11-25-flink4/"/>
    <url>/2021/01/07/2020-11-25-flink4/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>接上节Data Source 实战，Source 就是数据的来源，中间的Compute其实就是Flink干的事情，可以做一系列的操作，操作完后就把计算后的数据结果 Sink 到某个地方。（可以是 MySQL、ElasticSearch、Kafka、Cassandra 等）。趁热打铁干起来！</p><h2 id="Flink-从-Kafka-topic-中获取数据并写入mysql的-demo"><a href="#Flink-从-Kafka-topic-中获取数据并写入mysql的-demo" class="headerlink" title="Flink 从 Kafka topic 中获取数据并写入mysql的 demo"></a>Flink 从 Kafka topic 中获取数据并写入mysql的 demo</h2><h3 id="工具类往-kafka-topic-student-发送数据"><a href="#工具类往-kafka-topic-student-发送数据" class="headerlink" title="工具类往 kafka topic student 发送数据"></a>工具类往 kafka topic student 发送数据</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs arduino">package raines.sink;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.producer.KafkaProducer;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.producer.ProducerRecord;<br><span class="hljs-keyword">import</span> raines.mysql.Student;<br><br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 往kafka中写数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KafkaUtils2</span> &#123;</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">String</span> broker_list = <span class="hljs-string">&quot;localhost:9092&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">String</span> topic = <span class="hljs-string">&quot;student&quot;</span>;  <span class="hljs-comment">//kafka topic 需要和 flink 程序用同一个 topic</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeToKafka</span><span class="hljs-params">()</span> throws InterruptedException </span>&#123;<br>        Properties props = <span class="hljs-keyword">new</span> Properties();<br>        props.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;bootstrap.servers&quot;</span>, broker_list);<br>        props.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;key.serializer&quot;</span>, <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);<br>        props.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;value.serializer&quot;</span>, <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);<br>        KafkaProducer producer = <span class="hljs-keyword">new</span> KafkaProducer&lt;<span class="hljs-keyword">String</span>, <span class="hljs-keyword">String</span>&gt;(props);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">101</span>; i &lt;= <span class="hljs-number">200</span>; i++) &#123;<br>            Student student = <span class="hljs-keyword">new</span> Student(i, <span class="hljs-string">&quot;zhisheng&quot;</span> + i, <span class="hljs-string">&quot;password&quot;</span> + i, <span class="hljs-number">18</span> + i);<br>            ProducerRecord record = <span class="hljs-keyword">new</span> ProducerRecord&lt;<span class="hljs-keyword">String</span>, <span class="hljs-keyword">String</span>&gt;(topic, null, null, JSON.toJSONString(student));<br>            producer.send(record);<br>            System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;发送数据: &quot;</span> + JSON.toJSONString(student));<br>        &#125;<br>        producer.<span class="hljs-built_in">flush</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> throws InterruptedException </span>&#123;<br>        writeToKafka();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="编写SinkToMySQL，该类就是-SinkFunction，继承了RichSinkFunction，然后重写了里面的方法。在invoke方法中将数据插入到MySQL-中。"><a href="#编写SinkToMySQL，该类就是-SinkFunction，继承了RichSinkFunction，然后重写了里面的方法。在invoke方法中将数据插入到MySQL-中。" class="headerlink" title="编写SinkToMySQL，该类就是 SinkFunction，继承了RichSinkFunction，然后重写了里面的方法。在invoke方法中将数据插入到MySQL 中。"></a>编写SinkToMySQL，该类就是 SinkFunction，继承了RichSinkFunction，然后重写了里面的方法。在invoke方法中将数据插入到MySQL 中。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> raines.sink;<br><br><span class="hljs-keyword">import</span> org.apache.flink.configuration.Configuration;<br><span class="hljs-keyword">import</span> org.apache.flink.streaming.api.functions.sink.RichSinkFunction;<br><span class="hljs-keyword">import</span> raines.mysql.Student;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 该类就是 Sink Function，继承了 RichSinkFunction ，然后重写了里面的方法。在 invoke 方法中将数据插入到 MySQL 中。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SinkToMySQL</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RichSinkFunction</span>&lt;<span class="hljs-title">Student</span>&gt; </span>&#123;<br>    PreparedStatement ps;<br>    <span class="hljs-keyword">private</span> Connection connection;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * open() 方法中建立连接，这样不用每次 invoke 的时候都要建立连接和释放连接</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> parameters</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">open</span><span class="hljs-params">(Configuration parameters)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">super</span>.open(parameters);<br>        connection = getConnection();<br>        String sql = <span class="hljs-string">&quot;insert into Student(id, name, password, age) values(?, ?, ?, ?);&quot;</span>;<br>        ps = <span class="hljs-keyword">this</span>.connection.prepareStatement(sql);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">super</span>.close();<br>        <span class="hljs-comment">//关闭连接和释放资源</span><br>        <span class="hljs-keyword">if</span> (connection != <span class="hljs-keyword">null</span>) &#123;<br>            connection.close();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (ps != <span class="hljs-keyword">null</span>) &#123;<br>            ps.close();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 每条数据的插入都要调用一次 invoke() 方法</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> context</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">invoke</span><span class="hljs-params">(Student value, Context context)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//组装数据，执行插入操作</span><br>        ps.setInt(<span class="hljs-number">1</span>, value.getId());<br>        ps.setString(<span class="hljs-number">2</span>, value.getName());<br>        ps.setString(<span class="hljs-number">3</span>, value.getPassword());<br>        ps.setInt(<span class="hljs-number">4</span>, value.getAge());<br>        ps.executeUpdate();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> </span>&#123;<br>        Connection con = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>            con = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://172.16.63.50:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;mysql&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;-----------mysql get connection has exception , msg = &quot;</span>+ e.getMessage());<br>        &#125;<br>        <span class="hljs-keyword">return</span> con;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Flink-程序"><a href="#Flink-程序" class="headerlink" title="Flink 程序"></a>Flink 程序</h3><p>这里的 source 是从 kafka 读取数据的，然后 Flink 从 Kafka 读取到数据（JSON）后用阿里 fastjson 来解析成 student 对象，然后在 addSink 中使用我们创建的 SinkToMySQL，这样就可以把数据存储到 MySQL 了。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs arduino">package raines.sink;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> org.apache.flink.api.common.serialization.SimpleStringSchema;<br><span class="hljs-keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;<br><span class="hljs-keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;<br><span class="hljs-keyword">import</span> org.apache.flink.streaming.connectors.kafka.FlinkKafkaConsumer011;<br><span class="hljs-keyword">import</span> raines.mysql.Student;<br><br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 这里的 source 是从 kafka 读取数据的，然后 Flink 从 Kafka 读取到数据（JSON）后用阿里 fastjson 来解析成 student 对象，然后在 addSink 中使用我们创建的 SinkToMySQL，这样就可以把数据存储到 MySQL 了。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main3</span> &#123;</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> throws Exception </span>&#123;<br>        <span class="hljs-keyword">final</span> StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();<br><br>        Properties props = <span class="hljs-keyword">new</span> Properties();<br>        props.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;bootstrap.servers&quot;</span>, <span class="hljs-string">&quot;localhost:9092&quot;</span>);<br>        props.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;zookeeper.connect&quot;</span>, <span class="hljs-string">&quot;localhost:2181&quot;</span>);<br>        props.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;group.id&quot;</span>, <span class="hljs-string">&quot;metric-group&quot;</span>);<br>        props.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;key.deserializer&quot;</span>, <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);<br>        props.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;value.deserializer&quot;</span>, <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);<br>        props.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;auto.offset.reset&quot;</span>, <span class="hljs-string">&quot;latest&quot;</span>);<br><br>        SingleOutputStreamOperator&lt;Student&gt; student = env.addSource(<span class="hljs-keyword">new</span> FlinkKafkaConsumer011&lt;&gt;(<br>                <span class="hljs-string">&quot;student&quot;</span>,   <span class="hljs-comment">//这个 kafka topic 需要和上面的工具类的 topic 一致</span><br>                <span class="hljs-keyword">new</span> SimpleStringSchema(),<br>                props)).setParallelism(<span class="hljs-number">1</span>)<br>                .<span class="hljs-built_in">map</span>(<span class="hljs-built_in">string</span> -&gt; JSON.parseObject(<span class="hljs-built_in">string</span>, Student.class)); <span class="hljs-comment">//Fastjson 解析字符串成 student 对象</span><br><br>        student.addSink(<span class="hljs-keyword">new</span> SinkToMySQL()); <span class="hljs-comment">//数据 sink 到 mysql</span><br><br>        env.execute(<span class="hljs-string">&quot;Flink add sink&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行-Flink-程序，然后再运行-KafkaUtils2-java-工具类，这样就可以了。"><a href="#运行-Flink-程序，然后再运行-KafkaUtils2-java-工具类，这样就可以了。" class="headerlink" title="运行 Flink 程序，然后再运行 KafkaUtils2.java 工具类，这样就可以了。"></a>运行 Flink 程序，然后再运行 KafkaUtils2.java 工具类，这样就可以了。</h3><p>该demo展示如何自定义 Sink Function，将从 Kafka 的数据 Sink 到 MySQL 中，如果你项目中有其他的数据来源，你也可以换成对应的 Source，也有可能你的 Sink 是到其他的地方或者其他不同的方式，那么依旧是这个套路：继承 RichSinkFunction 抽象类，重写 invoke 方法。</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Flink之Data Source 实战</title>
    <link href="/2021/01/07/2020-11-25-flink3/"/>
    <url>/2021/01/07/2020-11-25-flink3/</url>
    
    <content type="html"><![CDATA[<h2 id="Flink-从-Kafka-topic-中获取数据的-demo"><a href="#Flink-从-Kafka-topic-中获取数据的-demo" class="headerlink" title="Flink 从 Kafka topic 中获取数据的 demo"></a>Flink 从 Kafka topic 中获取数据的 demo</h2><h3 id="安装并运行-FLink-和-Kafka"><a href="#安装并运行-FLink-和-Kafka" class="headerlink" title="安装并运行 FLink 和 Kafka"></a>安装并运行 FLink 和 Kafka</h3><ul><li>Flink<br>见Flink入门</li><li>Kafka<br>启动ZooKeeper： bin/zookeeper-server-start.sh config/zookeeper.properties<br>启动Kafka Broker： bin/kafka-server-start.sh config/server.properties<br>创建Kafka主题Hello-Kafka：bin/kafka-topics.sh –create –zookeeper localhost:2181 –replication-factor 1    –partitions 1 –topic Hello-Kafka<br>获取Kafka服务器中的主题列表： bin/kafka-topics.sh –list –zookeeper localhost:2181   </li></ul><h3 id="maven-依赖"><a href="#maven-依赖" class="headerlink" title="maven 依赖"></a>maven 依赖</h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-comment">&lt;!--flink java--&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flink<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;flink.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!--&lt;scope&gt;provided&lt;/scope&gt;--&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flink<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-streaming-java_$</span><span class="hljs-template-variable">&#123;scala.binary.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;flink.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!--&lt;scope&gt;provided&lt;/scope&gt;--&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!--日志--&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-log4j12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!--flink kafka connector--&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flink<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-connector-kafka-0.11_$</span><span class="hljs-template-variable">&#123;scala.binary.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;flink.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!--alibaba fastjson--&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.51<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="测试发送数据到-kafka-topic"><a href="#测试发送数据到-kafka-topic" class="headerlink" title="测试发送数据到 kafka topic"></a>测试发送数据到 kafka topic</h3><p>实体类，Metric.java  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package raines.kafka;<br><br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Metric</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> name;<br>    <span class="hljs-keyword">public</span> long timestamp;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">Object</span>&gt; fields;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">String</span>&gt; tags;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">Metric</span>(<span class="hljs-params"></span>)</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">Metric</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name, long timestamp, <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">Object</span>&gt; fields, <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">String</span>&gt; tags</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.timestamp = timestamp;<br>        <span class="hljs-built_in">this</span>.fields = fields;<br>        <span class="hljs-built_in">this</span>.tags = tags;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">toString</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Metric&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, timestamp=&#x27;&quot;</span> + timestamp + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, fields=&quot;</span> + fields +<br>                <span class="hljs-string">&quot;, tags=&quot;</span> + tags +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getName</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setName</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> long <span class="hljs-function"><span class="hljs-title">getTimestamp</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> timestamp;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setTimestamp</span>(<span class="hljs-params">long timestamp</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.timestamp = timestamp;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">Object</span>&gt; <span class="hljs-function"><span class="hljs-title">getFields</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> fields;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setFields</span>(<span class="hljs-params"><span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">Object</span>&gt; fields</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.fields = fields;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">String</span>&gt; <span class="hljs-function"><span class="hljs-title">getTags</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> tags;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setTags</span>(<span class="hljs-params"><span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">String</span>&gt; tags</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.tags = tags;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>往 kafka 中写数据工具类：KafkaUtils.java  </p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs arduino">package raines.kafka;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.producer.KafkaProducer;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.producer.ProducerRecord;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 往kafka中写数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KafkaUtils</span> &#123;</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">String</span> broker_list = <span class="hljs-string">&quot;localhost:9092&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">String</span> topic = <span class="hljs-string">&quot;metric&quot;</span>;  <span class="hljs-comment">// kafka topic，Flink 程序中需要和这个统一</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeToKafka</span><span class="hljs-params">()</span> throws InterruptedException </span>&#123;<br>        Properties props = <span class="hljs-keyword">new</span> Properties();<br>        props.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;bootstrap.servers&quot;</span>, broker_list);<br>        props.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;key.serializer&quot;</span>, <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>); <span class="hljs-comment">//key 序列化</span><br>        props.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;value.serializer&quot;</span>, <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>); <span class="hljs-comment">//value 序列化</span><br>        KafkaProducer producer = <span class="hljs-keyword">new</span> KafkaProducer&lt;<span class="hljs-keyword">String</span>, <span class="hljs-keyword">String</span>&gt;(props);<br><br>        Metric metric = <span class="hljs-keyword">new</span> Metric();<br>        metric.setTimestamp(System.currentTimeMillis());<br>        metric.setName(<span class="hljs-string">&quot;mem&quot;</span>);<br>        Map&lt;<span class="hljs-keyword">String</span>, <span class="hljs-keyword">String</span>&gt; tags = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        Map&lt;<span class="hljs-keyword">String</span>, Object&gt; fields = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br>        tags.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;cluster&quot;</span>, <span class="hljs-string">&quot;raines&quot;</span>);<br>        tags.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;host_ip&quot;</span>, <span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br><br>        fields.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;used_percent&quot;</span>, <span class="hljs-number">90</span>d);<br>        fields.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;max&quot;</span>, <span class="hljs-number">27244873</span>d);<br>        fields.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;used&quot;</span>, <span class="hljs-number">17244873</span>d);<br>        fields.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;init&quot;</span>, <span class="hljs-number">27244873</span>d);<br><br>        metric.setTags(tags);<br>        metric.setFields(fields);<br><br>        ProducerRecord record = <span class="hljs-keyword">new</span> ProducerRecord&lt;<span class="hljs-keyword">String</span>, <span class="hljs-keyword">String</span>&gt;(topic, null, null, JSON.toJSONString(metric));<br>        producer.send(record);<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;发送数据: &quot;</span> + JSON.toJSONString(metric));<br><br>        producer.<span class="hljs-built_in">flush</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> throws InterruptedException </span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            Thread.sleep(<span class="hljs-number">300</span>);<br>            writeToKafka();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>打印kafka数据</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs arduino">package raines.kafka;<br><br><span class="hljs-keyword">import</span> org.apache.flink.api.common.serialization.SimpleStringSchema;<br><span class="hljs-keyword">import</span> org.apache.flink.streaming.api.datastream.DataStreamSource;<br><span class="hljs-keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;<br><span class="hljs-keyword">import</span> org.apache.flink.streaming.connectors.kafka.FlinkKafkaConsumer011;<br><br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> &#123;</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> throws Exception </span>&#123;<br>        <span class="hljs-keyword">final</span> StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();<br><br>        Properties props = <span class="hljs-keyword">new</span> Properties();<br>        props.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;bootstrap.servers&quot;</span>, <span class="hljs-string">&quot;localhost:9092&quot;</span>);<br>        props.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;zookeeper.connect&quot;</span>, <span class="hljs-string">&quot;localhost:2181&quot;</span>);<br>        props.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;group.id&quot;</span>, <span class="hljs-string">&quot;metric-group&quot;</span>);<br>        props.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;key.deserializer&quot;</span>, <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);  <span class="hljs-comment">//key 反序列化</span><br>        props.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;value.deserializer&quot;</span>, <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);<br>        props.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;auto.offset.reset&quot;</span>, <span class="hljs-string">&quot;latest&quot;</span>); <span class="hljs-comment">//value 反序列化</span><br><br>        DataStreamSource&lt;<span class="hljs-keyword">String</span>&gt; dataStreamSource = env.addSource(<span class="hljs-keyword">new</span> FlinkKafkaConsumer011&lt;&gt;(<br>                <span class="hljs-string">&quot;metric&quot;</span>,  <span class="hljs-comment">//kafka topic</span><br>                <span class="hljs-keyword">new</span> SimpleStringSchema(),  <span class="hljs-comment">// String 序列化</span><br>                props)).setParallelism(<span class="hljs-number">1</span>);<br><br>        dataStreamSource.<span class="hljs-built_in">print</span>(); <span class="hljs-comment">//把从 kafka 读取到的数据打印在控制台</span><br><br>        env.execute(<span class="hljs-string">&quot;Flink add data source&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="自定义-Source"><a href="#自定义-Source" class="headerlink" title="自定义 Source"></a>自定义 Source</h2><h3 id="MySQL-中读取数据的-Source"><a href="#MySQL-中读取数据的-Source" class="headerlink" title="MySQL 中读取数据的 Source"></a>MySQL 中读取数据的 Source</h3><p>pom.xml 中添加 MySQL 依赖:</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs erb"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.34<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>数据库建表如下:</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">DROP</span> TABLE <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> <span class="hljs-symbol">`student`</span>;<br><span class="hljs-keyword">CREATE</span> TABLE <span class="hljs-symbol">`student`</span> (<br>  <span class="hljs-symbol">`id`</span> int(<span class="hljs-number">11</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,<br>  <span class="hljs-symbol">`name`</span> varchar(<span class="hljs-number">25</span>) <span class="hljs-keyword">COLLATE</span> utf8_bin DEFAULT <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-symbol">`password`</span> varchar(<span class="hljs-number">25</span>) <span class="hljs-keyword">COLLATE</span> utf8_bin DEFAULT <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-symbol">`age`</span> int(<span class="hljs-number">10</span>) DEFAULT <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span> (<span class="hljs-symbol">`id`</span>)<br>) ENGINE=InnoDB AUTO_INCREMENT=<span class="hljs-number">5</span> DEFAULT CHARSET=utf8 <span class="hljs-keyword">COLLATE</span>=utf8_bin;<br></code></pre></td></tr></table></figure><p>插入数据:</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-symbol">`student`</span> <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;zhisheng01&#x27;</span>, <span class="hljs-string">&#x27;123456&#x27;</span>, <span class="hljs-string">&#x27;18&#x27;</span>), (<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;zhisheng02&#x27;</span>, <span class="hljs-string">&#x27;123&#x27;</span>, <span class="hljs-string">&#x27;17&#x27;</span>), (<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;zhisheng03&#x27;</span>, <span class="hljs-string">&#x27;1234&#x27;</span>, <span class="hljs-string">&#x27;18&#x27;</span>), (<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;zhisheng04&#x27;</span>, <span class="hljs-string">&#x27;12345&#x27;</span>, <span class="hljs-string">&#x27;16&#x27;</span>);<br>COMMIT;<br></code></pre></td></tr></table></figure><p>新建实体类：Student.java</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package raines.mysql;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> int id;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> password;<br>    <span class="hljs-keyword">public</span> int age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">Student</span>(<span class="hljs-params"></span>)</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">Student</span>(<span class="hljs-params">int id, <span class="hljs-built_in">String</span> name, <span class="hljs-built_in">String</span> password, int age</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.password = password;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">toString</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, password=&#x27;&quot;</span> + password + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> int <span class="hljs-function"><span class="hljs-title">getId</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setId</span>(<span class="hljs-params">int id</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getName</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setName</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getPassword</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setPassword</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> password</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> int <span class="hljs-function"><span class="hljs-title">getAge</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setAge</span>(<span class="hljs-params">int age</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>新建 Source 类 SourceFromMySQL.java，该类继承 RichSourceFunction ，实现里面的 open、close、run、cancel 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> raines.mysql;<br><br><span class="hljs-keyword">import</span> org.apache.flink.configuration.Configuration;<br><span class="hljs-keyword">import</span> org.apache.flink.streaming.api.functions.source.RichSourceFunction;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SourceFromMySQL</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RichSourceFunction</span>&lt;<span class="hljs-title">Student</span>&gt; </span>&#123;<br><br>    PreparedStatement ps;<br>    <span class="hljs-keyword">private</span> Connection connection;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * open() 方法中建立连接，这样不用每次 invoke 的时候都要建立连接和释放连接。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> parameters</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">open</span><span class="hljs-params">(Configuration parameters)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">super</span>.open(parameters);<br>        connection = getConnection();<br>        String sql = <span class="hljs-string">&quot;select * from Student;&quot;</span>;<br>        ps = <span class="hljs-keyword">this</span>.connection.prepareStatement(sql);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 程序执行完毕就可以进行，关闭连接和释放资源的动作了</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">super</span>.close();<br>        <span class="hljs-keyword">if</span> (connection != <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">//关闭连接和释放资源</span><br>            connection.close();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (ps != <span class="hljs-keyword">null</span>) &#123;<br>            ps.close();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * DataStream 调用一次 run() 方法用来获取数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ctx</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">(SourceContext&lt;Student&gt; ctx)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        ResultSet resultSet = ps.executeQuery();<br>        <span class="hljs-keyword">while</span> (resultSet.next()) &#123;<br>            Student student = <span class="hljs-keyword">new</span> Student(<br>                    resultSet.getInt(<span class="hljs-string">&quot;id&quot;</span>),<br>                    resultSet.getString(<span class="hljs-string">&quot;name&quot;</span>).trim(),<br>                    resultSet.getString(<span class="hljs-string">&quot;password&quot;</span>).trim(),<br>                    resultSet.getInt(<span class="hljs-string">&quot;age&quot;</span>));<br>            ctx.collect(student);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cancel</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> </span>&#123;<br>        Connection con = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>            con = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://172.16.63.50:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;mysql&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;-----------mysql get connection has exception , msg = &quot;</span>+ e.getMessage());<br>        &#125;<br>        <span class="hljs-keyword">return</span> con;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Flink 程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> raines.mysql;<br><br><span class="hljs-keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">final</span> StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();<br><br>        env.addSource(<span class="hljs-keyword">new</span> SourceFromMySQL()).print();<br><br>        env.execute(<span class="hljs-string">&quot;Flink add data source&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><h3 id="java-lang-NoClassDefFoundError-org-apache-flink-api-common-serialization-DeserializationSchema"><a href="#java-lang-NoClassDefFoundError-org-apache-flink-api-common-serialization-DeserializationSchema" class="headerlink" title="java.lang.NoClassDefFoundError: org/apache/flink/api/common/serialization/DeserializationSchema"></a>java.lang.NoClassDefFoundError: org/apache/flink/api/common/serialization/DeserializationSchema</h3><p>pom文件如下</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-comment">&lt;!--flink java--&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flink<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;flink.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flink<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-streaming-java_$</span><span class="hljs-template-variable">&#123;scala.binary.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;flink.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>maven使用provided的问题，去掉provided，使用默认的compile，解决。</p><ul><li>扩展：compile和provided区别<br>Difference between maven scope compile and provided for JAR packaging： <a href="https://stackoverflow.com/questions/6646959/difference-between-maven-scope-compile-and-provided-for-jar-packaging">https://stackoverflow.com/questions/6646959/difference-between-maven-scope-compile-and-provided-for-jar-packaging</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Flink之Data Source 介绍</title>
    <link href="/2021/01/07/2020-11-25-flink2/"/>
    <url>/2021/01/07/2020-11-25-flink2/</url>
    
    <content type="html"><![CDATA[<h2 id="Data-Sources-是什么"><a href="#Data-Sources-是什么" class="headerlink" title="Data Sources 是什么"></a>Data Sources 是什么</h2><p>Data Sources 是什么呢？就字面意思其实就可以知道：数据来源。<br>Flink 做为一款流式计算框架，它可用来做批处理，即处理静态的数据集、历史的数据集；也可以用来做流处理，即实时的处理些实时数据流，实时的产生数据流结果，只要数据源源不断的过来，Flink 就能够一直计算下去，这个 Data Sources 就是数据的来源地。<br>Flink 中你可以使用 StreamExecutionEnvironment.addSource(sourceFunction) 来为你的程序添加数据来源。<br>Flink 已经提供了若干实现好了的 source functions，当然你也可以通过实现 SourceFunction 来自定义非并行的 source 或者实现 ParallelSourceFunction 接口或者扩展 RichParallelSourceFunction 来自定义并行的 source   </p><h2 id="StreamExecutionEnvironment-中可以使用以下几个已实现的-stream-sources"><a href="#StreamExecutionEnvironment-中可以使用以下几个已实现的-stream-sources" class="headerlink" title="StreamExecutionEnvironment 中可以使用以下几个已实现的 stream sources"></a>StreamExecutionEnvironment 中可以使用以下几个已实现的 stream sources</h2><h3 id="基于集合"><a href="#基于集合" class="headerlink" title="基于集合"></a>基于集合</h3><p>1、fromCollection(Collection) - 从 Java 的 Java.util.Collection 创建数据流。集合中的所有元素类型必须相同。<br>2、fromCollection(Iterator, Class) - 从一个迭代器中创建数据流。Class 指定了该迭代器返回元素的类型。<br>3、fromElements(T …) - 从给定的对象序列中创建数据流。所有对象类型必须相同。<br>4、fromParallelCollection(SplittableIterator, Class) - 从一个迭代器中创建并行数据流。Class 指定了该迭代器返回元素的类型。<br>5、generateSequence(from, to) - 创建一个生成指定区间范围内的数字序列的并行数据流。   </p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();<br><br>DataStream&lt;<span class="hljs-keyword">Event</span>&gt; input = env.fromElements(<br><span class="hljs-built_in">new</span> <span class="hljs-keyword">Event</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;barfoo&quot;</span>, <span class="hljs-number">1.0</span>),<br><span class="hljs-built_in">new</span> <span class="hljs-keyword">Event</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;start&quot;</span>, <span class="hljs-number">2.0</span>),<br><span class="hljs-built_in">new</span> <span class="hljs-keyword">Event</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;foobar&quot;</span>, <span class="hljs-number">3.0</span>),<br>...<br>);<br></code></pre></td></tr></table></figure><h3 id="基于文件"><a href="#基于文件" class="headerlink" title="基于文件"></a>基于文件</h3><p>1、readTextFile(path) - 读取文本文件，即符合 TextInputFormat 规范的文件，并将其作为字符串返回。  </p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">final StreamExecutionEnvironment env = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StreamExecutionEnvironment</span>.</span></span>get<span class="hljs-constructor">ExecutionEnvironment()</span>;<br><br>DataStream&lt;String&gt; text = env.read<span class="hljs-constructor">TextFile(<span class="hljs-string">&quot;file:///path/to/file&quot;</span>)</span>;<br></code></pre></td></tr></table></figure><p>2、readFile(fileInputFormat, path) - 根据指定的文件输入格式读取文件（一次）。<br>3、readFile(fileInputFormat, path, watchType, interval, pathFilter, typeInfo) - 这是上面两个方法内部调用的方法。它根据给定的 fileInputFormat 和读取路径读取文件。根据提供的 watchType，这个 source 可以定期（每隔 interval 毫秒）监测给定路径的新数据（FileProcessingMode.PROCESS_CONTINUOUSLY），或者处理一次路径对应文件的数据并退出（FileProcessingMode.PROCESS_ONCE）。你可以通过 pathFilter 进一步排除掉需要处理的文件。  </p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">final StreamExecutionEnvironment <span class="hljs-keyword">env</span> = StreamExecutionEnvironment.getExecutionEnvironment();<br><br>DataStream&lt;MyEvent&gt; stream = <span class="hljs-keyword">env</span>.readFile(<br>        myFormat, myFilePath, FileProcessingMode.PROCESS_CONTINUOUSLY, <span class="hljs-number">100</span>,<br>        FilePathFilter.createDefaultFilter(), typeInfo);<br></code></pre></td></tr></table></figure><h3 id="基于-Socket"><a href="#基于-Socket" class="headerlink" title="基于 Socket"></a>基于 Socket</h3><p>socketTextStream(String hostname, int port) - 从 socket 读取。元素可以用分隔符切分。  </p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">StreamExecutionEnvironment env = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StreamExecutionEnvironment</span>.</span></span>get<span class="hljs-constructor">ExecutionEnvironment()</span>;<br><br>DataStream&lt;Tuple2&lt;String, Integer&gt;&gt; dataStream = env<br>        .socket<span class="hljs-constructor">TextStream(<span class="hljs-string">&quot;localhost&quot;</span>, 9999)</span> <span class="hljs-comment">// 监听 localhost 的 9999 端口过来的数据</span><br>        .flat<span class="hljs-constructor">Map(<span class="hljs-params">new</span> Splitter()</span>)<br>        .key<span class="hljs-constructor">By(0)</span><br>        .time<span class="hljs-constructor">Window(Time.<span class="hljs-params">seconds</span>(5)</span>)<br>        .sum(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h3 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h3><p>addSource - 添加一个新的 source function。例如，你可以 addSource(new FlinkKafkaConsumer011&lt;&gt;(…)) 以从 Apache Kafka 读取数据<br>说下上面几种的特点吧：<br>1、基于集合：有界数据集，更偏向于本地测试用<br>2、基于文件：适合监听文件修改并读取其内容<br>3、基于 Socket：监听主机的 host port，从 Socket 中获取数据<br>4、自定义 addSource：大多数的场景数据都是无界的，会源源不断的过来。比如去消费 Kafka 某个 topic 上的数据，这时候就需要用到这个 addSource，可能因为用的比较多的原因吧，Flink 直接提供了 FlinkKafkaConsumer011 等类可供你直接使用。你可以去看看 FlinkKafkaConsumerBase 这个基础类，它是 Flink Kafka 消费的最根本的类。  </p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs haxe">StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();<br><br>DataStream&lt;KafkaEvent&gt; input = env<br>.addSource(<br><span class="hljs-keyword">new</span> <span class="hljs-type">FlinkKafkaConsumer011</span>&lt;&gt;(<br>parameterTool.getRequired(<span class="hljs-string">&quot;input-topic&quot;</span>), <span class="hljs-comment">//从参数中获取传进来的 topic </span><br><span class="hljs-keyword">new</span> <span class="hljs-type">KafkaEventSchema</span>(),<br>parameterTool.getProperties())<br>.assignTimestampsAndWatermarks(<span class="hljs-keyword">new</span> <span class="hljs-type">CustomWatermarkExtractor</span>()));<br></code></pre></td></tr></table></figure><h3 id="自定义自己的-Source"><a href="#自定义自己的-Source" class="headerlink" title="自定义自己的 Source"></a>自定义自己的 Source</h3><p>那么你就需要去了解一下 SourceFunction 接口了，它是所有 stream source 的根接口，它继承自一个标记接口（空接口）Function。<br>SourceFunction 定义了两个接口方法：<br>1、run ： 启动一个 source，即对接一个外部数据源然后 emit 元素形成 stream（大部分情况下会通过在该方法里运行一个 while 循环的形式来产生 stream）。<br>2、cancel ： 取消一个 source，也即将 run 中的循环 emit 元素的行为终止。<br>正常情况下，一个 SourceFunction 实现这两个接口方法就可以了。其实这两个接口方法也固定了一种实现模板。  </p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Flink入门</title>
    <link href="/2021/01/07/2020-11-25-flink1/"/>
    <url>/2021/01/07/2020-11-25-flink1/</url>
    
    <content type="html"><![CDATA[<h2 id="安装Flink"><a href="#安装Flink" class="headerlink" title="安装Flink"></a>安装Flink</h2><h3 id="安装查看-Java-的版本号，推荐使用-Java-8。"><a href="#安装查看-Java-的版本号，推荐使用-Java-8。" class="headerlink" title="安装查看 Java 的版本号，推荐使用 Java 8。"></a>安装查看 Java 的版本号，推荐使用 Java 8。</h3><p>java -version</p><h3 id="下载Flink"><a href="#下载Flink" class="headerlink" title="下载Flink"></a>下载Flink</h3><p><a href="https://flink.apache.org/downloads.html">https://flink.apache.org/downloads.html</a></p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p>tar -xzf *.tgz</p><h3 id="检查安装"><a href="#检查安装" class="headerlink" title="检查安装"></a>检查安装</h3><p>flink –version</p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>进入flink主目录，执行  ./bin/start-cluster.sh<br>进入web页面查看：<a href="http://localhost:8081/">http://localhost:8081</a></p><h3 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h3><p>./bin/stop-cluster.sh</p><hr><h2 id="Flink-demo（idea）"><a href="#Flink-demo（idea）" class="headerlink" title="Flink demo（idea）"></a>Flink demo（idea）</h2><h3 id="新建一个-maven-项目"><a href="#新建一个-maven-项目" class="headerlink" title="新建一个 maven 项目"></a>新建一个 maven 项目</h3><p>勾选create from archetype，选择flink-quickstart-java，next</p><h3 id="创建一个-SocketTextStreamWordCount-文件，加入以下代码："><a href="#创建一个-SocketTextStreamWordCount-文件，加入以下代码：" class="headerlink" title="创建一个 SocketTextStreamWordCount 文件，加入以下代码："></a>创建一个 SocketTextStreamWordCount 文件，加入以下代码：</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br><span class="hljs-keyword">import</span> org.apache.flink.api.common.functions.FlatMapFunction;<br><span class="hljs-keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;<br><span class="hljs-keyword">import</span> org.apache.flink.streaming.api.datastream.DataStreamSource;<br><span class="hljs-keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;<br><span class="hljs-keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;<br><span class="hljs-keyword">import</span> org.apache.flink.util.Collector;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SocketTextStreamWordCount</span> &#123;</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> throws Exception </span>&#123;<br>        <span class="hljs-comment">//参数检查</span><br>        <span class="hljs-keyword">if</span> (args.length != <span class="hljs-number">2</span>) &#123;<br>            System.err.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;USAGE:\nSocketTextStreamWordCount &lt;hostname&gt; &lt;port&gt;&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">String</span> hostname = args[<span class="hljs-number">0</span>];<br>        Integer port = Integer.<span class="hljs-built_in">parseInt</span>(args[<span class="hljs-number">1</span>]);<br><br><br>        <span class="hljs-comment">// set up the streaming execution environment</span><br>        <span class="hljs-keyword">final</span> StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();<br><br>        <span class="hljs-comment">//获取数据</span><br>        DataStreamSource&lt;<span class="hljs-keyword">String</span>&gt; stream = env.socketTextStream(hostname, port);<br><br>        <span class="hljs-comment">//计数</span><br>        SingleOutputStreamOperator&lt;Tuple2&lt;<span class="hljs-keyword">String</span>, Integer&gt;&gt; sum = stream.flatMap(<span class="hljs-keyword">new</span> LineSplitter())<br>                .keyBy(<span class="hljs-number">0</span>)<br>                .sum(<span class="hljs-number">1</span>);<br><br>        sum.<span class="hljs-built_in">print</span>();<br><br>        env.execute(<span class="hljs-string">&quot;Java WordCount from SocketTextStream Example&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LineSplitter</span> <span class="hljs-title">implements</span> <span class="hljs-title">FlatMapFunction</span>&lt;</span><span class="hljs-keyword">String</span>, Tuple2&lt;<span class="hljs-keyword">String</span>, Integer&gt;&gt; &#123;<br>        @Override<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">flatMap</span><span class="hljs-params">(<span class="hljs-keyword">String</span> s, Collector&lt;Tuple2&lt;<span class="hljs-keyword">String</span>, Integer&gt;&gt; collector)</span> </span>&#123;<br>            <span class="hljs-keyword">String</span>[] tokens = s.toLowerCase().split(<span class="hljs-string">&quot;\\W+&quot;</span>);<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">String</span> token: tokens) &#123;<br>                <span class="hljs-keyword">if</span> (token.length() &gt; <span class="hljs-number">0</span>) &#123;<br>                    collector.collect(<span class="hljs-keyword">new</span> Tuple2&lt;<span class="hljs-keyword">String</span>, Integer&gt;(token, <span class="hljs-number">1</span>));<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;  <br><br></code></pre></td></tr></table></figure><h3 id="进入工程目录，使用以下命令打包"><a href="#进入工程目录，使用以下命令打包" class="headerlink" title="进入工程目录，使用以下命令打包"></a>进入工程目录，使用以下命令打包</h3><p>mvn clean package -Dmaven.test.skip=true</p><h3 id="开启监听-9000-端口"><a href="#开启监听-9000-端口" class="headerlink" title="开启监听 9000 端口"></a>开启监听 9000 端口</h3><p>nc -l 9000</p><h3 id="进入-flink-安装目录-bin-下执行以下命令跑程序"><a href="#进入-flink-安装目录-bin-下执行以下命令跑程序" class="headerlink" title="进入 flink 安装目录 bin 下执行以下命令跑程序"></a>进入 flink 安装目录 bin 下执行以下命令跑程序</h3><p>flink run -c SocketTextStreamWordCount /data/original-word-count-1.0-SNAPSHOT.jar 127.0.0.1 9000<br>注意换成你自己项目的路径。执行完上述命令后，我们可以在 webUI 中看到正在运行的程序。<br>我们可以在 nc 监听端口中输入 text，然后我们通过 tail 命令看一下输出的 log 文件，来观察统计结果。进入目录 apache-flink/1.6.0/libexec/log，执行以下命令:<br>tail -f flink-raines-taskexecutor-0-localhost.out</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CentOS必知必会</title>
    <link href="/2021/01/07/2020-11-25-centosLearn/"/>
    <url>/2021/01/07/2020-11-25-centosLearn/</url>
    
    <content type="html"><![CDATA[<h2 id="centos安装rzsz"><a href="#centos安装rzsz" class="headerlink" title="centos安装rzsz"></a>centos安装rzsz</h2><p>yum install lrzsz</p><h2 id="查看centos系统的版本"><a href="#查看centos系统的版本" class="headerlink" title="查看centos系统的版本"></a>查看centos系统的版本</h2><p>cat /etc/redhat-release</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>free    # 查看服务器内存使用<br>netstat -lntup    # 查看端口情况  l-&gt;listen,n-&gt;num,t-&gt;tcp,u-&gt;udp,p-&gt;process<br>cat /etc/locale.conf   查看使用编码<br>lsblk  查看盘符  </p><h2 id="zip压缩当前文件夹下所有文件"><a href="#zip压缩当前文件夹下所有文件" class="headerlink" title="zip压缩当前文件夹下所有文件"></a>zip压缩当前文件夹下所有文件</h2><p>zip -r myfile.zip ./*</p><h2 id="两台centos之间传送文件"><a href="#两台centos之间传送文件" class="headerlink" title="两台centos之间传送文件"></a>两台centos之间传送文件</h2><p>scp -r /data/appmanage <a href="mailto:&#114;&#x6f;&#x6f;&#116;&#x40;&#x31;&#x37;&#x32;&#46;&#49;&#x36;&#x2e;&#x37;&#48;&#x2e;&#49;&#49;">&#114;&#x6f;&#x6f;&#116;&#x40;&#x31;&#x37;&#x32;&#46;&#49;&#x36;&#x2e;&#x37;&#48;&#x2e;&#49;&#49;</a>:/data/appmanage</p><h2 id="对当前文件夹打包"><a href="#对当前文件夹打包" class="headerlink" title="对当前文件夹打包"></a>对当前文件夹打包</h2><p>zip -r myfile.zip ./*   </p><h2 id="CentOS下查看文件和文件夹大小"><a href="#CentOS下查看文件和文件夹大小" class="headerlink" title="CentOS下查看文件和文件夹大小"></a>CentOS下查看文件和文件夹大小</h2><p>查看data文件夹下大小<br>du -h –max-depth=1 data/<br><a href="https://blog.csdn.net/qq_33326449/article/details/107446140">https://blog.csdn.net/qq_33326449/article/details/107446140</a></p><h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><p>vim /etc/profile   </p><ul><li><p>eg:添加maven环境变量   </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">M2_HOME</span>=/usr/maven/apache-maven-3.6.3<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$&#123;M2_HOME&#125;</span>/bin:$&#123;PATH&#125;<br></code></pre></td></tr></table></figure><p>source /etc/profile   </p></li></ul><h2 id="linux-crontab-定时任务"><a href="#linux-crontab-定时任务" class="headerlink" title="linux crontab 定时任务"></a>linux crontab 定时任务</h2><h2 id="cron介绍"><a href="#cron介绍" class="headerlink" title="cron介绍"></a>cron介绍</h2><p>我们经常使用的是crontab命令是cron table的简写，它是cron的配置文件，也可以叫它作业列表，我们可以在以下文件夹内找到相关配置文件。<br>/var/spool/cron/ 目录下存放的是每个用户包括root的crontab任务，每个任务以创建者的名字命名<br>/etc/crontab 这个文件负责调度各种管理和维护任务。<br>/etc/cron.d/ 这个目录用来存放任何要执行的crontab文件或脚本。<br>我们还可以把脚本放在/etc/cron.hourly、/etc/cron.daily、/etc/cron.weekly、/etc/cron.monthly目录中，让它每小时/天/星期、月执行一次。   </p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">crontab</span> <span class="hljs-selector-attr">[-u username]</span>　　　　<span class="hljs-comment">//省略用户表表示操作当前用户的crontab</span><br>    <span class="hljs-selector-tag">-e</span>      (编辑工作表)<br>    <span class="hljs-selector-tag">-l</span>      (列出工作表里的命令)<br>    <span class="hljs-selector-tag">-r</span>      (删除工作表)<br></code></pre></td></tr></table></figure><p>我们用crontab -e进入当前用户的工作表编辑，是常见的vim界面。每行是一条命令。<br>crontab的命令构成为 时间+动作，其时间有分、时、日、月、周五种，操作符有  </p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>取值范围内的所有数字<br>/ 每过多少个数字<br><span class="hljs-bullet">- </span>从X到Z<br>，散列数字<br></code></pre></td></tr></table></figure><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown">实例1：每1分钟执行一次myCommand<br><span class="hljs-bullet">*</span> <span class="hljs-emphasis">* *</span> <span class="hljs-emphasis">* *</span> myCommand<br><br>实例2：每小时的第3和第15分钟执行<br>3,15 <span class="hljs-emphasis">* *</span> <span class="hljs-emphasis">* *</span> myCommand<br><br>实例3：在上午8点到11点的第3和第15分钟执行<br>3,15 8-11 <span class="hljs-emphasis">* *</span> <span class="hljs-emphasis">* myCommand</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Centos7.6部署k8s(v1.18.2)集群</title>
    <link href="/2021/01/07/2020-08-19-k8sinstall/"/>
    <url>/2021/01/07/2020-08-19-k8sinstall/</url>
    
    <content type="html"><![CDATA[<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>一、Docker安装；</p><p>二、k8s安装准备工作；</p><p>三、Master节点安装；</p><p>四、Node节点安装；</p><p>五、Dashboard安装；</p><p>六、集群测试。</p><h2 id="环境说明："><a href="#环境说明：" class="headerlink" title="环境说明："></a>环境说明：</h2><p>172.27.9.131  master<br>172.27.9.135  node01<br>172.27.9.136  node02  </p><p>一、Docker安装</p><p>所有节点都需要安装docker</p><ol><li>安装依赖包<br>yum install -y yum-utils   device-mapper-persistent-data   lvm2  </li><li>设置Docker源<br>yum-config-manager     –add-repo     <a href="https://download.docker.com/linux/centos/docker-ce.repo">https://download.docker.com/linux/centos/docker-ce.repo</a>  </li></ol><ul><li>在使用yum命令安装指定版本docker时报如下错误：<br>GPG key retrieval failed: [Errno 12] Timeout on <a href="https://download.docker.com/">https://download.docker.com/</a><br>原因分析：这是由于国内访问不到docker官方镜像的缘故<br>解决办法：<br>yum-config-manager –add-repo <a href="http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a></li></ul><ol start="3"><li>安装Docker CE   </li><li>1 docker安装版本查看<br>yum list docker-ce –showduplicates | sort -r   </li><li>2 安装docker<br>yum install docker-ce-18.09.6 docker-ce-cli-18.09.6 containerd.io  </li></ol><ul><li>不指定版本安装：<br>yum install -y docker-ce docker-ce-cli containerd.io  </li></ul><ol start="4"><li>启动Docker<br>systemctl start docker<br>systemctl enable docker  </li><li>命令补全  </li><li>1 安装bash-completion<br>yum -y install bash-completion  </li><li>2 加载bash-completion<br>source /etc/profile.d/bash_completion.sh  </li><li>镜像加速<br>由于Docker Hub的服务器在国外，下载镜像会比较慢，可以配置镜像加速器。主要的加速器有：Docker官方提供的中国registry mirror、阿里云加速器、DaoCloud 加速器，本文以阿里加速器配置为例。  </li><li>1 登陆阿里云容器模块<br>登陆地址为：<a href="https://cr.console.aliyun.com/">https://cr.console.aliyun.com</a> ,未注册的可以先注册阿里云账户  </li><li>2 配置镜像加速器<br>配置daemon.json文件   </li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo mkdir -p <span class="hljs-regexp">/etc/</span>docker<br>sudo tee <span class="hljs-regexp">/etc/</span>docker/daemon.json &lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span><br>&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://tvgm2f32.mirror.aliyuncs.com&quot;</span>]<br>&#125;<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure><ol start="7"><li>验证<br>docker –version<br>docker run hello-world<br>通过查询docker版本和运行容器hello-world来验证docker是否安装成功。  </li></ol><p>二、k8s安装准备工作<br>安装Centos是已经禁用了防火墙和selinux并设置了阿里源。master和node节点都执行本部分操作。<br>查看防火墙状态：firewall-cmd –state  </p><ol><li>配置主机名  </li><li>1 修改主机名<br>hostnamectl set-hostname master<br>more /etc/hostname<br>退出重新登陆即可显示新设置的主机名master  </li><li>2 修改hosts文件  </li></ol><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">cat &gt;&gt; /etc/hosts &lt;&lt; EOF<br><span class="hljs-number">172.27.9.131</span>    master<br><span class="hljs-number">172.27.9.135</span>    node01<br><span class="hljs-number">172.27.9.136</span>    node02<br>EOF<br></code></pre></td></tr></table></figure><p>more /etc/hosts<br>2. 验证mac地址uuid<br>cat /sys/class/net/eth0/address<br>cat /sys/class/dmi/id/product_uuid<br>保证各节点mac和uuid唯一<br>3. 禁用swap<br>3.1 临时禁用<br>swapoff -a<br>3.2 永久禁用<br>若需要重启后也生效，在禁用swap后还需修改配置文件/etc/fstab，注释swap<br>sed -i.bak ‘/swap/s/^/#/‘ /etc/fstab<br>4. 内核参数修改<br>4.1 临时修改<br>sysctl net.bridge.bridge-nf-call-iptables=1<br>sysctl net.bridge.bridge-nf-call-ip6tables=1<br>4.2 永久修改  </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf<br>net<span class="hljs-selector-class">.bridge</span><span class="hljs-selector-class">.bridge-nf-call-ip6tables</span> = <span class="hljs-number">1</span><br>net<span class="hljs-selector-class">.bridge</span><span class="hljs-selector-class">.bridge-nf-call-iptables</span> = <span class="hljs-number">1</span><br>EOF<br></code></pre></td></tr></table></figure><p>sysctl -p /etc/sysctl.d/k8s.conf<br>5. 修改Cgroup Driver<br>5.1 修改daemon.json<br>修改daemon.json，新增‘“exec-opts”: [“native.cgroupdriver=systemd”]’<br>more /etc/docker/daemon.json<br>{<br>  “registry-mirrors”: [“<a href="https://v16stybc.mirror.aliyuncs.com&quot;]">https://v16stybc.mirror.aliyuncs.com&quot;]</a>,<br>  “exec-opts”: [“native.cgroupdriver=systemd”]<br>}<br>5.2 重新加载docker<br>systemctl daemon-reload<br>systemctl restart docker<br>6. 设置kubernetes源<br>6.1 新增kubernetes源  </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat &lt;&lt;EOF &gt; <span class="hljs-regexp">/etc/yum</span>.repos.d/kubernetes.repo<br>[kubernetes]<br>name=Kubernetes<br>baseurl=https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/kubernetes/yum</span><span class="hljs-regexp">/repos/</span>kubernetes-el7-x86_64/<br>enabled=<span class="hljs-number">1</span><br>gpgcheck=<span class="hljs-number">1</span><br>repo_gpgcheck=<span class="hljs-number">1</span><br>gpgkey=https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/kubernetes/yum</span><span class="hljs-regexp">/doc/yum</span>-key.gpg https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/kubernetes/yum</span><span class="hljs-regexp">/doc/</span>rpm-package-key.gpg<br>EOF<br></code></pre></td></tr></table></figure><ul><li>[] 中括号中的是repository id，唯一，用来标识不同仓库</li><li>name  仓库名称，自定义</li><li>baseurl 仓库地址</li><li>enable 是否启用该仓库，默认为1表示启用</li><li>gpgcheck 是否验证从该仓库获得程序包的合法性，1为验证</li><li>repo_gpgcheck 是否验证元数据的合法性 元数据就是程序包列表，1为验证</li><li>gpgkey=URL 数字签名的公钥文件所在位置，如果gpgcheck值为1，此处就需要指定gpgkey文件的位置，如果gpgcheck值为0就不需要此项了  </li></ul><p>6.2 更新缓存<br>yum clean all<br>yum -y makecache<br>三、Master节点安装  </p><ol><li>版本查看<br>yum list kubelet –showduplicates | sort -r   </li><li>安装kubelet、kubeadm和kubectl  </li><li>1 安装三个包<br>yum install -y kubelet-1.18.2 kubeadm-1.18.2 kubectl-1.18.2<br>若不指定版本直接运行‘yum install -y kubelet kubeadm kubectl’则默认安装最新版  </li><li>2 安装包说明<br>kubelet 运行在集群所有节点上，用于启动Pod和容器等对象的工具<br>kubeadm 用于初始化集群，启动集群的命令工具<br>kubectl 用于和集群通信的命令行，通过kubectl可以部署和管理应用，查看各种资源，创建、删除和更新各种组件  </li><li>3 启动kubelet<br>启动kubelet并设置开机启动<br>systemctl enable kubelet &amp;&amp; systemctl start kubelet  </li><li>4 kubelet命令补全<br>echo “source &lt;(kubectl completion bash)” &gt;&gt; ~/.bash_profile<br>source .bash_profile   </li><li>下载镜像  </li><li>1 镜像下载的脚本<br>Kubernetes几乎所有的安装组件和Docker镜像都放在goolge自己的网站上,直接访问可能会有网络问题，这里的解决办法是从阿里云镜像仓库下载镜像，拉取到本地以后改回默认的镜像tag。  </li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros">more image.sh <br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-attribute">url</span>=registry.cn-hangzhou.aliyuncs.com/google_containers<br><span class="hljs-attribute">version</span>=v1.18.2<br>images=(`kubeadm<span class="hljs-built_in"> config </span>images list <span class="hljs-attribute">--kubernetes-version</span>=<span class="hljs-variable">$version</span>|awk -F <span class="hljs-string">&#x27;/&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`)<br><span class="hljs-keyword">for</span> imagename <span class="hljs-keyword">in</span> <span class="hljs-variable">$&#123;images[@]&#125;</span> ; <span class="hljs-keyword">do</span><br>  docker pull <span class="hljs-variable">$url</span>/<span class="hljs-variable">$imagename</span><br>  docker tag <span class="hljs-variable">$url</span>/<span class="hljs-variable">$imagename</span> k8s.gcr.io/<span class="hljs-variable">$imagename</span><br>  docker rmi -f <span class="hljs-variable">$url</span>/<span class="hljs-variable">$imagename</span><br>done<br></code></pre></td></tr></table></figure><p>url为阿里云镜像仓库地址，version为安装的kubernetes版本。<br>3.2 下载镜像<br>运行脚本image.sh，下载指定版本的镜像<br>./image.sh<br>docker images<br>4. 初始化Master<br>4.1 初始化  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubeadm init \<br><span class="hljs-attribute">--apiserver-advertise-address</span>=172.27.9.131 \<br>--image-repository registry.aliyuncs.com/google_containers \<br>--kubernetes-version v1.18.2 \<br><span class="hljs-attribute">--service-cidr</span>=10.1.0.0/16 \<br><span class="hljs-attribute">--pod-network-cidr</span>=10.244.0.0/16  <br></code></pre></td></tr></table></figure><p>apiserver-advertise-address指定master的interface，pod-network-cidr指定Pod网络的范围，这里使用flannel网络方案。<br>记录kubeadm join的输出，后面需要这个命令将各个节点加入集群中。<br>4.2 加载环境变量<br>echo “export KUBECONFIG=/etc/kubernetes/admin.conf” &gt;&gt; ~/.bash_profile<br>source .bash_profile<br>本文所有操作都在root用户下执行，若为非root用户，则执行如下操作：<br>mkdir -p $HOME/.kube<br>cp -i /etc/kubernetes/admin.conf $HOME/.kube/config<br>chown $(id -u):$(id -g) $HOME/.kube/config<br>5. 安装pod网络<br>kubectl apply -f <a href="https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml">https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</a><br>6. master节点配置<br>taint：污点的意思。如果一个节点被打上了污点，那么pod是不允许运行在这个节点上面的<br>6.1 删除master节点默认污点<br>默认情况下集群不会在master上调度pod，如果偏想在master上调度Pod，可以执行如下操作：<br>查看污点：<br>kubectl describe node master|grep -i taints<br>Taints:             node-role.kubernetes.io/master:NoSchedule<br>删除默认污点：kubectl taint nodes master node-role.kubernetes.io/master-node/master untainted<br>6.2 污点机制  </p><p>语法：</p><p>kubectl taint node [node] key=value[effect]<br>     其中[effect] 可取值: [ NoSchedule | PreferNoSchedule | NoExecute ]<br>      NoSchedule: 一定不能被调度<br>      PreferNoSchedule: 尽量不要调度<br>      NoExecute: 不仅不会调度, 还会驱逐Node上已有的Pod<br>打污点</p><p>[root@master ~]# kubectl taint node master key1=value1:NoSchedule<br>node/master tainted<br>[root@master ~]# kubectl describe node master|grep -i taints<br>Taints:             key1=value1:NoSchedule<br>key为key1，value为value1（value可以为空），effect为NoSchedule表示一定不能被调度</p><p>删除污点：</p><p>[root@master ~]# kubectl taint nodes master  key1-<br>node/master untainted<br>[root@master ~]# kubectl describe node master|grep -i taints<br>Taints:             <none><br>删除指定key所有的effect,‘-’表示移除所有以key1为键的污点</p><p>四、Node节点安装  </p><ol><li>安装kubelet、kubeadm和kubectl<br>同master节点  </li><li>下载镜像<br>同master节点  </li><li>加入集群<br>以下操作master上执行  </li><li>1 查看令牌<br>kubeadm token list  </li><li>2 生成新的令牌<br>kubeadm token create  </li><li>3 生成新的加密串<br>openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2&gt;/dev/null | <br> openssl dgst -sha256 -hex | sed ‘s/^.* //‘  </li><li>4 node节点加入集群<br>在node节点上分别执行如下操作(步骤4.1中记录kubeadm join的输出）：<br>kubeadm join 172.27.9.131:6443 –token 1zl3he.fxgz2pvxa3qkwxln  –discovery-token-ca-cert-hash sha256:5f656ae26b5e7d4641a979cbfdffeb7845cc5962bbfcd1d5435f00a25c02ea50  </li></ol><p>五、Dashboard安装   </p><ol><li>下载yaml文件手动修改service部分<br>wget <a href="https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.3/aio/deploy/recommended.yaml">https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.3/aio/deploy/recommended.yaml</a>  </li><li>修改yaml文件  </li><li>1 vim recommended.yaml  </li><li>2 修改Service部分   </li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><br><span class="hljs-string">-----------------------------------------------</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kubernetes-dashboard</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-dashboard</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">443</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8443</span><br>      <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30443</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kubernetes-dashboard</span><br> <span class="hljs-string">----------------------------------------------</span><br></code></pre></td></tr></table></figure><p>注意如果这里的nodePort写成nodeport或者存在其他书写问题，就会报错<br>不能用tab缩进，冒号后有空格<br>3. 更新配置<br>kubectl apply -f recommended.yaml<br>状态查看  kubectl get deployment kubernetes-dashboard -n kube-system<br>kubectl get pods -n kube-system -o wide<br>kubectl get services -n kube-system<br>4. 登录dashboard<br>浏览器访问dashboard：<br>https://<any_node_ip>:30443<br>5. Token认证方式登录<br>5.1 创建dashboard-adminuser.yaml：  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">cat</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">dashboard-adminuser.yaml</span> <span class="hljs-string">&lt;&lt;</span> <span class="hljs-string">EOF</span><br> <span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br> <span class="hljs-attr">metadata:</span><br>   <span class="hljs-attr">name:</span> <span class="hljs-string">admin-user</span><br>   <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br> <br> <span class="hljs-string">---</span><br> <span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br> <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br> <span class="hljs-attr">metadata:</span><br>   <span class="hljs-attr">name:</span> <span class="hljs-string">admin-user</span><br> <span class="hljs-attr">roleRef:</span><br>   <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>   <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>   <span class="hljs-attr">name:</span> <span class="hljs-string">cluster-admin</span><br> <span class="hljs-attr">subjects:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>   <span class="hljs-attr">name:</span> <span class="hljs-string">admin-user</span><br>   <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br><span class="hljs-string">&gt;</span> <span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>5.2 创建登录用户<br>kubectl apply -f dashboard-adminuser.yaml  </p><ul><li>说明：上面创建了一个叫admin-user的服务账号，并放在kubernetes-dashboard命名空间下，并将cluster-admin角色绑定到admin-user账户，这样admin-user账户就有了管理员的权限。默认情况下，kubeadm创建集群时已经创建了cluster-admin角色，我们直接绑定即可。  </li></ul><p>5.3 查看admin-user账户的token<br>kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk ‘{print $1}’)<br>把获取到的Token复制到登录界面的Token输入框中，登陆成功。  </p><p>六、集群测试  </p><h2 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h2><h3 id="kubeadm安装k8s-组件controller-manager-和scheduler状态-Unhealthy"><a href="#kubeadm安装k8s-组件controller-manager-和scheduler状态-Unhealthy" class="headerlink" title="kubeadm安装k8s 组件controller-manager 和scheduler状态 Unhealthy"></a>kubeadm安装k8s 组件controller-manager 和scheduler状态 Unhealthy</h3><p>通过kubeadm安装好kubernetes v1.18.6 查看集群状态，发现组件controller-manager 和scheduler状态 Unhealthy<br>检查端口未监听<br>组件运行正常<br>检查kube-scheduler和kube-controller-manager组件配置是否禁用了非安全端口<br>vim /etc/kubernetes/manifests/kube-scheduler.yaml<br>vim /etc/kubernetes/manifests/kube-controller-manager.yaml<br>将port=0去掉<br>然后systemctl restart kubelet<br>再检查集群组件状态已正常<br>转载地址：<a href="https://www.gjie.cn/2618.html">https://www.gjie.cn/2618.html</a>  </p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 桌面版</title>
    <link href="/2021/01/07/2020-06-29-ubuntuLearn/"/>
    <url>/2021/01/07/2020-06-29-ubuntuLearn/</url>
    
    <content type="html"><![CDATA[<p>dsaf</p><h2 id="为什么选择Ubuntu"><a href="#为什么选择Ubuntu" class="headerlink" title="为什么选择Ubuntu"></a>为什么选择Ubuntu</h2><p>之前一直使用MBP作为开发的主力机使用，因公司原因，使用thinkpad作为日常开发机器，回归windows后使用一段时间感触颇深，实在是大大降低了工作效率，<br>主要原因有如下：命令行下不支持linux命令，没有tab补足git的命令的人性化设计；对docker的支持不完善；时常有弹窗广告，实在不胜其烦，广告事小，打断思路、惊扰神经事大。<br>实在忍无可忍，无奈之下决定体验一下Ubuntu的桌面版。<br>Ubuntu还是大体让人满意的：最满意的当数命令行、完美支持docker、毫无弹窗广告。不过其不便也很明显：软件支持少，微信qq等等就放弃吧，不要曲线救国耗费心力了。<br>是以，选择使用Ubuntu作为windows的虚拟机，用以当作开发的主力机。<br>dd</p><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><ul><li><p>Ubuntu上一个炫酷的终端程序–guake <a href="https://zhuanlan.zhihu.com/p/40684802">https://zhuanlan.zhihu.com/p/40684802</a><br>  安装命令sudo apt install guake  </p></li><li><p>ubuntu16.04下安装如何安装.deb安装包   </p></li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vim">在Ubuntu下安装<span class="hljs-keyword">deb</span>包需要使用dpkg命令.  <br>Dpkg 的普通用法：   <br><span class="hljs-number">1</span>、sudo dpkg -i &lt;package.<span class="hljs-keyword">deb</span>&gt;  <br>安装一个 Debian 软件包，如你手动下载的文件。  <br><span class="hljs-number">2</span>、sudo dpkg -<span class="hljs-keyword">c</span> &lt;package.<span class="hljs-keyword">deb</span>&gt;  <br>列出 &lt;package.<span class="hljs-keyword">deb</span>&gt; 的内容。  <br><span class="hljs-number">3</span>、sudo dpkg -I &lt;package.<span class="hljs-keyword">deb</span>&gt;  <br>从 &lt;package.<span class="hljs-keyword">deb</span>&gt; 中提取包裹信息。  <br><span class="hljs-number">4</span>、sudo dpkg -r <span class="hljs-symbol">&lt;package&gt;</span>  <br>移除一个已安装的包裹。  <br><span class="hljs-number">5</span>、sudo dpkg -<span class="hljs-keyword">P</span> <span class="hljs-symbol">&lt;package&gt;</span>  <br>完全清除一个已安装的包裹。和 <span class="hljs-built_in">remove</span> 不同的是，<span class="hljs-built_in">remove</span> 只是删掉数据和可执行文件，purge 另外还删除所有的配制文件。  <br><span class="hljs-number">6</span>、sudo dpkg -L <span class="hljs-symbol">&lt;package&gt;</span>  <br>列出 <span class="hljs-symbol">&lt;package&gt;</span> 安装的所有文件清单。同时请看 dpkg -<span class="hljs-keyword">c</span> 来检查一个 .<span class="hljs-keyword">deb</span> 文件的内容。  <br><span class="hljs-number">7</span>、sudo dpkg -s <span class="hljs-symbol">&lt;package&gt;</span>  <br>显示已安装包裹的信息。同时请看 apt-cache 显示 Debian 存档中的包裹信息，以及 dpkg -I 来显示从一个 .<span class="hljs-keyword">deb</span> 文件中提取的包裹信息。  <br><span class="hljs-number">8</span>、sudo dpkg-reconfigure <span class="hljs-symbol">&lt;package&gt;</span>  <br>重新配制一个已经安装的包裹，如果它使用的是 debconf (debconf 为包裹安装提供了一个统一的配制界面)。  <br>如果安装过程中出现问题,可以先使用命令:  <br>sudo apt-<span class="hljs-built_in">get</span> <span class="hljs-keyword">update</span>  <br>更新后再执行相应操作。  <br></code></pre></td></tr></table></figure><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>作为之前mbp的无鼠标开发人士，不得不吐槽thinkpad的触控板实在是渣渣。<br><a href="https://zhuanlan.zhihu.com/p/45535756">https://zhuanlan.zhihu.com/p/45535756</a>   </p><h2 id="日常使用"><a href="#日常使用" class="headerlink" title="日常使用"></a>日常使用</h2><h3 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h3><ul><li>安装ssh<br>sudo apt install ssh  </li><li>开启<br>service ssh start</li></ul><h3 id="git-使用"><a href="#git-使用" class="headerlink" title="git 使用"></a>git 使用</h3><ul><li>修改git默认编辑器为Vim<br>git config –global core.editor vim    </li><li>git保存仓库的账号密码<br>git config –global credential.helper store   </li></ul>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes入门实战</title>
    <link href="/2021/01/07/2020-06-07-k8s/"/>
    <url>/2021/01/07/2020-06-07-k8s/</url>
    
    <content type="html"><![CDATA[<h2 id="docker回顾"><a href="#docker回顾" class="headerlink" title="docker回顾"></a>docker回顾</h2><h3 id="创建一个简单的Node-js应用"><a href="#创建一个简单的Node-js应用" class="headerlink" title="创建一个简单的Node.js应用"></a>创建一个简单的Node.js应用</h3><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-keyword">const</span> os = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;os&#x27;</span>);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Kubia server starting...&quot;</span>);<br><span class="hljs-keyword">var</span> handler = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">request,response</span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Received request from&quot;</span>+request.connection.remoteAddress);<br>response.writeHead(<span class="hljs-number">200</span>);<br>response.end(<span class="hljs-string">&quot;You&#x27;ve hit &quot;</span>+ os.hostname()+<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;;<br><br><span class="hljs-keyword">var</span> www = http.createServer(handler);<br>www.listen(<span class="hljs-number">8080</span>);<br></code></pre></td></tr></table></figure><h3 id="为镜像创建Dockerfile"><a href="#为镜像创建Dockerfile" class="headerlink" title="为镜像创建Dockerfile"></a>为镜像创建Dockerfile</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> node:<span class="hljs-number">7</span><br><span class="hljs-keyword">ADD</span><span class="bash"> app.js /app.js</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="bash"> [<span class="hljs-string">&quot;node&quot;</span>,<span class="hljs-string">&quot;app.js&quot;</span>]</span><br></code></pre></td></tr></table></figure><h3 id="构建容器镜像"><a href="#构建容器镜像" class="headerlink" title="构建容器镜像"></a>构建容器镜像</h3><p>docker build -t kubia .<br>镜像构建的过程：用户告诉 Docker 需要基于当前目录（注意命令 结尾的点）构建一个叫 kubia 的镜像，Docker 会在目录中寻找 Dockerfile，然后基 于其中的指令构建镜像。  </p><h3 id="运行容器镜像"><a href="#运行容器镜像" class="headerlink" title="运行容器镜像"></a>运行容器镜像</h3><p>docker run –name kubia-container -p 8080:8080 -d kubia<br>这条命令告知Docker基于kubia镜像创建一个叫kubia-container的新容器。这个容器与命令行分离 (-d标志），这意味着在后台运行.<br>通过localhost:8080访问应用  </p><h3 id="获取更多容器信息"><a href="#获取更多容器信息" class="headerlink" title="获取更多容器信息"></a>获取更多容器信息</h3><p>docker ps只会展示容器的大部分基础信息。可以使用docker inspect查看更多的信息。<br>docker inspect kubia-container   Docker会打印出包含容器底层信息的长JSON。</p><h3 id="探索容器内部"><a href="#探索容器内部" class="headerlink" title="探索容器内部"></a>探索容器内部</h3><p>docker exec -it kubia-container bash<br>这会在已有的 kubia-container 容器内部运行bash。bash进程会和主容器进程拥有相同的命名空间。<br>-it选项是下面两个选项的简写：<br>• -i，确保标准输入流保待开放。需要在 shell 中输入命令。<br>• -t, 分配一个伪终端(TTY) 。<br>例如： 查询进程：ps -aux  </p><h3 id="停止和删除容器"><a href="#停止和删除容器" class="headerlink" title="停止和删除容器"></a>停止和删除容器</h3><p>docker stop kubia-container<br>docker rm kubia-container  </p><h3 id="向镜像仓库推送镜像"><a href="#向镜像仓库推送镜像" class="headerlink" title="向镜像仓库推送镜像"></a>向镜像仓库推送镜像</h3><ul><li>使用附加标签标注镜像<br>不会重命名标签，而是给同一个镜像创建一个额外的标签<br>docker tag kubia 1150079039/kubia  <pre><code>      源               目的   </code></pre></li><li>向Docker Hub推送镜像<br>docker push 1150079039/kubia   </li></ul><h2 id="配置kubernetes集群"><a href="#配置kubernetes集群" class="headerlink" title="配置kubernetes集群"></a>配置kubernetes集群</h2><h3 id="用Minikube运行一个本地单节点kubernetes集群"><a href="#用Minikube运行一个本地单节点kubernetes集群" class="headerlink" title="用Minikube运行一个本地单节点kubernetes集群"></a>用Minikube运行一个本地单节点kubernetes集群</h3><p>Minikube是一个构建单节点集群的工具，对于测试kubernetes和本地开发应用都非常有用。  </p><h4 id="安装Minikube"><a href="#安装Minikube" class="headerlink" title="安装Minikube"></a>安装Minikube</h4><p><a href="http://github.com/kubernetes/minikube">http://github.com/kubernetes/minikube</a></p><h4 id="使用Minikube启动一个kubernetes集群"><a href="#使用Minikube启动一个kubernetes集群" class="headerlink" title="使用Minikube启动一个kubernetes集群"></a>使用Minikube启动一个kubernetes集群</h4><p>minikube start</p><h2 id="安装kubernetes客户端（kubectl"><a href="#安装kubernetes客户端（kubectl" class="headerlink" title="安装kubernetes客户端（kubectl)"></a>安装kubernetes客户端（kubectl)</h2><p>要与kubernetes交互，还需要kubectl CLI客户端</p><h3 id="使用kubectl查看集群是否正常工作"><a href="#使用kubectl查看集群是否正常工作" class="headerlink" title="使用kubectl查看集群是否正常工作"></a>使用kubectl查看集群是否正常工作</h3><p>kubectl cluster-info</p><h3 id="kubectl列出所有集群节点"><a href="#kubectl列出所有集群节点" class="headerlink" title="kubectl列出所有集群节点"></a>kubectl列出所有集群节点</h3><p>kubectl get nodes<br>kubectl get命令可以列出各种kubernetes对象</p><h4 id="查看对象更多信息"><a href="#查看对象更多信息" class="headerlink" title="查看对象更多信息"></a>查看对象更多信息</h4><p>kubectl describe node gke-kubia  </p><h2 id="在kubernetes上运行第一个应用"><a href="#在kubernetes上运行第一个应用" class="headerlink" title="在kubernetes上运行第一个应用"></a>在kubernetes上运行第一个应用</h2><h3 id="部署Node-js应用"><a href="#部署Node-js应用" class="headerlink" title="部署Node.js应用"></a>部署Node.js应用</h3><p>kubectl run kubia –image=1150079039/kubia –port=8080 -generator=run/v1<br>–image=1150079039/kubia 显示的是指定要运行的容器镜像，–port=8080选项告诉Kubernetes应用正在监昕8080端口。最后一个标志（–generator）需要解释一下，通常并不会使用到它，它让Kubernetes创建一个Replication Controller, 而不是Deployment。</p><h3 id="列出pod"><a href="#列出pod" class="headerlink" title="列出pod"></a>列出pod</h3><p>kubectl get pods  </p><h3 id="访问web应用"><a href="#访问web应用" class="headerlink" title="访问web应用"></a>访问web应用</h3><p>每个pod都有自己的IP地址，但是这个地址是集群内部的，不能从集群外部访问。要让pod能够从外部访问，需要通过服务对象公开它，要通过创建一个特殊的LoadBalancer类型的服务，将创建一个外部的负载均衡，可以通过负载均衡的公共IP访问pod。  </p><h4 id="创建一个服务对象"><a href="#创建一个服务对象" class="headerlink" title="创建一个服务对象"></a>创建一个服务对象</h4><p>要创建服务，需要告知kubernetes对外暴露之前创建的ReplicationController(缩写为rc):<br>kubectl expose rc kubia –type=LoadBalancer –name kubia-http     </p><h3 id="列出服务"><a href="#列出服务" class="headerlink" title="列出服务"></a>列出服务</h3><p>kubectl get service  </p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Mysql必知必会</title>
    <link href="/2021/01/07/2020-06-06-sqlLearn/"/>
    <url>/2021/01/07/2020-06-06-sqlLearn/</url>
    
    <content type="html"><![CDATA[<h2 id="查询有两条或者两条以上的数据-–先分组，在统计"><a href="#查询有两条或者两条以上的数据-–先分组，在统计" class="headerlink" title="查询有两条或者两条以上的数据  –先分组，在统计"></a>查询有两条或者两条以上的数据  –先分组，在统计</h2><p>select a.code from ldcode a where 1=1 GROUP BY a.code HAVING COUNT(a.code)&gt; 1</p><h3 id="为什么要用where-1-1？"><a href="#为什么要用where-1-1？" class="headerlink" title="为什么要用where 1=1？"></a>为什么要用where 1=1？</h3><p>之前一直不太明白，sql语句里为什么要写where 1=1 巴拉巴拉巴拉<br>提升某种执行效率？<br>其实，1=1 是永恒成立的，意思无条件的，也就是说在SQL语句中有没有这个1=1都可以。<br>这个1=1常用于应用程序根据用户选择项的不同拼凑where条件时用的。<br>如：web界面查询用户的信息，where默认为1=1，这样用户即使不选择任何条件，sql查询也不会出错。如果用户选择了姓名，那么where变成了where 1=1 and 姓名=’用户输入的姓名’，如果还选择了其他的条件，就不断在where 条件后追加 and语句就行了。<br>如果不用1=1的话，每加一个条件，都要判断前面有没有where 条件，如果没有就写where …，有就写and语句，因此此时用1=1可以简化了应用程序的复杂度。  </p><h2 id="sql-substr函数用法-含头不含尾"><a href="#sql-substr函数用法-含头不含尾" class="headerlink" title="sql: substr函数用法(含头不含尾)"></a>sql: substr函数用法(含头不含尾)</h2><h3 id="SUBSTR-str-pos-len-从pos开始的位置，截取len个字符"><a href="#SUBSTR-str-pos-len-从pos开始的位置，截取len个字符" class="headerlink" title="SUBSTR(str,pos,len): 从pos开始的位置，截取len个字符"></a>SUBSTR(str,pos,len): 从pos开始的位置，截取len个字符</h3><p>substr(string ,1,3) ：取string左边第1位置起，3字长的字符串。<br>所以结果为： str<br>substr(string, -1,3)：取string右边第1位置起，3字长的字符串。显然右边第一位置起往右不够3字长。结果只能是： g<br>substr(string, -3,3)：取string右边第3位置起，3字长的字符串。<br>结果为: ing</p><h3 id="SUBSTR-str-pos-pos开始的位置，一直截取到最后"><a href="#SUBSTR-str-pos-pos开始的位置，一直截取到最后" class="headerlink" title="SUBSTR(str,pos): pos开始的位置，一直截取到最后"></a>SUBSTR(str,pos): pos开始的位置，一直截取到最后</h3><p>substr(string ,4) : 从右第4位置截取到最后<br>结果是： ing</p><h2 id="mysql迁移"><a href="#mysql迁移" class="headerlink" title="mysql迁移"></a>mysql迁移</h2><h3 id="物理迁移mysql"><a href="#物理迁移mysql" class="headerlink" title="物理迁移mysql"></a>物理迁移mysql</h3><p>寻找my.cnf文件：find / -name my.cnf<br>查看datadir路径<br>进入mysql数据目录对当前文件夹打包：zip -r myfile.zip ./*<br>备份新数据库mysql数据目录，将压缩包传到新数据库mysql数据目录中解压<br>修改权限:chown -R mysql:mysql .  </p><h3 id="mysql导入外部sql脚本的方法"><a href="#mysql导入外部sql脚本的方法" class="headerlink" title="mysql导入外部sql脚本的方法"></a>mysql导入外部sql脚本的方法</h3><p>登陆到mysql：mysql -h 127.0.0.1 -uroot -p<br>创建一个数据库，用于存放导入的sql：create database xxx;<br>找到Sql的路径，利用source命令导入到刚刚创建的数据库中:source /data/demo.sql   </p><h3 id="如何查看MySQL的当前存储引擎？"><a href="#如何查看MySQL的当前存储引擎？" class="headerlink" title="如何查看MySQL的当前存储引擎？"></a>如何查看MySQL的当前存储引擎？</h3><ul><li>看你的mysql现在已提供什么存储引擎:<br>mysql&gt; show engines;  </li><li>看你的mysql当前默认的存储引擎:<br>mysql&gt; show variables like ‘%storage_engine%’;  </li><li>你要看某个表用了什么引擎(在显示结果里参数engine后面的就表示该表当前用的存储引擎):<br>mysql&gt; show create table 表名;  </li><li>如何查看Mysql服务器上的版本<br>select version();  </li></ul><h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><p>DROP TABLE x</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Shell使用</title>
    <link href="/2021/01/07/2020-06-03-shellLearn/"/>
    <url>/2021/01/07/2020-06-03-shellLearn/</url>
    
    <content type="html"><![CDATA[<h2 id="zsh与bash切换"><a href="#zsh与bash切换" class="headerlink" title="zsh与bash切换"></a>zsh与bash切换</h2><ul><li>zsh切换为bash<br>chsh -s /bin/bash  </li><li>bash切换为zsh<br>chsh -s /bin/zsh  </li></ul><h3 id="查看当前运行的-Shell"><a href="#查看当前运行的-Shell" class="headerlink" title="查看当前运行的 Shell"></a>查看当前运行的 Shell</h3><p>echo $SHELL  </p><h3 id="查看当前的-Linux-系统安装的所有-Shell"><a href="#查看当前的-Linux-系统安装的所有-Shell" class="headerlink" title="查看当前的 Linux 系统安装的所有 Shell"></a>查看当前的 Linux 系统安装的所有 Shell</h3><p>cat /etc/shells</p><h2 id="Bash-变量"><a href="#Bash-变量" class="headerlink" title="Bash 变量"></a>Bash 变量</h2><p>env命令或printenv命令，可以显示所有环境变量。  </p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">常见的环境变量。<br>BASHPID：Bash 进程的进程 ID。  <br>BASHOPTS：当前 <span class="hljs-keyword">Shell</span><span class="bash"> 的参数，可以用<span class="hljs-built_in">shopt</span>命令修改。</span><br>DISPLAY：图形环境的显示器名字，通常是:<span class="hljs-number">0</span>，表示 X Server 的第一个显示器。<br>EDITOR：默认的文本编辑器。<br>HOME：用户的主目录。<br>HOST：当前主机的名称。<br>IFS：词与词之间的分隔符，默认为空格。<br>LANG：字符集以及语言编码，比如zh_CN.UTF-<span class="hljs-number">8</span>。<br>PATH：由冒号分开的目录列表，当输入可执行程序名后，会搜索这个目录列表。<br>PS1：<span class="hljs-keyword">Shell</span><span class="bash"> 提示符。</span><br>PS2： 输入多行命令时，次要的 <span class="hljs-keyword">Shell</span><span class="bash"> 提示符。</span><br>PWD：当前工作目录。<br>RANDOM：返回一个<span class="hljs-number">0</span>到<span class="hljs-number">32767</span>之间的随机数。<br><span class="hljs-keyword">SHELL</span><span class="bash">：Shell 的名字。</span><br>SHELLOPTS：启动当前 <span class="hljs-keyword">Shell</span><span class="bash"> 的<span class="hljs-built_in">set</span>命令的参数，参见《<span class="hljs-built_in">set</span> 命令》一章。</span><br>TERM：终端类型名，即终端仿真器所用的协议。<br>UID：当前用户的 ID 编号。<br><span class="hljs-keyword">USER</span>：当前用户的用户名。<br></code></pre></td></tr></table></figure><p>set命令可以显示所有变量（包括环境变量和自定义变量），以及所有的 Bash 函数。<br>查看单个环境变量的值，可以使用printenv命令或echo命令。<br>注意，printenv命令后面的变量名，不用加前缀$。  </p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>北欧教育模式，为何深受世界推崇？</title>
    <link href="/2021/01/07/2020-06-02-everydayEnglish/"/>
    <url>/2021/01/07/2020-06-02-everydayEnglish/</url>
    
    <content type="html"><![CDATA[<h3 id="This-Is-How-Scandinavia-Got-Great-斯堪的纳维亚国家崛起的原因"><a href="#This-Is-How-Scandinavia-Got-Great-斯堪的纳维亚国家崛起的原因" class="headerlink" title="This Is How Scandinavia Got Great  斯堪的纳维亚国家崛起的原因"></a>This Is How Scandinavia Got Great  斯堪的纳维亚国家崛起的原因</h3><p>长期以来，北欧在各项社会指标中名列前茅，被视为发达国家的标杆。有文章认为，北欧社会的幸福和平等，源于其全民化的教育制度。那么，这种教育制度有什么特征？它适合在其他地方推广吗？一起来听今天的讲解。   </p><h4 id="By-David-Brooks"><a href="#By-David-Brooks" class="headerlink" title="By David Brooks"></a>By David Brooks</h4><p>Almost everybody admires the Nordic model. Countries like Sweden, Denmark, Norway and Finland have high economic productivity, high social equality, high social trust and high levels of personal happiness.</p><p>几乎所有人都欣赏北欧模式。在瑞典、丹麦、挪威和芬兰等北欧国家，经济生产率高、社会平等、社会互信、个人幸福。</p><p>But Nordic nations were ethnically homogeneous in 1800, when they were dirt poor. What really launched the Nordic nations was generations of phenomenal educational policy.</p><p>但在1800年，这些属于同一种族的北欧国家一贫如洗。真正推动北欧国家发展的是数代人卓越的教育政策。</p><p>The 19th-century Nordic elites realized that if their countries were to prosper they had to create truly successful “folk schools” for the least educated among them, and that they were going to have to make lifelong learning a part of the natural fabric of society.</p><p>19世纪的北欧精英意识到，要想国家繁荣，他们就必须为其中受教育程度最低的人创办真正有效的“民间学校”，并将终身学习变成社会的一种常态。</p><p>The German word they used to describe their approach, bildung, means the complete moral, emotional, intellectual and civic transformation of the person. It was based on the idea that if people were going to be able to handle and contribute to an emerging industrial society, they would need more complex inner lives.</p><p>他们用德语词“bildung”（教化）来描述自己的教育方式，它指的是一个人在道德、情感、智力和公民性方面的彻底转变，基于的理念是：如果人们想要融入一个新兴工业社会并为其做出贡献，他们需要更为丰富的内心世界。</p><p>Bildung is devised to change the way students see the world. It is devised to help them understand complex systems and see the relations between things. </p><p>“bildung”旨在改变学生们看待世界的方式，帮助他们理解复杂的体系，了解事物之间的关系。</p><p>That educational push seems to have had a lasting influence on the culture. They have the lowest rates of corruption in the world. They have a distinctive sense of the relationship between personal freedom and communal responsibility.</p><p>这一教育上的努力似乎对他们的文化产生了持久影响。北欧国家拥有全世界最低的腐败率，他们对个人自由和集体责任之间的关系有着独特的理解。</p><p>(c) 2020 The New York Times Company</p><p>▍生词好句</p><p>ScandinaviaUK /ˌskændɪˈneɪviə/ US /ˌskændəˈneɪviə/<br>n. 斯堪的纳维亚<br>地理上指斯堪的纳维亚半岛，包括挪威和瑞典。而在文化与政治上则包含丹麦。芬兰、冰岛和法罗群岛等北欧国家因为与丹麦、挪威和瑞典相近的历史和文化背景，有时也被视为斯堪的纳维亚国家。  </p><p>the Nordic model<br>北欧模式  </p><p>Nordic adj. 北欧的<br>the Nordic countries 北欧国家<br>北欧五国：Sweden，Denmark，Norway，Finland，Iceland  </p><p>dirt poor 一贫如洗（very poor）  </p><p>dirt cheap 非常便宜（very cheap）  </p><p>ethnically UK /ˈeθnɪkəli/ US /ˈeθnɪkəli/<br>adv. 民族上</p><p>ethnic adj. 种族的，民族的，人种的<br>ethnic minority 少数民族  </p><p>homogeneous UK /ˌhɒməˈdʒiːniəs, ˌhəʊməˈdʒiːniəs/ US /ˌhoʊmoʊˈdʒiːniəs, ˌhɑːməˈdʒiːniəs/<br>adj. 同类的  </p><p>The population of the village has remained remarkably homogeneous, namely the ethnic Miao.<br>这是一个地道的苗族村寨。<br>homosexuality n. 同性恋  </p><p>phenomenal UK /fəˈnɒmɪnəl/ US /fəˈnɒmɪnəl/<br>adj. 现象级的  </p><p>Her rise to fame was quite phenomenal. In less than a day, she was a household name.<br>她的成名是现象级的。在不到一天之内，她已经家喻户晓了。  </p><p>elite UK /iˈliːt/ US /iˈliːt/<br>n. 精英<br>lifelong learning<br>终身学习<br>the fabric of society<br>社会结构  </p><p>Unhappiness was woven into the natural fabric of people’s lives.<br>苦恼忧愁原是人们日常生活的一部分。  </p><p>civic UK /ˈsɪvɪk/ US /ˈsɪvɪk/<br>adj. 公民的  </p><p>civic leaders 公民领袖  </p><p>be devised to do sth.<br>被设计用来做某事   </p><p>devise vt. 巧妙设计，发明（to&nbsp;invent&nbsp;a&nbsp;plan,&nbsp;system,&nbsp;object, etc., usually using&nbsp;your&nbsp;intelligence&nbsp;or&nbsp;imagination）<br>The&nbsp;umbrella&nbsp;was ingeniously devised to&nbsp;fold&nbsp;up into&nbsp;your&nbsp;pocket.<br>这把伞的设计很巧妙，可以叠放进口袋。  </p><p>distinctive UK /dɪˈstɪŋktɪv/ US /dɪˈstɪŋktɪv/<br>adj. 鲜明的，与众不同的  </p><p>You’ve got a very distinctive voice.<br>你的声音很独特。  </p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>《简叔的70个断舍离》片段</title>
    <link href="/2021/01/07/2020-05-17-duansheliexpr/"/>
    <url>/2021/01/07/2020-05-17-duansheliexpr/</url>
    
    <content type="html"><![CDATA[<h2 id="简叔的70个断舍离"><a href="#简叔的70个断舍离" class="headerlink" title="简叔的70个断舍离"></a>简叔的70个断舍离</h2><ul><li><p>成年人要懂得所有获得都有代价，所有失去也都有收获。  妄想一切好的都给我，一切坏的都离开我。这本身就有问题。  我不要焦虑，不要抑郁，不要贫困，不要疾病，不要死，不要有青春痘，夏天不要热，冬天不要冷，好东西不要贵，好女人不要太难追。  总是和大自然作对，大自然不折腾你折腾谁呢？  想进就进，想退就退。进退自如，不为所扰。</p></li><li><p>1.只要开始张嘴说话，就要先肯定，然后委婉地提出意见。假如对方确实需要你的意见，而且你又会委婉的话。<br>2.只要开始张嘴说话，就说肯定的话语，或者真诚地表达自己确实不懂，所以看不出好坏，而永远不说负面的话语。言语往往最伤人，开口闭口都是智慧，一张一合之间，人生大有不同。</p></li><li><p>如果你留下这些衣物，也没什么大不了的，我还没见过谁因为衣服过多住进医院的。  如果你抛弃这些衣物，也没什么大不了的，我还没见过谁因为丢了一些衣物一贫如洗，心脏病发的。  总之，这是一件小事，  小事就应该快速处理，马上过去，迅速遗忘，直奔未来。</p></li><li><p>如果你想和大多数人不一样，你一定要做的、想的和大多数人不一样。  为什么呢？  因为你的获得或者失去，皆是你的想法和行动所导致。想的一样，结果自然就和大家一样。</p></li><li><p>人生任何人都不是过客，不是拍个照就可以了。要去参与，深度而热烈地参与。  成功从来就没有秘诀，就是做，坚持做。大道至简，因为看起来太过简单，所以很多人不信，认为成功这么高档的事情，一定有很复杂的理论。</p></li><li><p>你只要试着问问自己这几个问题，就能有效地管住手，不用剁手了。  1.为什么买这个物品？是好看，还是有用？  以要买一条牛仔裤为例，这个裤子很好看，自己也喜欢，裤子当然有用了。  2.是必须买吗，不买不行吗？  如果我真的缺少，不买肯定不行，如果不缺少，到这一条就停止了。  3.是自己所能挑选所能支付能力之内最好的吗？  一般人不是，因为贪图便宜还是人的本能。这个所谓最好不是去做冤大头，而是要物有所值。在我看来，几百块的牛仔裤已经足够了，买几千块的没有必要，不要去追求那个最好。  4.买回来放哪里？  放衣柜里，衣柜里还有空间吗？  5.这件物品能带给自己什么益处？  它和以前的牛仔裤有什么不同？除了新之外，是更舒服，更合体，还是别的什么？  6.自己有相同或者类似的物品吗？  大部分时候是有的，谁没有几条牛仔裤呢？  7.买回来使用频率是多高？</p></li><li><p>会经常穿吗，一周一次，还是一月一次？有时候看上一个小礼服，买回来却很少有参加酒会的机会。  8.保养、清洗、维修成本高吗？  真丝等高档面料，购买之前就要想好，越好的东西，伺候它的成本越高，你是让它为你服务，还是让自己为它服务？  9.没有这件物品，我的生活会受到什么影响？  没衣服穿了吗？影响大吗，还是小？  10.如果不再需要了，处理起来方便吗？  买个稀奇古怪又少见的物品，就等着纠结吧。当你不用的时候，扔掉可惜，卖又没人要。就像买车一样，保有量高的车永远是保值率高的。  只要你问问自己这10个问题，回答都是yes，买回来的东西一定是合适的；有一个回答是no，就不要买。</p></li><li><p>使用某个物品的地方，一定是收纳某个物品的地方。  这样才能保证取用方便，随取随用，随用随还。</p></li><li><p>好的物品就像好朋友，岁月不仅不会让它失去魅力，反而令它越发迷人。从今天开始，给自己买一些真正钟爱的物品吧。</p></li><li><p>每一样物品都  谨慎地购买，  爱惜地使用，  果断地丢弃，  就是人间的一种福分了。</p></li><li><p>很多时候我们说“没办法，没得选”，潜台词是：  我想获得我想要的，但不想付出成本。</p></li><li><p>1.目前的成本我能否接受？  能就留下，不能就走。既想看太阳，又不想有阴影，是小孩子的天真幻想。  2.自己所担心的事情是真的吗？  是真的就留下，是假的就走，真真假假就找简叔咨询。  3.综合所有因素考虑之后怎么办？  给每个因素都打上权重分，加一加，超过70分就留，否则就走。  所有的问题都经不起分析。  一切困难都是纸老虎。</p></li><li><p>这么简单的事情，你都做不好，真是个猪头。  这是她的先生经常对她说的一句话。  这种话任再好脾气的人也会不爽，为什么呢？  这句话里面饱含了指责，谁都能看出来。但是这个指责还有一个特点：  全是情绪，没有事实。  1.这么简单的事？  什么是简单，什么是复杂？不过是他认为简单而已，但是对她来说，可能就复杂极了。  2.你都做不好？  怎样是做好呢？做到什么标准？可惜这种事情一般都是家庭琐事，没有什么客观标准，全看对方怎么看，不符合对方的要求就是不好，符合对方的要求就是好。  3.你个猪头？  我认为你做不好，所以你是猪头，笨死了。这里已经脱离了事实，成了人身攻击。  简简单单的一句话，包含了浓郁的大男子主义，自恋，控制。  可惜你就这么承受下来了，不知不觉形成了一种习惯，一个愿打一个愿挨。一晃十几年就过去了，此中委屈和谁说呢？  但是我们要记住，所有的关系形成，都是配合的结果。黄盖不配合周瑜，周瑜就打不了他。</p></li><li><p>如果你是一个经常指责别人的人，注意一点就可以了：  只说问题，不加情绪。  这个衣服怎么这么乱，这个话不要说，因为乱不乱都是相对的。  这个衣服没有叠好放到柜子里，有什么困难吗？要这样说。问题非常具体，对方也容易清晰地理解你的意图。  然后，一起想办法，去解决问题。只要能静下心来，你就会发现，很多问题没那么困难。  如果你是一个被指责者：  （1）承认对方说话的合理性，对方想打仗，你先说咱不打，这就消掉了一半的火气。而且你仔细想一下，对方未必完全没道理嘛。  （2）问对方，你有什么建议吗？有合理建议就采纳，让他先发言，满足表达欲望。然后提出自己的想法，介入问题解决程序。  （3）指出对方的不合理之处。这个时候已经平静了，可以提出他说的问题是对的，但是情绪化的表达对自己是一个伤害，希望不要这样了。对方一般也会说，我不是那个意思，也只是想解决问题而已。  注意，所有这一切都要在心平气和的时候进行，对指责者所有的反应，都不要马上做自动反应，而是平静反应。</p></li><li><p>父母的逼婚，和你逼他们断舍离一样，都属于一种思维——  你要按我的想法生活。</p></li><li><p>选择什么样的生活方式本身就是一种价值观的问题，每个人天然地有按自己价值观生活的权力。  强加于人，就是独裁。</p></li><li><p>追逐一个不存在的事情，结局注定是一场空。</p></li><li><p>有一次我去看电影，但是发现电影不好看。这个时候我有两种想法：  接着看下去，不然票不白买了吗？浪费钱！  赶紧走，看下去就是浪费时间！  哪个想法更合理呢？你会怎么做呢？  很多人会按第一种来做，因为花钱了，咬着牙也要坚持下去。  这在心理学上叫“沉没成本（Sunk Cost）”。  人们在决定是否去做一件事情的时候，不仅是看这件事对自己有没有好处，而且也看过去是不是已经在这件事情上有过投入。我们把这些已经发生而不可收回的支出，如时间、金钱、精力等称为“沉没成本”。</p></li><li><p>贵重的酒水茶，要等着贵客来才开启，可惜贵客一直没来。  刷购物网站，要从头到尾看个遍，生怕错过了“物美价廉”的东西。最后累得头晕眼花，终于找到一个就欣喜若狂，从没有想过付出这么多时间和精神成本，到底值不值。  这种心理源自年幼时候的贫困所造成的匮乏，或者，虽然不那么贫困，但一直没有得到充分的满足，就会有这种“匮乏感”</p></li><li><p>断舍离，最终能调整的只有自己。  想减肥，就多运动少吃饭。  想拥有良好的人际关系，就多付出少计较。  想致富就多劳动，养成节俭的习惯。  我想和×××断舍离，不仅是口头上的说说而已，更多是行动上的证明。能够多大程度上实现，就看能够付出多大的努力了。道理是同样一个道理，别人知晓的和我知晓的并没有什么不同，但有的人做得好，有的人做得差，差别就在“做”上而已。</p></li><li><p>无论你的原生家庭是什么样子，父母已经做出了他们最好的努力。  而且造成的影响也已经形成，重要的不是去埋怨，而是接受已经发生的事实，同时去努力改善自己可以改善的部分。</p></li><li><p>好好地思考属于自己的生活方式，不盲从不固执，就能过上舒心又简单的生活。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python入门</title>
    <link href="/2021/01/07/2020-04-27-pythonIntroduction/"/>
    <url>/2021/01/07/2020-04-27-pythonIntroduction/</url>
    
    <content type="html"><![CDATA[<h2 id="翻到以前阅读过的博客的一段话"><a href="#翻到以前阅读过的博客的一段话" class="headerlink" title="翻到以前阅读过的博客的一段话"></a>翻到以前阅读过的博客的一段话</h2><p>关于学习新知识我有一点心得体会想与你分享。我在学习新知识的时候会遵循一个5-20-2法则，用5分钟的时间了解这个新知识的特点、应用场景、要解决的问题；用20分钟理解它的主要设计原理、核心思想和思路；再花2个小时看关键的设计细节，尝试使用或者做一个demo。<br>如果5分钟不能搞懂它要解决的问题，我就会放弃；20分钟没有理解它的设计思路，我也会放弃；2个小时还上不了手，我也会放一放。你相信我，一种真正有价值的好技术，你这次放弃了，它过一阵子还会换一种方式继续出现在你面前。这个时候，你再尝试用5-20-2法则去学习它，也许就会能理解了。我学Hadoop实际上就是经历了好几次这样的过程，才终于入门。而有些技术，当时我放弃了，它们再也没有出现在我面前，后来它们被历史淘汰了，我也没有浪费自己的时间。<br>还有的时候，你学一样新技术却苦苦不能入门，可能仅仅就是因为你看的文章、书籍本身写的糟糕，或者作者写法跟你的思维方式不对路而已，并不代表这个技术有多难，更不代表你的能力有问题，如果换个方式、换个时间、换篇文章重新再看，可能就豁然开朗了。  </p><h2 id="Python基础"><a href="#Python基础" class="headerlink" title="Python基础"></a>Python基础</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>搭建python3.7</p><h3 id="IDE安装"><a href="#IDE安装" class="headerlink" title="IDE安装"></a>IDE安装</h3><p>安装PyCharm</p><h3 id="运行您的第一个Python程序"><a href="#运行您的第一个Python程序" class="headerlink" title="运行您的第一个Python程序"></a>运行您的第一个Python程序</h3><ol><li>新建 hello.py 文件，输入：<br>print(“Hello, Python”)  </li><li>脚本文件添加可执行权限<br>chmod +x test.py  </li><li>运行<br>./test.py  </li><li>输出结果<br>Hello, Python!  </li></ol><h3 id="Python-标识符"><a href="#Python-标识符" class="headerlink" title="Python 标识符"></a>Python 标识符</h3><p>在 Python 里，标识符由字母、数字、下划线组成，但不能以数字开头。<br>以下划线开头的标识符是有特殊意义的。以单下划线开头 _foo 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 from xxx import * 而导入。<br>以双下划线开头的 <strong>foo 代表类的私有成员，以双下划线开头和结尾的 __foo</strong> 代表 Python 里特殊方法专用的标识，如 <strong>init</strong>() 代表类的构造函数。<br>Python 可以同一行显示多条语句，方法是用分号 ; 分开  </p><h3 id="行和缩进"><a href="#行和缩进" class="headerlink" title="行和缩进"></a>行和缩进</h3><p>Python 的代码块不使用大括号 {} 来控制类，函数以及其他逻辑判断，而是用缩进来写模块。缩进的空白数量是可变的，但是所有代码块语句必须包含相同的缩进空白数量，这个必须严格执行。  </p><h3 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a>多行语句</h3><p>Python语句中一般以新行作为语句的结束符。但是我们可以使用斜杠（ \）将一行的语句分为多行显示，语句中包含 [], {} 或 () 括号就不需要使用多行连接符。  </p><h3 id="Python-引号"><a href="#Python-引号" class="headerlink" title="Python 引号"></a>Python 引号</h3><p>Python 可以使用引号( ‘ )、双引号( “ )、三引号( ‘’’ 或 “”” ) 来表示字符串，引号的开始与结束必须是相同类型的。<br>其中三引号可以由多行组成，编写多行文本的快捷语法，常用于文档字符串。   </p><h3 id="Python注释"><a href="#Python注释" class="headerlink" title="Python注释"></a>Python注释</h3><p>python中单行注释采用 # 开头。python 中多行注释使用三个单引号(‘’’)或三个双引号(“””)。</p><h3 id="import-与-from…import"><a href="#import-与-from…import" class="headerlink" title="import 与 from…import"></a>import 与 from…import</h3><p>在 python 用 import 或者 from…import 来导入相应的模块。<br>将整个模块(somemodule)导入，格式为： import somemodule<br>从某个模块中导入某个函数,格式为： from somemodule import somefunctio<br>从某个模块中导入多个函数,格式为： from somemodule import firstfunc, secondfunc, thirdfunc<br>将某个模块中的全部函数导入，格式为： from somemodule import *  </p><h3 id="标准数据类型"><a href="#标准数据类型" class="headerlink" title="标准数据类型"></a>标准数据类型</h3><p>Python有六个标准的数据类型：    </p><ul><li>Numbers（数字）</li><li>String（字符串） </li><li>List（列表）</li><li>Tuple（元组）</li><li>Set（集合）</li><li>Dictionary（字典）<br>不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元组）;<br>可变数据（3 个）：List（列表）、Dictionary（字典）、Set（集合）。  </li></ul><h4 id="Python数字"><a href="#Python数字" class="headerlink" title="Python数字"></a>Python数字</h4><p>支持 int、float、bool、complex（复数），内置的 type() 函数可以用来查询变量所指的对象类型。    </p><ul><li>isinstance 和 type 的区别在于：<br>type()不会认为子类是一种父类类型。<br>isinstance()会认为子类是一种父类类型。<br>当你指定一个值时，Number 对象就会被创建：<br>您也可以使用del语句删除一些对象引用。  </li></ul><h4 id="tring（字符串）"><a href="#tring（字符串）" class="headerlink" title="tring（字符串）"></a>tring（字符串）</h4><p>字符串或串(String)是由数字、字母、下划线组成的一串字符。<br>python的字串列表有2种取值顺序:<br>从左到右索引默认0开始的，最大范围是字符串长度少1<br>从右到左索引默认-1开始的，最大范围是字符串开头<br>从字符串中获取一段子字符串的话，含头不含尾。  </p><h4 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h4><p>列表用 [ ] 标识，是 python 最通用的复合数据类型。<br>加号 + 是列表连接运算符，星号 * 是重复操作。  </p><h4 id="Tuple（元组）"><a href="#Tuple（元组）" class="headerlink" title="Tuple（元组）"></a>Tuple（元组）</h4><p>元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 () 里，元素之间用逗号隔开。   </p><h4 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h4><p>集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。<br>可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。   </p><h4 id="Dictionary（字典）"><a href="#Dictionary（字典）" class="headerlink" title="Dictionary（字典）"></a>Dictionary（字典）</h4><p>列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。<br>字典是一种映射类型，字典用 { } 标识，它是一个无序的 键(key) : 值(value) 的集合。<br>键(key)必须使用不可变类型。<br>在同一个字典中，键(key)必须是唯一的。  </p><h2 id="Jupyter-使用"><a href="#Jupyter-使用" class="headerlink" title="Jupyter 使用"></a>Jupyter 使用</h2><h3 id="安装jupyter"><a href="#安装jupyter" class="headerlink" title="安装jupyter"></a>安装jupyter</h3><p>pip3 install jupyter</p><h3 id="启动jupyter"><a href="#启动jupyter" class="headerlink" title="启动jupyter"></a>启动jupyter</h3><p>启动jupyter<br>jupyter notebook<br>指定英文开启<br>LANGUAGE=”” LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8 jupyter notebook  </p><h3 id="jupyter基本功能"><a href="#jupyter基本功能" class="headerlink" title="jupyter基本功能"></a>jupyter基本功能</h3><p>运行python代码<br>运行代码文件保存到磁盘<br>markdown格式编写注释  </p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>三月概述</title>
    <link href="/2021/01/07/2020-03-09-marchSummary/"/>
    <url>/2021/01/07/2020-03-09-marchSummary/</url>
    
    <content type="html"><![CDATA[<h2 id="二月总结"><a href="#二月总结" class="headerlink" title="二月总结"></a>二月总结</h2><p>这个总结似乎晚了一些。<br>人最怕的就是东一榔头，西一榔头，看似忙到精疲力尽，感动了自己，殊不知最终毫无收获：首先，不需钻研思考便能轻易弄懂的问题，并没有太多的含金量；其次，时间浪费在了寻找和浅尝辄止上；最终，遂成不喜思考的习惯，贻误终生。<br>每一个难点都是你的成长点，一定要搞明白，不搞明白，碰到的都是自己熟知的问题，处于游刃有余的自乐中，最终难免成为被温水煮的那只青蛙。反而，搞明白后收获的不仅仅是那一个难点的解决方案，除了这个难点的解决方案外，还收获了解决问题的一种途径，最重要的是：收获了自信与淡然。一次次的解决后，收获的那种处事不惊，那种任凭风浪起,稳坐钓鱼台的淡然，却是最为可贵。  </p><h2 id="三月概述"><a href="#三月概述" class="headerlink" title="三月概述"></a>三月概述</h2><p>人生就是这么起起落落，你永远不知道你今天卖掉的股票明天会不会涨。我一直坚定着一个信念：只要有了想卖的念头，便要坚持自己卖掉。因为相比于得到带来的欢愉，远远小于失去带来的痛苦。这不是你的，得之我幸则失之我命；是你的，想再次吐出来？这就很难受。</p><p>阅读计划：<br>《人生十二法则》<br>《怪诞行为学II》<br>《财务自由之路II》<br>有点惨，2月只把怪诞行为学I阅读完成了。  </p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>maven常用整理</title>
    <link href="/2021/01/07/2020-03-09-maven/"/>
    <url>/2021/01/07/2020-03-09-maven/</url>
    
    <content type="html"><![CDATA[<h2 id="mac系统删除本地仓库中所有的-lastUpdated"><a href="#mac系统删除本地仓库中所有的-lastUpdated" class="headerlink" title="mac系统删除本地仓库中所有的.lastUpdated"></a>mac系统删除本地仓库中所有的.lastUpdated</h2><pre><code>find ~/.m2/repository -name &quot;*.lastUpdated&quot; -exec grep -q &quot;Could not transfer&quot; &#123;&#125; \; -print -exec rm &#123;&#125; \;</code></pre><h2 id="阿里maven库"><a href="#阿里maven库" class="headerlink" title="阿里maven库"></a>阿里maven库</h2><p>mirrors节点下添加如下配置</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="exclusions：排除传递依赖"><a href="#exclusions：排除传递依赖" class="headerlink" title="exclusions：排除传递依赖"></a>exclusions：排除传递依赖</h2><p>   在mavenB项目中引入mavenA项目依赖，通过依赖传递，会将mavenA中的jar包传递进来,如果B中不需要A中的某个jar包就可以使用以下标签   </p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs erb"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span></span><br><span class="xml">   <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span></span><br><span class="xml">   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="maven依赖树查看"><a href="#maven依赖树查看" class="headerlink" title="maven依赖树查看"></a>maven依赖树查看</h2><p>mvn dependency:tree<br>如果要输出到文件，找到pom文件的位置 进入命令行<br>输入命令：<br>mvn dependency:tree &gt;/Users/raines/IdeaProjects/JavaPro/raines-learn/src/main/resources/tree.txt<br>只查看关系的jar包<br>mvn dependency:tree -Dverbose -Dincludes=groupId:artifactId:version:artifactId:version<br>输入命令：<br>mvn dependency:tree -Dverbose -Dincludes=org.springframework:spring-tx  </p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>RDD操作详解</title>
    <link href="/2021/01/07/2020-03-09-sparkRDD/"/>
    <url>/2021/01/07/2020-03-09-sparkRDD/</url>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>每日英语</title>
    <link href="/2021/01/07/2020-03-10-everydayEnglish/"/>
    <url>/2021/01/07/2020-03-10-everydayEnglish/</url>
    
    <content type="html"><![CDATA[<h3 id="单词"><a href="#单词" class="headerlink" title="单词"></a>单词</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">hard  [hɑːd]  adj.坚固的<span class="hljs-comment">;坚硬的;结实的;难做的;难懂的;难以回答的;困苦的;艰苦的;艰难的</span><br>      adv.努力地<span class="hljs-comment">;费力地;艰难地;猛力地;猛烈地;彻底认真地</span><br>realize  [ˈriːəlaɪz]  v.理解<span class="hljs-comment">;领会;认识到;意识到;实现;将…变为现实;(所担心的事)发生，产生</span><br>contribution  [ˌkɑːntrɪˈ<span class="hljs-keyword">bjuːʃn] </span> n.捐款<span class="hljs-comment">;捐资;(给雇主或政府用作医疗保险、养老金等津贴的)定期缴款;贡献;促成作用</span><br>worthy  [ˈwɜːði]  adj.值得(或应得)…的<span class="hljs-comment">;值得尊敬的;值得注意的;值得敬仰的;有价值的(但不太令人感兴趣或激动的)</span><br>                      n.要人<span class="hljs-comment">;大人物;知名人士</span><br>want  [wɒnt]  v.要<span class="hljs-comment">;想要;希望;需要;需要…在场</span><br>                n.需要的东西<span class="hljs-comment">;想望的东西;缺少;缺乏;不足;贫穷;贫困;匮乏</span><br><span class="hljs-keyword">being </span> [ˈ<span class="hljs-keyword">biːɪŋ] </span> n.存在<span class="hljs-comment">;生存;生物;思想感情;身心</span><br>                 are的现在分词<span class="hljs-comment">;be的现在分词</span><br></code></pre></td></tr></table></figure><h3 id="My-Dream"><a href="#My-Dream" class="headerlink" title="My Dream"></a>My Dream</h3><p>As a small girl, many teachers have asked me what do I want to be in the future.<br>My answer is always to be a teacher.<br>It is my dream and I study so hard to realize it.<br>Being a teacher can pass the knowledge to others and guide them to the right way.<br>Thinking about the great contribution I would make, everything is worthy.</p><p>我还是个小女孩，许多老师都问过我将来想要从事什么样的职业，<br>我的回答总是成为一名老师。<br>这是我的梦想，我也很努力学习去实现我的梦想。作为一名老师可以将知识传递给他人，引导他们走正确的道路。想到自己将做出的巨大贡献，一切都值得。</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>每日英语</title>
    <link href="/2021/01/07/2020-03-11-everydayEnglish/"/>
    <url>/2021/01/07/2020-03-11-everydayEnglish/</url>
    
    <content type="html"><![CDATA[<h3 id="单词"><a href="#单词" class="headerlink" title="单词"></a>单词</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">imagine</span>  <span class="hljs-selector-attr">[ɪˈmædʒɪn]</span>  <br>    <span class="hljs-selector-tag">vt</span>. 想象；猜想；臆断<br>    <span class="hljs-selector-tag">vi</span>. 想象；猜想；想象起来<br><span class="hljs-selector-tag">practical</span>  <span class="hljs-selector-attr">[ˈpræktɪkl]</span><br>    <span class="hljs-selector-tag">adj</span>. 实际的；实用性的<br><span class="hljs-selector-tag">popular</span>  <span class="hljs-selector-attr">[ˈpɒpjələ(r)]</span><br>    <span class="hljs-selector-tag">adj</span>. 流行的，通俗的；受欢迎的；大众的；普及的<br><span class="hljs-selector-tag">doubt</span>   <span class="hljs-selector-attr">[daʊt]</span><br>    <span class="hljs-selector-tag">n</span>. 怀疑；疑问；疑惑<br>    <span class="hljs-selector-tag">v</span>. 怀疑；不信；恐怕；拿不准<br><span class="hljs-selector-tag">former</span>   <span class="hljs-selector-attr">[ˈfɔːmə(r)]</span><br>    <span class="hljs-selector-tag">adj</span>. 从前的，前者的；前任的<br>    <span class="hljs-selector-tag">n</span>. 模型，样板；起形成作用的人<br>    <span class="hljs-selector-tag">n</span>. (Former)人名；(法)福尔梅；(德、捷)福尔默<br><span class="hljs-selector-tag">attention</span>  <span class="hljs-selector-attr">[əˈtenʃn]</span><br>    <span class="hljs-selector-tag">n</span>. 注意力；关心；立正！（口令）<br><span class="hljs-selector-tag">standard</span>  <span class="hljs-selector-attr">[ˈstændəd]</span><br>    <span class="hljs-selector-tag">n</span>. 标准；水准；旗；度量衡标准<br>    <span class="hljs-selector-tag">adj</span>. 标准的；合规格的；公认为优秀的<br>    <span class="hljs-selector-tag">n</span>. (Standard)人名；(英)斯坦达德；(德)施坦达德<br><span class="hljs-selector-tag">judge</span>   <span class="hljs-selector-attr">[dʒʌdʒ]</span><br>    <span class="hljs-selector-tag">n</span>. 法官；裁判员；鉴定人<br>    <span class="hljs-selector-tag">v</span>. 判断；猜测（大小、数量等）；裁判；评价；审判，判决<br>    <span class="hljs-selector-tag">n</span>. (Judge) （美、爱、英）贾奇（人名）<br><span class="hljs-selector-tag">market</span>  <span class="hljs-selector-attr">[ˈmɑːkɪt]</span><br>    <span class="hljs-selector-tag">n</span>. 市场；行情；股票市场；市面；集市；销路；商店<br>    <span class="hljs-selector-tag">vt</span>. 在市场上出售<br>    <span class="hljs-selector-tag">vi</span>. 做买卖<br>    <span class="hljs-selector-tag">n</span>. (Market)人名；(塞)马尔凯特<br><span class="hljs-selector-tag">latter</span>   <span class="hljs-selector-attr">[ˈlætə(r)]</span><br>    <span class="hljs-selector-tag">adj</span>. 后者的；近来的；后面的；较后的<br>    <span class="hljs-selector-tag">n</span>. (Latter)人名；(英、德、捷)拉特<br><span class="hljs-selector-tag">favored</span>   <span class="hljs-selector-attr">[feɪvəd]</span><br>    <span class="hljs-selector-tag">adj</span>. 有利的；受到优待的，受宠的；称心如意的；被推荐的；（运动员等）被看好的<br>    <span class="hljs-selector-tag">v</span>. 支持；对……有利；优惠；宠爱，偏袒；外貌像；悉心照料；帮助（<span class="hljs-selector-tag">favor</span> 的过去分词）<br><span class="hljs-selector-tag">employers</span>  <span class="hljs-selector-attr">[ɪm&#x27;plɔɪɚ]</span><br>    <span class="hljs-selector-tag">n</span>. <span class="hljs-selector-attr">[劳经]</span> 雇主（<span class="hljs-selector-tag">employer</span>的复数）<br><span class="hljs-selector-tag">profits</span>   <span class="hljs-selector-attr">[&#x27;prɑfɪt]</span><br>    <span class="hljs-selector-tag">n</span>. <span class="hljs-selector-attr">[会计]</span> 收益，红利；盈利（<span class="hljs-selector-tag">profit</span>的复数）<br><span class="hljs-selector-tag">talented</span>   <span class="hljs-selector-attr">[ˈtæləntɪd]</span><br>    <span class="hljs-selector-tag">adj</span>. 有才能的；多才的<br><span class="hljs-selector-tag">kids</span>   <span class="hljs-selector-attr">[kidz]</span><br>    <span class="hljs-selector-tag">n</span>. （非正式）小孩；（非正式）年轻人；小山羊，小山羊皮革；（尤指水手食堂盛格罗酒或配额食物用的）小木桶（<span class="hljs-selector-tag">kid</span> 的复数）<br>    <span class="hljs-selector-tag">v</span>. 拿……开玩笑；（善意地）取笑；（山羊）产羔；欺骗（<span class="hljs-selector-tag">kid</span> 的第三人称单数）<br><span class="hljs-selector-tag">measure</span>  <span class="hljs-selector-attr">[ˈmeʒə(r)]</span><br>    <span class="hljs-selector-tag">n</span>. 测量；措施；程度；尺寸<br>    <span class="hljs-selector-tag">vt</span>. 测量；估量；权衡<br>    <span class="hljs-selector-tag">vi</span>. 测量；估量<br></code></pre></td></tr></table></figure><h3 id="Score-and-Ability"><a href="#Score-and-Ability" class="headerlink" title="Score and Ability"></a>Score and Ability</h3><p>Imagine there are two students, one is good at getting high score in the exams and the other is good at many practical skills, so who will be popular?<br>In school, there is no doubt that teachers like the former person, because education pays attention to the exam, and score is always the standard to judge a student.<br>While in the job market, the latter is favored by the employers. They expect someone who has the practical skills and can make profits for the company. Score doesn’t mean ability.<br>In school, some talented kids will be ignored because of low score. They are easy to miss the chance of making differences.<br>So we can’t judge a person by score, which ability is also the important part to measure a person, even ability take over the score.  </p><p>想象有两个学生，一个善于在考试中获取高分，另一个则擅长很多实用技能，那么谁会受欢迎呢？<br>在学校，毫无疑问，教师喜欢前者，因为教育注重考试，而分数总是作为判断一个学生的标准。<br>在就业市场，后者则是会受到雇主青睐，他们想要那些有实用技能，可以使公司盈利的人。分数并不意味着能力。<br>在学校，一些有才华的孩子会因为分数低而被忽略，他们很容易错过机会。<br>所以我们不能通过分数来判断一个人，能力也是衡量一个人的重要部分，甚至能力比分数更重要。  </p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>每日英语</title>
    <link href="/2021/01/07/2020-03-12-everydayEnglish/"/>
    <url>/2021/01/07/2020-03-12-everydayEnglish/</url>
    
    <content type="html"><![CDATA[<h3 id="单词"><a href="#单词" class="headerlink" title="单词"></a>单词</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">paper</span>  <span class="hljs-selector-attr">[ˈpeɪpə(r)]</span><br>    <span class="hljs-selector-tag">n</span>. 纸；论文；文件；报纸<br>    <span class="hljs-selector-tag">adj</span>. 纸做的<br>    <span class="hljs-selector-tag">vt</span>. 用纸糊；用纸包装<br>    <span class="hljs-selector-tag">vi</span>. 贴糊墙纸；发交通违章传票<br>    <span class="hljs-selector-tag">n</span>. (Paper)人名；(俄)帕佩尔<br><span class="hljs-selector-tag">pressure</span>   <span class="hljs-selector-attr">[ˈpreʃə(r)]</span><br>    <span class="hljs-selector-tag">n</span>. 压力；压迫，<span class="hljs-selector-attr">[物]</span> 压强<br>    <span class="hljs-selector-tag">vt</span>. 迫使；密封；使……增压<br><span class="hljs-selector-tag">just</span>   <span class="hljs-selector-attr">[dʒʌst]</span><br>    <span class="hljs-selector-tag">adv</span>. 只是，仅仅；刚才，刚刚；正好，恰好；实在；刚要<br>    <span class="hljs-selector-tag">adj</span>. 公正的，合理的；正直的，正义的；正确的；公平的；应得的<br>    <span class="hljs-selector-tag">n</span>. (Just)人名；(英)贾斯特；(法)朱斯特；(德、匈、波、捷、挪)尤斯特；(西)胡斯特<br><span class="hljs-selector-tag">relax</span>   <span class="hljs-selector-attr">[rɪˈlæks]</span><br>    <span class="hljs-selector-tag">vi</span>. 放松，休息；松懈，松弛；变从容；休养<br>    <span class="hljs-selector-tag">vt</span>. 放松；使休息；使松弛；缓和；使松懈<br></code></pre></td></tr></table></figure><h3 id="How-to-Be-Happy"><a href="#How-to-Be-Happy" class="headerlink" title="How to Be Happy?"></a>How to Be Happy?</h3><p>When I do well in the exam, I will show my paper to my parents, they are so happy to see me do well in the exam.<br>I want to be happy all the time. But I have put so much pressure on myself.<br>One day, my parents tell me that they don’t care how I do well in the exam, they just want me to be happy.<br>I know I should relax myself and be happy.  </p><p>当我考试考得好的时候，我会给父母展示我的试卷，他们很开心看到我考得这么好。<br>我想要一快乐。但是我给予了自己太多的压力。<br>一天，我的父母告诉我他们不在意我考试考得有多好，他们只想要我快乐。<br>我知道自应该自我放松，保持快乐。</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>但行好事，莫问前程</title>
    <link href="/2021/01/07/2020-03-12-goodThing/"/>
    <url>/2021/01/07/2020-03-12-goodThing/</url>
    
    <content type="html"><![CDATA[<h2 id="但行好事-莫问前程"><a href="#但行好事-莫问前程" class="headerlink" title="但行好事 莫问前程"></a>但行好事 莫问前程</h2><h4 id="文：郭德纲"><a href="#文：郭德纲" class="headerlink" title="文：郭德纲"></a>文：郭德纲</h4><p>　　甲午年，正月初九。我儿子十八了，正所谓成人长大。学名奇临，取奇妙降临之意。后下海，艺名麒麟，乃仿周大师之遗韵。人生一世，极不容易。</p><p>　　登天难，求人更难。黄连苦，无钱更苦。江湖险，人心更险。春冰薄，人情更薄。过去有句话：既落江湖内，便是薄命人。我本不愿儿从艺，奈何人自有志，无法横拦。但有几句话，要说清楚。艺人分几类，相隔种种。一是普通艺人，有一技之长，凭能耐吃饭。一是名演员，知名度高，但不代表艺术高，此类要两说。一是角儿，何为角儿？舞台上的顶梁柱，剧团班社的灵魂。贴出你的名字要保证卖得出票，全团老少指着你吃饭。角儿是有责任的艺人。</p><p>　　郭麒麟刚十八，我不希望儿子大红。人红麻烦多，一大三大，名气大后，开销大压力大是非大。红起来容易，难的是接住自己。年三十吃顿饺子容易，之后呢？得天天吃饺子才行啊，可你有那么多的面和馅儿吗？所以，要多下功夫，并且要保持一个好心态。很多人不成功的原因主要是太尊重自己了。</p><p>　　一个人刚出道，不狂是没有出息的。但如果一直狂，是肯定没出息的。你眼中的你，和别人眼中的你，不是一回事。无限赞美自己，只是一种胆怯。我一直认为，恐惧到头就是愤怒。发挥无敌想象，给自己描绘了一个童话世界，白衣如雪来去如风。剑影刀光闪过后，你满脸冷酷地立于珠峰顶端，傲视苍生无比英武。此时我要问的是：孩子，你怎么下去？不让古人，是谓有志。不让今人，是谓无良。</p><p>　　有的演员，三级能耐，享受一级待遇，有艺术家的脾气，心里是大师的状态，结果看上去像个相声爱好者。至于艺术，一言难尽。记住了，小俗便雅，大雅则俗。有人夸你，别信。有人骂你，别听。周围人随意捧骂，不可与之交，因其无至性也。</p><p>　　另外，凡事要慎重。一入江湖深似海，从此节操是路人。此语虽玩笑，但话中话要三思。江湖子弟，拿得起来放得下。</p><p>　　身边人很重要。一根稻草，扔街上就是垃圾，捆上白菜就是白菜价，捆上大闸蟹就是闸蟹价。包括脚下的平台，也极重要。同样是一个人，步行一小时能走多远？骑车呢？开车呢？坐飞机呢？平台会决定你的速度，切记切记。</p><p>　　另外，钱财要珍惜，但不可看得太重。财乃天地至公之物，假手于人罢了，雨打残花风卷流云。轮番更转而已，穷转富，富转穷，哪有百世富家翁？</p><p>　　至于交友，吃点亏也无妨。记住，言语多反复，当防欺诈。忘恩思小过，定会反戈。开口说大义，临大难必变节。逢人称兄弟，即深交也平常。</p><p>　　人每所谓穷通寿夭为命所系，岂不知造物之报施，全视人之自取。芸芸众生富贵贫寒，不是谁都可以傲视乾坤。其中有命有运，要知因果懂善恶，我儿且记，但行好事，莫问前程。</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JVM相关</title>
    <link href="/2021/01/07/2020-03-12-jvmParameter/"/>
    <url>/2021/01/07/2020-03-12-jvmParameter/</url>
    
    <content type="html"><![CDATA[<h2 id="JVM相关"><a href="#JVM相关" class="headerlink" title="JVM相关"></a>JVM相关</h2><h3 id="打印GC相关的信息并分析"><a href="#打印GC相关的信息并分析" class="headerlink" title="打印GC相关的信息并分析"></a>打印GC相关的信息并分析</h3><p>JVM提供了大量命令行参数,打印信息,供调试使用.主要有以下一些:<br>java -verbose:gc hash  或  java -XX:+PrintGC hash<br>输出形式:<br>[GC 118250K-&gt;113543K(130112K), 0.0094143 secs]<br>[Full GC 121376K-&gt;10414K(130112K), 0.0650971 secs]  </p><p>-XX:+PrintGCDetails<br>输出形式:<br>[GC [DefNew: 8614K-&gt;781K(9088K), 0.0123035 secs] 118250K-&gt;113543K(130112K), 0.0124633 secs]<br>[GC [DefNew: 8614K-&gt;8614K(9088K), 0.0000665 secs][Tenured: 112761K-&gt;10414K(121024K), 0.0433488 secs] 121376K-&gt;10414K(130112K), 0.0436268 secs]  </p><p>以其中一行为例来解读下日志信息：<br>[GC (Allocation Failure) [ParNew: 367523K-&gt;1293K(410432K), 0.0023988 secs] 522739K-&gt;156516K(1322496K), 0.0025301 secs] [Times: user=0.04 sys=0.00, real=0.01 secs]  </p><ul><li>GC：<br>表明进行了一次垃圾回收，前面没有Full修饰，表明这是一次Minor GC ,注意它不表示只GC新生代，并且现有的不管是新生代还是老年代都会STW。  </li><li>Allocation Failure：<br>表明本次引起GC的原因是因为在年轻代中没有足够的空间能够存储新的数据了。   </li><li>ParNew：<br>表明本次GC发生在年轻代并且使用的是ParNew垃圾收集器。ParNew是一个Serial收集器的多线程版本，会使用多个CPU和线程完成垃圾收集工作（默认使用的线程数和CPU数相同，可以使用-XX：ParallelGCThreads参数限制）。该收集器采用复制算法回收内存，期间会停止其他工作线程，即Stop The World。  </li><li>367523K-&gt;1293K(410432K)：<br>单位是KB  </li></ul><p>三个参数分别为：GC前该内存区域(这里是年轻代)使用容量，GC后该内存区域使用容量，该内存区域总容量。  </p><ul><li>0.0023988 secs：<br>该内存区域GC耗时，单位是秒  </li><li>522739K-&gt;156516K(1322496K)：<br>三个参数分别为：堆区垃圾回收前的大小，堆区垃圾回收后的大小，堆区总大小。  </li><li>0.0025301 secs：<br>该内存区域GC耗时，单位是秒  </li><li>[Times: user=0.04 sys=0.00, real=0.01 secs]：<br>分别表示用户态耗时，内核态耗时和总耗时</li></ul><h4 id="分析下可以得出结论："><a href="#分析下可以得出结论：" class="headerlink" title="分析下可以得出结论："></a>分析下可以得出结论：</h4><p>该次GC新生代减少了367523-1293=366239K<br>Heap区总共减少了522739-156516=366223K<br>366239 – 366223 =16K，说明该次共有16K内存从年轻代移到了老年代，可以看出来数量并不多，说明都是生命周期短的对象，只是这种对象有很多。<br>我们需要的是尽量避免Full GC的发生，让对象尽可能的在年轻代就回收掉，所以这里可以稍微增加一点年轻代的大小，让那16K的数据也保存在年轻代中。  </p><h4 id="GC时，用什么方法判断哪些对象是需要回收："><a href="#GC时，用什么方法判断哪些对象是需要回收：" class="headerlink" title="GC时，用什么方法判断哪些对象是需要回收："></a>GC时，用什么方法判断哪些对象是需要回收：</h4><ol><li>引用计数法(已经不用了)<br>简而言之就是给对象添加一个引用计数器，有其他地方引用时这个计数器+1，引用失效时-1，为0时就可以删除掉了。但是它不能解决循环引用的问题，所以一般使用的都是后一种算法。  </li><li>可达性分析法<br>可达性分析法的基本思路就是通过一系列名为GC Roots的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链(Reference Chain)，当一个对象到GC Roots没有任何引用链相连时，则证明此对象是不可用的，那就可以回收掉了。<br>GC Roots一般都是些堆外指向堆内的引用，例如：<br>JVM栈中引用的对象<br>方法区中静态属性引用的对象<br>方法区中常量引用的对象<br>本地方法栈中引用的对象   </li></ol><p>参考链接：<a href="https://www.cnblogs.com/jpfss/p/8618297.html">https://www.cnblogs.com/jpfss/p/8618297.html</a>  </p><h3 id="java-xx参数介绍及调优总结"><a href="#java-xx参数介绍及调优总结" class="headerlink" title="java-xx参数介绍及调优总结"></a>java-xx参数介绍及调优总结</h3><p><a href="https://blog.csdn.net/weixin_39407066/article/details/84582380">https://blog.csdn.net/weixin_39407066/article/details/84582380</a></p><h3 id="实战-通过gc比较String-replace性能差异"><a href="#实战-通过gc比较String-replace性能差异" class="headerlink" title="实战:通过gc比较String.replace性能差异"></a>实战:通过gc比较String.replace性能差异</h3><ol><li>代码  <figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestStringReplace</span> &#123;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span> <span class="hljs-title">replace</span><span class="hljs-params">(<span class="hljs-keyword">String</span> src, <span class="hljs-keyword">String</span> pattern, <span class="hljs-keyword">String</span> replacement)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> i = src.indexOf(pattern);<br>        <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">int</span> ptnLen = pattern.length();<br>            StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder(src.length());<br>            sb.append(src, <span class="hljs-number">0</span>, i).append(replacement);<br>            i += ptnLen;<br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                <span class="hljs-keyword">int</span> j = src.indexOf(pattern, i);<br>                <span class="hljs-keyword">if</span> (j &gt;= <span class="hljs-number">0</span>) &#123;<br>                    sb.append(src, i, j).append(replacement);<br>                    i = j + ptnLen;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">return</span> sb.append(src, i, src.length()).toString();<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> src;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> LOOPS = <span class="hljs-number">100</span> * <span class="hljs-number">10000</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">String</span> SRC = <span class="hljs-string">&quot;asdfasdfassdd2edsdfasdfasdfasdfasdfasdfasdsdfasdfasdfasdfasdfasdfasdsdfasdfasdfasdfsd&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">String</span> PATTERN = <span class="hljs-string">&quot;sdf&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">String</span> REP = <span class="hljs-string">&quot;ijkk2eeew;&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br>        System.out.<span class="hljs-built_in">println</span>(replace(SRC, PATTERN, REP));<br>        System.out.<span class="hljs-built_in">println</span>(replace(SRC, PATTERN, REP).equals(SRC.replace(PATTERN, REP)));<br><br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;test replace1---------------------------------------&quot;</span>);<br>        timeit(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; LOOPS; i++) &#123;<br>                replace(SRC, PATTERN, REP);<br>            &#125;<br>        &#125;, <span class="hljs-number">6</span>);<br><br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;test string.replace-------------------------------------&quot;</span>);<br>        timeit(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; LOOPS; i++) &#123;<br>                SRC.replace(PATTERN, REP);<br>            &#125;<br>        &#125;, <span class="hljs-number">6</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">timeit</span><span class="hljs-params">(Runnable r, <span class="hljs-keyword">int</span> times)</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> total = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; times; i++) &#123;<br>            <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>            r.<span class="hljs-built_in">run</span>();<br>            <span class="hljs-keyword">long</span> <span class="hljs-built_in">end</span> = System.currentTimeMillis();<br>            total += <span class="hljs-built_in">end</span> - start;<br>            System.out.<span class="hljs-built_in">println</span>(<span class="hljs-built_in">end</span> - start);<br>        &#125;<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;AVG &quot;</span> + total / times);<br>    &#125;<br><br>&#125;<br>```  <br><span class="hljs-number">2.</span> 执行命令运行TestStringReplace  <br>time java -XX:+UseG1GC -Xmx4G -Xms4G -XX:+PrintGC TestStringReplace  <br></code></pre></td></tr></table></figure>true<br>test replace1—————————————<br>[GC pause (G1 Evacuation Pause) (young) 204M-&gt;608K(4096M), 0.0016481 secs]<br>[GC pause (G1 Evacuation Pause) (young) 236M-&gt;709K(4096M), 0.0017248 secs]<br>1333<br>[GC pause (G1 Evacuation Pause) (young) 2454M-&gt;750K(4096M), 0.0036411 secs]<br>1239<br>688<br>[GC pause (G1 Evacuation Pause) (young) 2454M-&gt;684K(4096M), 0.0019600 secs]<br>593<br>[GC pause (G1 Evacuation Pause) (young) 2454M-&gt;666K(4096M), 0.0023456 secs]<br>579<br>572<br>AVG 834<br>test string.replace————————————-<br>[GC pause (G1 Evacuation Pause) (young) 2454M-&gt;662K(4096M), 0.0020937 secs]<br>[GC pause (G1 Evacuation Pause) (young) 2454M-&gt;689K(4096M), 0.0025844 secs]<br>1857<br>[GC pause (G1 Evacuation Pause) (young) 2454M-&gt;729K(4096M), 0.0022971 secs]<br>1789<br>[GC pause (G1 Evacuation Pause) (young) 2454M-&gt;708K(4096M), 0.0021608 secs]<br>1792<br>[GC pause (G1 Evacuation Pause) (young) 2454M-&gt;710K(4096M), 0.0023275 secs]<br>1781<br>[GC pause (G1 Evacuation Pause) (young) 2454M-&gt;661K(4096M), 0.0022797 secs]<br>1809<br>[GC pause (G1 Evacuation Pause) (young) 2454M-&gt;662K(4096M), 0.0020625 secs]<br>[GC pause (G1 Evacuation Pause) (young) 2454M-&gt;778K(4096M), 0.0023225 secs]<br>1787<br>AVG 1802<br>java -XX:+UseG1GC -Xmx4G -Xms4G -XX:+PrintGC TestStringReplace  15.63s user 1.02s system 102% cpu 16.233 total<pre><code>总结：主要是节省了官方实现通过Regex这一步，虽然性能差距不大，但是这并非是对性能的吹毛求疵，而是一眼看过去的直觉就感觉不是很舒服。  </code></pre></li></ol>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>在一个领域达到顶尖水平是怎样的体验</title>
    <link href="/2021/01/07/2020-03-12-topExperience/"/>
    <url>/2021/01/07/2020-03-12-topExperience/</url>
    
    <content type="html"><![CDATA[<pre><code>原文转自微信公众号：高端技术圈，作者田志刚原文链接：http://mp.weixin.qq.com/s?__biz=MzU3NDAxMzU1Nw==&amp;mid=100000136&amp;idx=1&amp;sn=39f35a70d618ac6c762e1875a12e76a8&amp;chksm=7d39a8924a4e21849fb8806630d02cc477d84ea0e833897c14d0e83da094250d44b8bcfb829b&amp;mpshare=1&amp;scene=23&amp;srcid=0603iq8CsyY5PgTyicWJtSMY#rd</code></pre><h3 id="一"><a href="#一" class="headerlink" title="一"></a>一</h3><p>前些日子一篇文章披露了高晓松的身世：除了列举了高出身名门，爷爷奶奶爸爸妈妈外公外婆及各路亲朋好友都是各领域的专家外，连人家的邻居都是不得了的顶尖人物：</p><p>“小时候我遇到什么问题，家里人就写一张字条，说你去问谁谁谁。”这些谁谁谁，很多都是中国头把交椅。</p><p>“随便踹开一家的门，进去聊会天就很长知识，梁思成林徽因就住我家前面的院子。”</p><p>作为普通人，每个人都以认识牛人为荣，如果这个牛人还能是自己的朋友就自然倍感荣光。这种意识自古就有，在民国时许多人就爱将“我的朋友胡适之”挂在嘴边，现在人也常爱说“我跟XXX是北大EMBA的同学”之类的话。</p><p>实在跟牛人挂不上关系，就将自己的老家出过什么名人、牛人挂在嘴边，并以他们为傲。还有常见的方法是同姓的本家、同星座的高手等。</p><h3 id="二"><a href="#二" class="headerlink" title="二"></a>二</h3><p>之前，大部分文章是从一个人从入门到专家的角度去写。在之前文章里提到过，对于探索一个陌生领域的新手而言，最难的其实是如何真正搞清楚这个领域的全貌：包括什么、它们之间的关系是什么，是否能用简单的语言描述出来。</p><p>对于站在山脚下准备出发的人，其实是不知道山顶上有什么风景的。无论他有多么瑰丽的想象力，可能都很难想象出这个领域真实的样子。实际存在的一座山还是可见的，而对于一个领域或者专业的全貌这类思维层面的东西，则更加抽象与难以理解，如果你对不知道这个全貌的人去介绍，他甚至很难相信你。</p><p>而人们更容易相信的是他能把握的、感觉到的东西，类似于盲人摸象，摸到脚的就以为是脚的样子，如果你告诉他大象还有2个大的耳朵，他无法相信，因为他从来没见过，也就无从想象。</p><p>只有真正掌握了一个领域，才能做到简洁，才可以用简单的关键词或者语句概括这个领域。但在开始学习的时候，我们都是从纷繁复杂开始的，经过不断的抽象、提炼和实践校验，最后变成极简的方式。</p><p>当对一个事情真正理解并实践过以后，顶尖高手的表述更加通俗易懂，他们甚至可以不用名词概念术语即可说明复杂的问题、将这个领域概括出来。反过来，这个也可以用来鉴别那些是“半瓶醋”的人：满口术语、名词的，证明还没有真正掌握这个领域。</p><p>如果你觉得你所在的领域知识纷繁复杂、内容太多时，可能表明你还没有把这个领域真正做到系统化、结构化，没有以简驭繁，没有真正的掌握！</p><h3 id="三"><a href="#三" class="headerlink" title="三"></a>三</h3><p>在开始阶段，我们需要读大量的书，需要跟不同的人去交流互动，需要去解决复杂苦难的问题。</p><p>但当真正达到高手水平的时候，那是什么样的？</p><p>著名科学家、清华大学副校长施一公曾经在自己的博客中说过他导师的故事。</p><p>施一公的的博士后导师叫Nikola Pavletich，是结构生物学界的大牛，做出了这个领域许多里程碑式的成果。这样一位博学多才的高手，在他的学生心目中，应该是平常读很多文献、常常去听seminar然后积极跟同行交流的。</p><p>但施一公却发现，他的老师貌似很少读论文，甚至懒的跟诺贝尔奖的同行交流。</p><p>“96年春季的一天，我精读了一篇《自然》杂志上的文章，午饭前遇到Nikola（他的导师），向他描述这篇文章的精妙，同时期待着他的评述。Nikola面色有点尴尬地对我说：对不起，我还没看过这篇文章。</p><p>噢，也许这篇文章太新，他还没有来得及读。</p><p>过了几天，我因故阅读了一篇几个月前发表的《科学》杂志上的研究文章，又去找Nikola讨论，没想到他又说没看过。几次碰壁之后，我不解地问：你知识如此渊博，一定是广泛阅读了大量文献。你为什么恰好没有读我提到的这几篇论文呢？）</p><p>Nikola看着我说: 我阅读不广泛。<br>我反问： 如果你不广泛阅读，你的科研怎么会这么好？你怎么能在自己的论文里引用这么多文献？</p><p>Nikola的回答让我彻底意外：（大意）我只读与我的研究兴趣有直接关系的论文。并且只有在我写论文时才会大量阅读。”</p><p>这样的回答，令施一公震惊。更震惊的是他的导师甚至连跟诺贝尔奖的同行交流都会拒绝：</p><p>“有一次，一个诺贝尔奖得主来讲Institute seminar,并且点名要与Nikola交谈。在绝大多数人看来，这可是一个不可多得的好机会去接近大人物、取得好印象。</p><p>Nikola告诉他的秘书：请你替我转达我的歉意，seminar那天我恰好不在。我们也为Nikola遗憾。让我万万想不到的是，诺贝尔奖得主seminar的那天,Nikola把自己关在办公室里，早晨来了以后直到傍晚一直没有出门，当然也没有去听讲座。</p><p>当然，这也许是巧合 – Nikola取消了他的出行计划；但以我们对Nikola的了解，他十有八九是在写paper。后来，我们也意识到，这样的事情发生在Nikola身上已经见多不怪了。 ”</p><p>这样的行为让施一公不解，所以在他要离开导师的实验室时终于耐不住好奇去询问：</p><p>“在我离开Nikola实验室前，我带着始终没有完全解开的谜，问他：如果你不怎么读论文，又不怎么去听讲座，你怎么还能做一个如此出色的科学家？</p><p>他回答说：（大意）我的时间有限，每天只有10小时左右在实验室，权衡利弊之后，我只能把我的有限时间用在我认为最重要的事情上，如解析结构、分析结构、与学生讨论课题、写文章。如果没有足够的时间，我只能少读文章、少听讲座了。 ”</p><p>施一公进而想到：</p><p>“在博士生阶段，尤其是前两年，我认为必须花足够的时间去听各相关领域的学术讲座、并进行科研文献的广泛阅读，打好critical thinking的基础；但随着科研课题的深入，对于文献阅读和学术讲座就需要有一定的针对性，也要开始权衡时间的分配了。 ”</p><h3 id="四"><a href="#四" class="headerlink" title="四"></a>四</h3><p>施一公的故事里，除了是时间管理的问题外，更核心的是当一个人在某个领域积累的知识和经验足够的时候，当你真正下过大工夫以后，在你的这个领域内前人有那些积累、有那些高手在研究什么专注什么优缺点是什么，这个时候你是已经了然于胸的。</p><p>在这个时候，许多人没必要去见，许多书其实也没必要读！在现在的环境下，如果你想了解一个人干过什么、正在干什么，不一定要去见人而只需要看他分享的东西也就差不多了。而任何一个领域的知识有所进步，都是一个艰难的过程，每次的进步一定是很小很小的积累起来的，所以大部分书其实不过是颠来倒去讲那些成熟的道理而已。</p><p>这也是为什么许多人说一天可以读一本书，甚至几本书的原因，如果这个领域的东西他都掌握了并实践过，大部分书他可能只需要找一下自己不熟悉、或者有新说法的地方看两眼就够了！</p><p>在我学习知识管理的过程中，曾经有过一个遍历的阶段：在那个阶段将大部分的书都买了，搜索引擎的网页前一百页、论文库里这个领域的大部分论文（国内和国外的）、各种各样的案例等。在这个过程的初始阶段，总会看到一些自己不理解的东西，知道这是自己所欠缺的，然后想办法补上。</p><p>但走到后来，发现大部分内容其实不用全看，因为只要看看目录和摘要就知道他想讲什么、这个人是真正做过还是炮制出来胡说八道的。曾有段时间去找新加坡、日本、马拉西亚、印度等国家的知识管理情况去了解，去百度知道上回答关于知识管理五花八门的问题。</p><p>当经过这样的阶段后，又在具体干活中去验证、总结和提炼，就发现其实在这个领域没有什么新书可读，也很少人可以去真正的交流。许多题目取得很唬人，但内容不过是噱头甚至是自己多年前已经思考过的问题。</p><p>当然这个过程是要有几个反复，一段时间觉得自己懂了，但可能后来又发现还是有许多盲点，那就继续去查漏补缺！</p><h3 id="五"><a href="#五" class="headerlink" title="五"></a>五</h3><p>哲学家梁漱溟1928年在广州中山大学哲学系的一次演讲中曾经提到过思维的八个层次，其中第七层是“一览众山小”：</p><p>“学问里面的甘苦都尝过了，再看旁人的见解主张，其中得失长短都能够看出来。这个浅薄，那个到家，这个是什么分数，那个是什么程度，都知道得很清楚；因为自己从前也是这样，一切深浅精粗的层次都曾经过。”</p><p>大致就是这样一种状态，当你真正的掌握了一个领域，你其实是有感觉的，因为你能看到别人的优劣短长，各种说法的对错、可借鉴和可抛弃的地方在那里。</p><p>每个人在开始的时候都是要去学习别人的知识，这个别人包括人类历史上你这个领域内的先贤大德，他们的经验和教训通过语言和文字流传下来；也包括同代的先行者们，他们通过实践、思考总结提炼了更多内容，你都有必要去学习、借鉴、应用。</p><p>大部分人穷其一生都是在借鉴别人的内容，而顶尖高手则除了借鉴外，还能为人类你这个领域生产出一些知识。当你对所在领域的内容都真正掌握的时候，你其实是可以感觉得到，因为在你的前面已经没有人了。这个时候你需要去创造知识。</p><p>类似于美国对于博士学位的要求，那怕是最细微的点上，你要能为人类增加一些新知识。而这有个前提，是你要知道人类在你这个领域有哪些知识，否则你所谓的创造可能就是“重复制造轮子”，自欺欺人罢了！</p><p>在哪些人是真正的专家？里面我将成为专家分为五个阶段：探索、新手、胜任、高手和专家，在高手阶段基本上你已经搞清楚了这个领域的大部分内容，这样在专家阶段你的核心任务是创造新的知识出来，从而指导更复杂的实践，这才是专家的核心竞争优势</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Base64介绍</title>
    <link href="/2021/01/07/2020-03-13-base64Introduce/"/>
    <url>/2021/01/07/2020-03-13-base64Introduce/</url>
    
    <content type="html"><![CDATA[<h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><h3 id="ASCII编码"><a href="#ASCII编码" class="headerlink" title="ASCII编码"></a>ASCII编码</h3><p>ASCII编码，从A-Z、a-z、0-9和一些其他的特殊字符，这些字符都有唯一的一个数字来表示。比如说a是97，A是65。</p><h2 id="Base是什么"><a href="#Base是什么" class="headerlink" title="Base是什么"></a>Base是什么</h2><p>Base64是一种用64个字符来表示任意二进制数据的方法。</p><h2 id="Base64原理"><a href="#Base64原理" class="headerlink" title="Base64原理"></a>Base64原理</h2><h3 id="Base64编码"><a href="#Base64编码" class="headerlink" title="Base64编码"></a>Base64编码</h3><p>Base64编码，范围是”A-Z“、”a-z“、”0-9“、”+“、”/“一共64个字符（0-63）。这个比ASCII编码要简单多了，只有64个。</p><h3 id="Base64基本原理"><a href="#Base64基本原理" class="headerlink" title="Base64基本原理"></a>Base64基本原理</h3><p>首先，准备一个包含64个字符的数组： </p><pre><code>[&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, ... &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, ... &#39;0&#39;, &#39;1&#39;, ... &#39;+&#39;, &#39;/&#39;]</code></pre><p>然后，对二进制数据进行处理，每3个字节一组，一共是3x8=24bit，划为4组，每组正好6个bit：<br>这样我们得到4个数字作为索引，然后查表，获得相应的4个字符，就是编码后的字符串。<br>所以，Base64编码会把3字节的二进制数据编码为4字节的文本数据，长度增加33%，好处是编码后的文本数据可以在邮件正文、网页等直接显示。<br>如果要编码的二进制数据不是3的倍数，最后会剩下1个或2个字节怎么办？Base64用\x00字节在末尾补足后，再在编码的末尾加上1个或2个=号，表示补了多少字节，解码的时候，会自动去掉。  </p><h3 id="实战：ASCII编码转Base64"><a href="#实战：ASCII编码转Base64" class="headerlink" title="实战：ASCII编码转Base64"></a>实战：ASCII编码转Base64</h3><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>比如说有一封邮件，我们想要对其使用Base64进行编码。怎么办呢？基本步骤如下：<br>（1）对邮件的数据进行切分，每三个字节一组，一共24个bit。<br>（2）对切分后的数据重组，24个bit重组为4组，每组6个bit。<br>（3）对重组后的数据处理，每组最前面添加两个“0”，构成每组8个bit。此时一共32个bit。<br>（4）根据Base64编码表，获取相应的编码值。<br>此时一封完整的邮件，被切分重组处理之后就变成了Base64编码了。  </p><h4 id="实例验证"><a href="#实例验证" class="headerlink" title="实例验证"></a>实例验证</h4><p>比如说电子邮件里面出现了三个字母sky。我们要对这个三个字符使用Base64进行编码。<br>（1）对邮件的数据进行切分，每三个字节一组，一共24个bit  </p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">数据          s            k       y<br>ASCII编码    <span class="hljs-number"> 115 </span>       <span class="hljs-number"> 107 </span>    121<br>二进制       <span class="hljs-number"> 01110011 </span><span class="hljs-number"> 01101011 </span> 01111001<br></code></pre></td></tr></table></figure><p>（2）对切分后的数据重组，24个bit重组为4组，每组6个bit<br>原二进制</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">01110011 </span> <span class="hljs-number">01101011</span>  <span class="hljs-number">01111001</span><br></code></pre></td></tr></table></figure><p>转换后（将三组切分为4组）</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">011100 </span> <span class="hljs-number">110110</span>  <span class="hljs-number">101101</span>  <span class="hljs-number">111001</span><br></code></pre></td></tr></table></figure><p>（3）对重组后的数据处理，每组最前面添加两个“0”，构成每组8个bit。由于在最前面添加的0，所以对数值不构成影响。<br>（4）根据Base64编码表，获取相应的编码值。<br>转换后二进制  </p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">011100 </span> <span class="hljs-number">110110</span>  <span class="hljs-number">101101</span>  <span class="hljs-number">111001</span><br></code></pre></td></tr></table></figure><p>相应的编码值(二进制转十进制）  </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span> <span class="hljs-number">16</span> <span class="hljs-number">8</span> <span class="hljs-number">4</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> ; <span class="hljs-number">32</span> <span class="hljs-number">16</span> <span class="hljs-number">0</span> <span class="hljs-number">4</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> ; <span class="hljs-number">32</span> <span class="hljs-number">0</span> <span class="hljs-number">8</span> <span class="hljs-number">4</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> ; <span class="hljs-number">32</span> <span class="hljs-number">16</span> <span class="hljs-number">8</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <br>    <span class="hljs-attribute">28</span>              <span class="hljs-number">54</span>               <span class="hljs-number">45</span>              <span class="hljs-number">57</span><br></code></pre></td></tr></table></figure><p>（5）完成编码的转换<br>根据相应编码值对照Base64编码表</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">28</span>              <span class="hljs-number">54</span>               <span class="hljs-number">45</span>              <span class="hljs-number">57</span><br><span class="hljs-attribute">c</span>               <span class="hljs-number">2</span>                t               <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>到这我们基本上就是实现了Base64编码机制从sky到c2t5的转换。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>（1）在第三步中，最前面添加了两个0，所以最终编码之后要比之前多出三分之一的大小。<br>（2）上面的例子中，我们使用的是ASCII编码，但是如果我们使用UTF-8，对应Base64编码的结果是不一样的。<br>（3）Base64只是进行了编码，方便数据的传输而已。Base64具有不可读性，即所编码的数据不会被人用肉眼所直接看到。这可不是加密。  </p><h3 id="Java代码实现-java的base64与byte-字节数组之间的相互转换"><a href="#Java代码实现-java的base64与byte-字节数组之间的相互转换" class="headerlink" title="Java代码实现(java的base64与byte[]字节数组之间的相互转换)"></a>Java代码实现(java的base64与byte[]字节数组之间的相互转换)</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">import</span> sun.misc.BASE64Decoder;<br><span class="hljs-keyword">import</span> sun.misc.BASE64Encoder;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base64_ByteTest</span> &#123;</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span> args[])</span> throws IOException </span>&#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 编码</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">// 定义一个BASE64Encoder</span><br>        BASE64Encoder encode = <span class="hljs-keyword">new</span> BASE64Encoder();<br>        <span class="hljs-comment">// 将byte[]转换为base64</span><br>        <span class="hljs-keyword">String</span> base64 = encode.encode(<span class="hljs-string">&quot;五笔字型电子计算机&quot;</span>.getBytes());<br>        <span class="hljs-comment">// 输出base64</span><br>        System.out.<span class="hljs-built_in">println</span>(base64);<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 解码</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">// 新建一个BASE64Decoder</span><br>        BASE64Decoder decode = <span class="hljs-keyword">new</span> BASE64Decoder();<br>        <span class="hljs-comment">// 将base64转换为byte[]</span><br>        <span class="hljs-keyword">byte</span>[] b = decode.decodeBuffer(base64);<br>        <span class="hljs-comment">// 输出转换后的byte[]</span><br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span>(b));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>每日英语</title>
    <link href="/2021/01/07/2020-03-13-everydayEnglish/"/>
    <url>/2021/01/07/2020-03-13-everydayEnglish/</url>
    
    <content type="html"><![CDATA[<h3 id="单词"><a href="#单词" class="headerlink" title="单词"></a>单词</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">broken</span>   <span class="hljs-selector-attr">[ˈbrəʊkən]</span><br>    <span class="hljs-selector-tag">adj</span>. 破碎的；坏掉的<br>    <span class="hljs-selector-tag">v</span>. 折断；打碎；损坏（<span class="hljs-selector-tag">break</span>的过去分词）<br><span class="hljs-selector-tag">naughty</span>  <span class="hljs-selector-attr">[ˈnɔːti]</span><br>    <span class="hljs-selector-tag">adj</span>. 顽皮的，淘气的；不听话的；没规矩的；不适当的；下流的<br><span class="hljs-selector-tag">forget</span>  <span class="hljs-selector-attr">[fəˈɡet]</span><br>    <span class="hljs-selector-tag">vt</span>. 忘记；忽略<br>    <span class="hljs-selector-tag">vi</span>. 忘记<br><span class="hljs-selector-tag">promise</span>  <span class="hljs-selector-attr">[ˈprɒmɪs]</span><br>    <span class="hljs-selector-tag">n</span>. 许诺，允诺；希望<br>    <span class="hljs-selector-tag">vt</span>. 允诺，许诺；给人以…的指望或希望<br>    <span class="hljs-selector-tag">vi</span>. 许诺；有指望，有前途<br></code></pre></td></tr></table></figure><h3 id="Heart-broken"><a href="#Heart-broken" class="headerlink" title="Heart-broken"></a>Heart-broken</h3><p>As a child, I am very naughty and forget about what my mother tells me.<br>One time, I go back home very late. When I see my mother, she smiles at first and then turns angry, because she has told me before if I go home late, I must tell her in advance.<br>I let my mother heart-broken. I feel sorry and promise it won’t happen again.  </p><p>小时候，我很顽皮，忘记了妈妈交代过的事情。<br>有一次，我回家很晚，当我看到妈妈时，她先是微笑，然后马上就生气了，因为她以前告诉我，如果我回家晚了，就必须提前告诉她。<br>我让妈妈心碎了，我感到非常抱歉，并承诺不会再发生这种事了。</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>IDEA报错解决方案</title>
    <link href="/2021/01/07/2020-03-14-ideaError/"/>
    <url>/2021/01/07/2020-03-14-ideaError/</url>
    
    <content type="html"><![CDATA[<h2 id="Error-java-Compilation-failed-internal-java-compiler-error"><a href="#Error-java-Compilation-failed-internal-java-compiler-error" class="headerlink" title="Error:java: Compilation failed: internal java compiler error"></a>Error:java: Compilation failed: internal java compiler error</h2><p>解决办法很简单：File–&gt;Setting…–&gt;Build,Execution,Deployment–&gt;Compiler–&gt;Java Compiler 设置相应Module的target bytecode version的合适版本（跟你jkd版本一致），这里我改成1.8版本的。<br>这个错误很无趣，默认导入新项目时编译检查为JDK5特性  </p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>红黑树</title>
    <link href="/2021/01/07/2020-03-14-redBlackTree/"/>
    <url>/2021/01/07/2020-03-14-redBlackTree/</url>
    
    <content type="html"><![CDATA[<h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><p><a href="https://www.jianshu.com/p/3958a1a11cb0">https://www.jianshu.com/p/3958a1a11cb0</a></p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java自定义注解</title>
    <link href="/2021/01/07/2020-03-16-annotation/"/>
    <url>/2021/01/07/2020-03-16-annotation/</url>
    
    <content type="html"><![CDATA[<h2 id="Java自定义注解理论"><a href="#Java自定义注解理论" class="headerlink" title="Java自定义注解理论"></a>Java自定义注解理论</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>注解相当于一种标记，在程序中加了注解就等于为程序打上了某种标记，没加，则等于没有某种标记，以后，javac编译器，开发工具和其他程序可以用反射来了解你的类及各种元素上有无何种标记，看你有什么标记，就去干相应的事。标记可以加在包，类，字段，方法，方法的参数以及局部变量上。  </p><h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><p>Java中提供了四种元注解，专门负责注解其他的注解，分别如下:    </p><ul><li>@Retention元注解，表示需要在什么级别保存该注释信息（生命周期）。可选的RetentionPoicy参数包括：<br>RetentionPolicy.SOURCE: 停留在java源文件，编译器被丢掉<br>RetentionPolicy.CLASS：停留在class文件中，但会被VM丢弃（默认）<br>RetentionPolicy.RUNTIME：内存中的字节码，VM将在运行时也保留注解，因此可以通过反射机制读取注解的信息   </li><li>@Target元注解，默认值为任何元素，表示该注解用于什么地方。可用的ElementType参数包括<br>ElementType.CONSTRUCTOR: 构造器声明<br>ElementType.FIELD: 成员变量、对象、属性（包括enum实例）<br>ElementType.LOCAL_VARIABLE: 局部变量声明<br>ElementType.METHOD: 方法声明<br>ElementType.PACKAGE: 包声明<br>ElementType.PARAMETER: 参数声明<br>ElementType.TYPE: 类、接口（包括注解类型)或enum声明   </li><li>@Documented注解将注解包含在JavaDoc中   </li><li>@Inheried注解允许子类继承父类中的注解   </li></ul><h3 id="注解种类"><a href="#注解种类" class="headerlink" title="注解种类"></a>注解种类</h3><p>java的自定义注解可以分为三类：没有任何元素的注解，有一个元素的注解和有多个元素的注解。  </p><ol><li>Marker注解<br>这类注解没有任何元素，此类注解仅仅是一个标示。  </li><li>单值注解<br>只接受单值类型，数据成员使用单词value指定。指定成员的语法与声明方法类似。<br>但是如果数据成员不使用value定义，新定义如下所示：  </li></ol><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> @<span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Good</span></span>&#123;<br>   <span class="hljs-keyword">String</span> description();<br>&#125;<br></code></pre></td></tr></table></figure><p>现在，需要使用下面的注解方式</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Good(description=<span class="hljs-meta-string">&quot;this good&quot;</span>)</span><br></code></pre></td></tr></table></figure><p>注意：数据成员使用默认名称value时候，我们只指定了目标字符串，而省略了成员名称，这次我们需要显示拼写出数据成员的名称description，如果不这么做，编译器将会在编译过程中产生错误。<br>3. 多值注解   </p><h3 id="设置默认值"><a href="#设置默认值" class="headerlink" title="设置默认值"></a>设置默认值</h3><p>java允许为任何数据成员指定默认值，这可以使用default关键字来完成。<br>当使用默认值注解的时候，target成员可以不指定，除非想为target设置不同的值。  </p><h3 id="注解的定义规则"><a href="#注解的定义规则" class="headerlink" title="注解的定义规则"></a>注解的定义规则</h3><p>定义一个注解还是很简单的，需要遵照以下几个规则就可以了：<br>（1）注解声明以@interface开设，随后是注解的名称。<br>（2）为了创建注解的参数，需要使用参数的类型声明方法：<br>方法声明不应包含任何参数；<br>方法声明不应包含任何throws子句；<br>方法的返回类型应该为：基本类型，字符串，类，枚举，上述类型的数组。  </p><h2 id="Java自定义注解实战"><a href="#Java自定义注解实战" class="headerlink" title="Java自定义注解实战"></a>Java自定义注解实战</h2><h3 id="利用java反射和java自定义注解验证数据的完整性"><a href="#利用java反射和java自定义注解验证数据的完整性" class="headerlink" title="利用java反射和java自定义注解验证数据的完整性"></a>利用java反射和java自定义注解验证数据的完整性</h3><p>JDK1.5及以后版本引入的java自定义注解，可以应用到反射中，比如自己写个小框架。如实现实体类某些属性不自动赋值，或者验证某个对象属性完整性等，下面具体说说使用注解对实体数据进行非空校验的过程。  </p><ol><li>首先自定义非空注解NotEmpty    </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><br><span class="hljs-meta">@Target(ElementType.FIELD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> NotEmpty &#123;<br>&#125;<br>```  <br><span class="hljs-number">2.</span> 其次定义一个实体类Person，并在部分属性上面加上注解<span class="hljs-meta">@NotEmpty</span>    <br><br></code></pre></td></tr></table></figure><p>public class Person {<br>    @NotEmpty<br>    private Integer id;<br>    @NotEmpty<br>    private int age;<br>    @NotEmpty<br>    private String name;<br>    @NotEmpty<br>    private String sex;<br>    private String address;</p><pre><code>public Integer getId() &#123;    return id;&#125;public void setId(Integer id) &#123;    this.id = id;&#125;public int getAge() &#123;    return age;&#125;public void setAge(int age) &#123;    this.age = age;&#125;public String getName() &#123;    return name;&#125;public void setName(String name) &#123;    this.name = name;&#125;public String getSex() &#123;    return sex;&#125;public void setSex(String sex) &#123;    this.sex = sex;&#125;public String getAddress() &#123;    return address;&#125;public void setAddress(String address) &#123;    this.address = address;&#125;</code></pre><p>}</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">3.</span> 编写测试类Main  <br><br></code></pre></td></tr></table></figure><p>import java.lang.reflect.Field;</p><p>/**</p><ul><li><p>测试类</p></li><li><p>/<br>public class Main {<br>  public static void main(String[] args) {</p><pre><code>  try &#123;      Person person = new Person();      person.setId(1);      person.setAge(50);      person.setName(&quot;张三&quot;);      person.setAddress(&quot;北京&quot;);</code></pre><p>//            person.setSex(“male”);</p><pre><code>      validateParam(person);  &#125; catch (Exception e) &#123;      e.printStackTrace();  &#125;</code></pre><p>  }</p><p>  /**</p><ul><li><p>验证数据完整性</p></li><li></li><li><p>@param person</p></li><li><p>@throws Exception</p></li><li><p>/<br>public static void validateParam(Person person) throws Exception{<br>  Class<?> personClass = (Class<?>)person.getClass();<br>  //获取该类所有属性<br>  Field[] field = personClass.getDeclaredFields();</p><p>  for (int i = 0; i &lt; field.length; i++) {</p><pre><code>  Field f= field[i];  f.setAccessible(true);</code></pre><p>//            System.out.println(f.isAnnotationPresent(NotEmpty.class)+”;”+f.getName());</p><pre><code>  if (f.getAnnotation(NotEmpty.class)!= null) &#123;      //获取属性值      Object attrValue=f.get(person);      if(attrValue==null||attrValue.toString().trim().equals(&quot;&quot;))&#123;</code></pre><p>//                    throw new RuntimeException(f.getName()+”属性值不能为空”);</p><pre><code>          System.out.println(f.getName()+&quot;属性值不能为空&quot;);      &#125;      continue;  &#125;</code></pre><p>  }<br>}<br>}</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>### 类使用多值注解并获取属性  <br><span class="hljs-number">1.</span> 首先写一个自定义注解@MyAnnotation   <br><br></code></pre></td></tr></table></figure><p>import java.lang.annotation.ElementType;<br>import java.lang.annotation.Retention;<br>import java.lang.annotation.RetentionPolicy;<br>import java.lang.annotation.Target;</p></li></ul></li></ul><p>@Retention(RetentionPolicy.RUNTIME)<br>@Target({ ElementType.METHOD, ElementType.TYPE })<br>public @interface MyAnnotation {<br>    // 为注解添加属性<br>    String color();</p><pre><code>String value() default &quot;我是XXX&quot;; // 为属性提供默认值int[] array() default &#123; 1, 2, 3 &#125;;Gender gender() default Gender.MAN; // 添加一个枚举// 添加枚举属性MetaAnnotation metaAnnotation() default @MetaAnnotation(birthday = &quot;我的出生日期为1995-8-8&quot;);</code></pre><p>}</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">2.</span> 写一个枚举类Gender，模拟注解中添加枚举属性  <br><br></code></pre></td></tr></table></figure><p>public enum Gender {<br>    MAN {<br>        public String getName() {<br>            return “男”;<br>        }<br>    },<br>    WOMEN {<br>        public String getName() {<br>            return “女”;<br>        }<br>    }; // 后面记得有“;”<br>    public abstract String getName();<br>}</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">3.</span> 写一个注解类MetaAnnotation，模拟注解中添加注解属性    <br><br></code></pre></td></tr></table></figure><p>public @interface MetaAnnotation {<br>    String birthday();<br>}</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">4.</span> 最后写注解测试类AnnotationTest  <br><br></code></pre></td></tr></table></figure><p>//调用注解并赋值<br>@MyAnnotation(metaAnnotation = @MetaAnnotation(birthday = “我的出生日期为1995-8-88”), color = “red”, array = {23, 26})<br>public class AnnotationTest {<br>    public static void main(String[] args) {<br>        // 检查类AnnotationTest是否含有@MyAnnotation注解<br>        if (AnnotationTest.class.isAnnotationPresent(MyAnnotation.class)) {<br>            // 若存在就获取注解<br>            MyAnnotation annotation = (MyAnnotation) AnnotationTest.class.getAnnotation(MyAnnotation.class);<br>            System.out.println(annotation);<br>            // 获取注解属性<br>            System.out.println(annotation.color());<br>            System.out.println(annotation.value());<br>            // 数组<br>            int[] arrs = annotation.array();<br>            for (int arr : arrs) {<br>                System.out.println(arr);<br>            }<br>            // 枚举<br>            Gender gender = annotation.gender();<br>            System.out.println(“性别为：” + gender);<br>            // 获取注解属性<br>            MetaAnnotation meta = annotation.metaAnnotation();<br>            System.out.println(meta.birthday());<br>        }<br>    }<br>}</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>## Java8可重复注解的理解与应用<br><br>### 参考：  <br>基于 隔叶黄莺 的博文修改，重新实现代码  <br>https:<span class="hljs-comment">//yanbin.blog/java8-repeatable-annotations/</span><br><br><br>### 可重复注解实战<br><span class="hljs-number">1.</span> 定义 @Log 的容器注解 @Logs   <br><br></code></pre></td></tr></table></figure><p>import java.lang.annotation.*;</p><p>@Retention(RetentionPolicy.RUNTIME)//注解会在class中存在，运行时可通过反射获取<br>@Documented//文档生成时，该注解将被包含在javadoc中，可去掉<br>@Target(ElementType.METHOD)//目标是方法<br>public @interface Logs {<br>    Log[] value();<br>}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-number">2.</span> <span class="hljs-meta">@Repeatable</span> 是 Java8 开始提供的，现在由它来告诉 Java <span class="hljs-meta">@Logs</span> 是 <span class="hljs-meta">@Log</span> 的容器注解，不需要用嵌套的方式来使用它们了，可以在一个类型重复使用同一个注解。   <br><br></code></pre></td></tr></table></figure><p>@Retention(RetentionPolicy.RUNTIME)//注解会在class中存在，运行时可通过反射获取<br>@Target(ElementType.METHOD)//目标是方法<br>@Documented//文档生成时，该注解将被包含在javadoc中，可去掉<br>@Repeatable(Logs.class)//这行建立了@Log和@Logs的关系<br>public @interface Log {</p><pre><code>String value() default &quot;&quot;;/** * 模块名字 */String modelName() default &quot;&quot;;/** * 操作类型 */String option() default &quot;&quot;;</code></pre><p>}</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><br><span class="hljs-number">3.</span> 反射获得注解内容   <br>Java8 为了避免在使用重复注解时的编码与反射时的尴尬，引入了一个新的反射注解的 API get<span class="hljs-constructor">AnnotationByType(Class&lt;A&gt; <span class="hljs-params">annotationClass</span>)</span>, 该 API 的参数可接受 <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Log</span>.</span></span><span class="hljs-keyword">class</span>, 并且返回一个 @Log 的数组。   <br>&lt;span style=<span class="hljs-string">&quot;color: red&quot;</span>&gt;*&lt;/span&gt; 解释 <span class="hljs-keyword">method</span>.get<span class="hljs-constructor">AnnotationsByType(Log.<span class="hljs-params">class</span>)</span> 的执行过程:  <br>如果能找到 @Repeatable 关联的容器注解类 @Logs, 就获得 @Logs 的所有 value(类型为 @Log) 值组成的数组；  <br>如果未有关联的容器注解类，则返回 @Log 本身组成的数组(只有一个元素), 此时和 <span class="hljs-keyword">method</span>.get<span class="hljs-constructor">Annotation(Log.<span class="hljs-params">class</span>)</span> 是一样的。  <br>因此，在 Java <span class="hljs-number">8</span> 中对于可重复注解应该调用 get<span class="hljs-constructor">AnnotationsByType(Class&lt;A&gt; <span class="hljs-params">annotationClass</span>)</span> 来反射得到，如果是不可重复注解建议还是调用原来的 get<span class="hljs-constructor">Annotation(Class&lt;A&gt; <span class="hljs-params">annotationClass</span>)</span>, 因为没必要使用 get<span class="hljs-constructor">AnnotationsByType(Class&lt;A&gt; <span class="hljs-params">annotationClass</span>)</span> 获得一个空的或 <span class="hljs-number">1</span> 个元素的数组。  <br><br>最终 Java <span class="hljs-number">8</span> 推荐我们反射重复注解的途径就是下面那样:  <br><br></code></pre></td></tr></table></figure><p>import java.lang.reflect.Method;</p><p>public class RepeatTest {</p><pre><code>@Log(modelName = &quot;demo&quot;, option = &quot;test&quot;, value = &quot;ds&quot;)@Log(modelName = &quot;demo2&quot;, option = &quot;test&quot;, value = &quot;ds&quot;)private static boolean demo() &#123;    System.out.println(&quot;demo Method.&quot;);    return true;&#125;public static void main(String[] args) &#123;    RepeatTest repeatTest = new RepeatTest();    Class&lt;?&gt; repeatTestClass = (Class&lt;?&gt;) repeatTest.getClass();    //获取该类所有属性    Method[] methods = repeatTestClass.getDeclaredMethods();    for (int i = 0; i &lt; methods.length; i++) &#123;        Method method = methods[i];        Log[] logs = method.getAnnotationsByType(Log.class);        for (Log log : logs)&#123;            if (log == null) continue;            System.out.println(log.modelName());        &#125;    &#125;&#125;</code></pre><p>}</p><pre><code>#### 注意实际上在字节码中 Java8 前后对重复注解的内部实现也确实是一样的，@Repeatable 就是个语法糖而已。</code></pre>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>每日英语</title>
    <link href="/2021/01/07/2020-03-16-everydayEnglish/"/>
    <url>/2021/01/07/2020-03-16-everydayEnglish/</url>
    
    <content type="html"><![CDATA[<h3 id="单词"><a href="#单词" class="headerlink" title="单词"></a>单词</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">patient</span>  <span class="hljs-selector-attr">[ˈpeɪʃnt]</span><br>    <span class="hljs-selector-tag">adj</span>. 有耐心的，能容忍的<br>    <span class="hljs-selector-tag">n</span>. 病人，患者；受动者，承受者<br>    <span class="hljs-selector-tag">n</span>. (Patient) （美、英、法、加）帕蒂安（人名）<br><span class="hljs-selector-tag">online</span>   <span class="hljs-selector-attr">[ˌɒnˈlaɪn]</span><br>    <span class="hljs-selector-tag">adj</span>. 联机的；在线的<br>    <span class="hljs-selector-tag">adv</span>. 在线地<br><span class="hljs-selector-tag">enjoy</span>   <span class="hljs-selector-attr">[ɪnˈdʒɔɪ]</span><br>    <span class="hljs-selector-tag">vt</span>. 欣赏，享受；喜爱；使过得快活<br><span class="hljs-selector-tag">discounts</span>  <span class="hljs-selector-attr">[&#x27;dɪskaʊnts]</span><br>    <span class="hljs-selector-tag">n</span>. 优惠，折价；扣减额（<span class="hljs-selector-tag">discount</span>的复数形式）<br>    <span class="hljs-selector-tag">v</span>. 打折扣（<span class="hljs-selector-tag">discount</span>的三单形式）；<span class="hljs-selector-attr">[金融]</span> 贴现；低估；漠视<br><span class="hljs-selector-tag">take-away</span> <span class="hljs-selector-tag">food</span> <span class="hljs-selector-tag">deliver</span> <span class="hljs-selector-tag">guys</span>  <br>    外卖员<br><span class="hljs-selector-tag">take-away</span><br>    <span class="hljs-selector-tag">n</span>. 熟食<br>    <span class="hljs-selector-tag">adj</span>. 供应外带的；可带走的<br>    <span class="hljs-selector-tag">take</span>  <span class="hljs-selector-attr">[teɪk]</span><br>        <span class="hljs-selector-tag">vt</span>. 拿，取；采取；接受（礼物等）；买，花费；耗费（时间等）<br>        <span class="hljs-selector-tag">vi</span>. 拿；获得<br>        <span class="hljs-selector-tag">n</span>. 捕获量；看法；利益，盈益；（入场券的）售得金额<br>    <span class="hljs-selector-tag">away</span>   <span class="hljs-selector-attr">[əˈweɪ]</span><br>        <span class="hljs-selector-tag">adv</span>. 离去，离开；在远处<br><span class="hljs-selector-tag">deliver</span>  <span class="hljs-selector-attr">[dɪˈlɪvə(r)]</span><br>    <span class="hljs-selector-tag">vt</span>. 交付；发表；递送；释放；给予（打击）；给…接生<br>    <span class="hljs-selector-tag">vi</span>. 实现；传送；履行；投递<br>    <span class="hljs-selector-tag">n</span>. 投球<br><span class="hljs-selector-tag">guys</span>  <br>    <span class="hljs-selector-tag">n</span>. 球员；各位，朋友们<br>    <span class="hljs-selector-tag">n</span>. (Guys)人名；(法)居伊<br><span class="hljs-selector-tag">seen</span>  <span class="hljs-selector-attr">[siːn]</span><br>    <span class="hljs-selector-tag">vi</span>. 看见；明白（<span class="hljs-selector-tag">see</span> 的过去分词）<br>    <span class="hljs-selector-tag">vt</span>. 看望；会见；观看<br>    <span class="hljs-selector-tag">n</span>. (Seen) （美）森（人名）<br><span class="hljs-selector-tag">everywhere</span>  <span class="hljs-selector-attr">[ˈevriweə(r)]</span><br>    <span class="hljs-selector-tag">adv</span>. 到处<br>    <span class="hljs-selector-tag">n</span>. 每个地方<br><span class="hljs-selector-tag">inspiring</span>  <span class="hljs-selector-attr">[ɪnˈspaɪərɪŋ]</span><br>    <span class="hljs-selector-tag">adj</span>. 鼓舞人心的；灌输的；启发灵感的<br>    <span class="hljs-selector-tag">v</span>. 鼓舞；激发；使感悟（<span class="hljs-selector-tag">inspire</span>的<span class="hljs-selector-tag">ing</span>形式）<br><span class="hljs-selector-tag">among</span>  <span class="hljs-selector-attr">[əˈmʌŋ]</span><br>    <span class="hljs-selector-tag">prep</span>. 在……中间，周围是；在……之中，……之一；与……在一起；在三者或以上（中选择）；以及；为……所特有；（群体内部）相互间<br><span class="hljs-selector-tag">been</span>   <span class="hljs-selector-attr">[biːn; bɪn]</span><br>    <span class="hljs-selector-tag">v</span>. 是，有（<span class="hljs-selector-tag">be</span>的过去分词）<br>    <span class="hljs-selector-tag">n</span>. (Been) （美）贝恩（人名）<br><span class="hljs-selector-tag">have</span>  <span class="hljs-selector-attr">[həv; əv; hæv]</span><br>    <span class="hljs-selector-tag">vt</span>. 有；让；拿；从事；允许<br>    <span class="hljs-selector-tag">aux</span>. 已经<br>    <span class="hljs-selector-tag">n</span>. (Have)人名；(芬)哈韦；(德)哈弗<br><span class="hljs-selector-tag">industry</span>  <span class="hljs-selector-attr">[ˈɪndəstri]</span><br>    <span class="hljs-selector-tag">n</span>. 产业；工业；勤勉<br><span class="hljs-selector-tag">disable</span>  <span class="hljs-selector-attr">[dɪsˈeɪbl]</span><br>    <span class="hljs-selector-tag">vt</span>. 使失去能力；使残废；使无资格<br><span class="hljs-selector-tag">chance</span>  <span class="hljs-selector-attr">[tʃɑːns]</span><br>    <span class="hljs-selector-tag">n</span>. 机会，际遇；运气，侥幸；可能性<br>    <span class="hljs-selector-tag">vt</span>. 偶然发生；冒……的险<br>    <span class="hljs-selector-tag">vi</span>. 碰巧；偶然被发现<br>    <span class="hljs-selector-tag">n</span>. (Chance)人名；(英)钱斯<br><span class="hljs-selector-tag">fight</span>  <span class="hljs-selector-attr">[faɪt]</span><br>    <span class="hljs-selector-tag">v</span>. 与……打仗，与……斗争；打架；竞争；极力反对；努力争取；争辩；参加（拳击比赛）；反对……提案；指挥（部队）作战；奋力灭（火）；奋力赢得（选举）；克制（情感表露）；（双方）失和；打（官司）<br>    <span class="hljs-selector-tag">n</span>. 打架；斗争；竞赛；拳击赛；争论；战斗；斗志<br><span class="hljs-selector-tag">inspired</span>  <span class="hljs-selector-attr">[ɪnˈspaɪəd]</span><br><span class="hljs-selector-tag">adj</span>. 品质优秀的；能力卓越的；借助于灵感创作的；受……影响的；（空气等物质）吸入的；基于宗教、政治等原因<br><span class="hljs-selector-tag">v</span>. 激发，鼓舞（<span class="hljs-selector-tag">inspire</span> 的过去式和过去分词）<br><span class="hljs-selector-tag">hurt</span>  <span class="hljs-selector-attr">[hɜːt]</span><br>    <span class="hljs-selector-tag">vt</span>. 使受伤；损害；使疼痛；使痛心<br>    <span class="hljs-selector-tag">vi</span>. 感到疼痛；有坏处；带来痛苦<br>    <span class="hljs-selector-tag">n</span>. 痛苦；危害；痛苦的原因<br>    <span class="hljs-selector-tag">adj</span>. 受伤的；痛苦的；受损的<br>    <span class="hljs-selector-tag">n</span>. (Hurt)人名；(德、匈、捷)胡特；(英)赫特<br><span class="hljs-selector-tag">lacking</span>  <span class="hljs-selector-attr">[ˈlækɪŋ]</span><br>    <span class="hljs-selector-tag">adj</span>. 缺乏的，不足的；没有的，缺失的，不存在的；有缺陷的，不充分的<br>    <span class="hljs-selector-tag">v</span>. 缺少，没有，不足（<span class="hljs-selector-tag">lack</span> 的现在分词）<br><span class="hljs-selector-tag">patience</span>  <span class="hljs-selector-attr">[ˈpeɪʃns]</span><br>    <span class="hljs-selector-tag">n</span>. 耐性，耐心；忍耐，容忍<br><span class="hljs-selector-tag">got</span>  <span class="hljs-selector-attr">[ɡɒt]</span><br>    <span class="hljs-selector-tag">v</span>. 得到，明白（<span class="hljs-selector-tag">get</span>的过去式和过去分词）<br><span class="hljs-selector-tag">comment</span>  <span class="hljs-selector-attr">[ˈkɒment]</span><br>    <span class="hljs-selector-tag">n</span>. 评论；意见；批评；描述<br>    <span class="hljs-selector-tag">vt</span>. 发表评论；发表意见<br>    <span class="hljs-selector-tag">vi</span>. 为……作评语<br>    <span class="hljs-selector-tag">n</span>. (Comment) （美、瑞、法）科门特 （人名）<br><span class="hljs-selector-tag">thought</span>  <span class="hljs-selector-attr">[θɔːt]</span><br>    <span class="hljs-selector-tag">n</span>. 思想；思考；想法；关心<br>    <span class="hljs-selector-tag">v</span>. 想，思考；认为（<span class="hljs-selector-tag">think</span>的过去式和过去分词）<br><span class="hljs-selector-tag">took</span>  <span class="hljs-selector-attr">[tʊk]</span><br>    <span class="hljs-selector-tag">v</span>. 拿；取；接受（<span class="hljs-selector-tag">take</span>的过去式）<br><span class="hljs-selector-tag">sign</span>  <span class="hljs-selector-attr">[saɪn]</span><br>    <span class="hljs-selector-tag">n</span>. 迹象；符号；记号；手势；指示牌<br>    <span class="hljs-selector-tag">vi</span>. 签署；签名<br>    <span class="hljs-selector-tag">vt</span>. 签署；示意<br><span class="hljs-selector-tag">media</span>  <span class="hljs-selector-attr">[ˈmiːdiə]</span><br>    <span class="hljs-selector-tag">n</span>. 媒体；媒质（<span class="hljs-selector-tag">medium</span>的复数）；血管中层；浊塞音；中脉<br><span class="hljs-selector-tag">deaf-mute</span><br>    <span class="hljs-selector-tag">adj</span>. 聋哑的<br>    <span class="hljs-selector-tag">n</span>. 聋哑者<br><span class="hljs-selector-tag">gave</span>  <span class="hljs-selector-attr">[ɡeɪv]</span><br>    <span class="hljs-selector-tag">v</span>. 给予（<span class="hljs-selector-tag">give</span>的过去式）<br>    <span class="hljs-selector-tag">n</span>. (Gave)人名；(塞内)加韦；(法)加夫<br><span class="hljs-selector-tag">feedbacks</span><br>    <span class="hljs-selector-tag">n</span>. 回馈<br><span class="hljs-selector-tag">whole</span>  <span class="hljs-selector-attr">[həʊl]</span><br>    <span class="hljs-selector-tag">adj</span>. 完整的；纯粹的<br>    <span class="hljs-selector-tag">n</span>. 整体；全部<br><span class="hljs-selector-tag">then</span>  <span class="hljs-selector-attr">[ðen]</span><br>    <span class="hljs-selector-tag">adv</span>. 然后；那么；于是；当时；此外<br>    <span class="hljs-selector-tag">n</span>. (Then)人名；(德)特恩<br><span class="hljs-selector-tag">misunderstanding</span>  <span class="hljs-selector-attr">[ˌmɪsʌndəˈstændɪŋ]</span><br>    <span class="hljs-selector-tag">n</span>. 误解；误会；不和<br><span class="hljs-selector-tag">reduced</span>  <span class="hljs-selector-attr">[rɪ&#x27;djuːst]</span><br>    <span class="hljs-selector-tag">adj</span>. 减少的；<span class="hljs-selector-attr">[数]</span> 简化的；缩减的<br>        <span class="hljs-selector-tag">reduce</span>  <span class="hljs-selector-attr">[rɪˈdjuːs]</span><br>            <span class="hljs-selector-tag">vt</span>. 减少；降低；使处于；把…分解<br>            <span class="hljs-selector-tag">vi</span>. 减少；缩小；归纳为<br><span class="hljs-selector-tag">special</span>  <span class="hljs-selector-attr">[ˈspeʃl]</span><br>    <span class="hljs-selector-tag">adj</span>. 特别的；重要的；特设的；专用的，特有的；特派的；格外的；（主题）研究深入的；特殊（教育）的；特殊（矩阵）的<br>    <span class="hljs-selector-tag">n</span>. 特别的东西（活动、节目等）；特价（品）；特供菜；特派员；特产；专车<br>    <span class="hljs-selector-tag">n</span>. (Special) （印、美、俄）史派西娅乐（人名）<br><span class="hljs-selector-tag">deserves</span>  <span class="hljs-selector-attr">[dɪ&#x27;zɜːvs]</span><br>    应受,应得<br><span class="hljs-selector-tag">respect</span>  <span class="hljs-selector-attr">[rɪˈspekt]</span><br>    <span class="hljs-selector-tag">n</span>. 尊敬，尊重；方面；敬意<br>    <span class="hljs-selector-tag">vt</span>. 尊敬，尊重；遵守<br></code></pre></td></tr></table></figure><h3 id="Be-More-Patient"><a href="#Be-More-Patient" class="headerlink" title="Be More Patient"></a>Be More Patient</h3><p>Nowadays, more and more people choose to order food online, because they don’t want to go out and at the same time they can enjoy some discounts.<br>As a result, the take-away food deliver guys can be seen everywhere. Many inspiring stories have been happened among them.<br>如今，越来越多的人因为不想出门而选择在网上订购食品，同时他们也可以享受一些优惠。因此，外卖人员随处可见，他们之间也发生了许多激励人心的故事。  </p><p>As the take-away food deliver is the new industry, so some disable people are given the chance to work on it.<br>When the public sees these people fight for life, they are inspired, but some people hurt these people’s feeling because of lacking of patience.<br>It is said that a food deliver guy got a bad comment because the customers thought that he asked for money when he took out of a sign.<br>When the media reported the news, they found that this guy was deaf-mute, so the company gave him a sign to ask the customer to remember giving feedbacks in time.<br>If we gave more seconds to see the whole thing, then the misunderstanding will be reduced.<br>外卖是新兴行业，因此一些残疾人士得到了工作的机会。当公众看到这些人为生活奋斗，受到了鼓舞，但有些人却因为缺乏耐心而伤害这些人的感受。据说有一个送外卖的职工得到了不好的评论，因为那名员工拿出一个牌子时客户以为他要额外收钱。媒体报道了新闻后，他们发现这名人员是聋哑人，所以公司给了他一个牌子，提醒客户给予及时反馈。如果我们多点耐心来看待整个事情，那么误解就会减少很多。  </p><p>Try to think about these special group of people. Their attitude to life deserves us to respect.<br>试着想想这么特殊的一群人。他们对生活的态度值得我们尊重。</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>每日英语</title>
    <link href="/2021/01/07/2020-03-17-everydayEnglish/"/>
    <url>/2021/01/07/2020-03-17-everydayEnglish/</url>
    
    <content type="html"><![CDATA[<h3 id="单词"><a href="#单词" class="headerlink" title="单词"></a>单词</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">semester</span>  <span class="hljs-selector-attr">[sɪˈmestə(r)]</span><br>    <span class="hljs-selector-tag">n</span>.一学期，半学年，六个月的时间<br><span class="hljs-selector-tag">coming</span>  <span class="hljs-selector-attr">[ˈkʌmɪŋ]</span> <br>    <span class="hljs-selector-tag">n</span>.(新事物的)到来，来临<br>    <span class="hljs-selector-tag">adj</span>.即将发生的;下一个的<br>     <span class="hljs-selector-tag">v</span>.来;来到;到达，抵达(某地);来做;来取;来拿<br>      <span class="hljs-selector-tag">come</span>的现在分词<br><span class="hljs-selector-tag">soon</span>  <span class="hljs-selector-attr">[suːn]</span><br>    <span class="hljs-selector-tag">adv</span>.很快;马上;不久;早;快<br><span class="hljs-selector-tag">grade</span>  <span class="hljs-selector-attr">[ɡreɪd]</span><br>    <span class="hljs-selector-tag">n</span>.(产品、材料的)等级，品级;(官衔的)级别;职别;成绩等级;评分等级<br>    <span class="hljs-selector-tag">v</span>.(按能力、质量、大小等将…)分级，分等，分类;给…评分;给…分数<br><span class="hljs-selector-tag">realize</span>  <span class="hljs-selector-attr">[ˈriːəlaɪz]</span><br>    <span class="hljs-selector-tag">v</span>.理解;领会;认识到;意识到;实现;将…变为现实;(所担心的事)发生，产生<br></code></pre></td></tr></table></figure><h3 id="My-Goal"><a href="#My-Goal" class="headerlink" title="My Goal"></a>My Goal</h3><p>New semester is coming soon, and I will be a six grade student.<br>I am so excited about the last year of the primary school, so I have made up my mind.<br>I must study hard and improve my English level.<br>I realize master the International language will be useful for me, so I must study it well. I think I can make it. </p><p>新学期即将到来，我将是一名六年级学生。<br>对于小学的最后一年我很兴奋，所以我已经下定决心，<br>一定要努力学习，提高我的英语水平。<br>我意识到掌握国际语言对我来说是有用的，所以我必须学好它。我觉得我能做到。  </p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>每日英语</title>
    <link href="/2021/01/07/2020-03-18-everydayEnglish/"/>
    <url>/2021/01/07/2020-03-18-everydayEnglish/</url>
    
    <content type="html"><![CDATA[<h3 id="单词"><a href="#单词" class="headerlink" title="单词"></a>单词</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs scss">sticking  <span class="hljs-selector-attr">[&#x27;stɪkɪŋ]</span><br>    adj. 粘的；有粘性的<br>    v. 刺入；伸出；（非正式）使支付；粘住；坚持；（非正式）接受（stick 的现在分词）<br>budget  <span class="hljs-selector-attr">[ˈbʌdʒɪt]</span><br>    n. 预算，预算费<br>    vt. 安排，预定；把…编入预算<br>    vi. 编预算，做预算<br>    adj. 廉价的<br>seem  <span class="hljs-selector-attr">[siːm]</span><br>    vi. 似乎；像是；装作<br>    n. (Seem)人名；(英)西姆<br>blow  <span class="hljs-selector-attr">[bləʊ]</span><br>    v. （风）吹；吹奏；喘气；吹气；喘息；擤（鼻子）；熔化，烧断；炸开；泄露；突然离开；浪费（钱、机会）；（古）开花；（苍蝇）产卵于；（鲸鱼）喷水；把……搞糟；鸣（汽车喇叭）；吹制（玻璃）；把蛋黄和蛋清从蛋壳中吹出<br>    n. 吹；打击，猛击；挫折；强风；擤鼻子；（非正式）爵士乐演奏；（非正式）大麻；（炼钢用语）吹炼；（古）开花，开花期<br>    int. 哎呀（表示厌烦）<br>also  <span class="hljs-selector-attr">[ˈɔːlsəʊ]</span><br>    adv. 也；而且；同样<br>    conj. 并且；另外<br>    n. (Also)人名；(罗)阿尔索<br>when  <span class="hljs-selector-attr">[wen]</span><br>    adv. 什么时候；什么情况下；什么场合下；（用于时间的表达方式之后）在那时，其时；当时，当场<br>    pron. 什么时候；何时<br>    conj. 在……时候；在……之后；在任何……时候；一……就； 考虑到，既然；虽然，然而，可是<br>    n. 时间，时候；日期；场合<br>careful  <span class="hljs-selector-attr">[ˈkeəfl]</span><br>    adj. 仔细的，小心的<br>even  <span class="hljs-selector-attr">[&#x27;i:vən]</span><br>    adv. 甚至，即使；愈加，还；实际上<br>    adj. 平坦的；平稳的；相等的；均衡的；偶数的；同样大小的；平分的；平局的；镇静的<br>    v. 使平坦；使相等<br>    n. （诗、文）黄昏，傍晚<br>    n. (Even) （挪、美）埃旺（人名）<br>without  <span class="hljs-selector-attr">[wɪˈðaʊt]</span><br>    prep. 没有；不和……在一起；不带；在……外部<br>    adv. 没有，缺乏；在外面<br>    conj. 不那样的话；除非<br>    n. 外部，外面<br>emergency  <span class="hljs-selector-attr">[ɪˈmɜːdʒənsi]</span><br>    n. 紧急情况；突发事件；非常时刻<br>    adj. 紧急的；备用的<br>fund  <span class="hljs-selector-attr">[fʌnd]</span><br>    n. 基金；资金；存款<br>    vt. 投资；资助<br>    n. (Fund)人名；(德)丰德<br>unexpected  <span class="hljs-selector-attr">[ˌʌnɪkˈspektɪd]</span><br>    adj. 意外的，想不到的<br>expenses  <span class="hljs-selector-attr">[ɪk&#x27;spensɪs]</span><br>    n. 费用（expense的复数形式）；<span class="hljs-selector-attr">[会计]</span> 开支<br>    v. 向…收取费用；被花掉（expense的第三人称单数形式）<br>medical  <span class="hljs-selector-attr">[ˈmedɪkl]</span><br>    adj. 医学的；药的；内科的<br>    n. 医生；体格检查<br>working  <span class="hljs-selector-attr">[ˈwɜːkɪŋ]</span><br>    adj. 有工作的；从事普通工作的；工作上的；可行的；初步的；基本够用的；能运转的；（机器部件）操作的<br>    n. （机器、系统等的）运作；工作，干活；矿，作业区；班次；操纵；计算过程<br>    v. 工作；影响；受雇于；使卖力干活；争取（work 的现在分词）<br>    n. (Working) （美）沃金（人名）<br><br></code></pre></td></tr></table></figure><h3 id="月光族该如何补救"><a href="#月光族该如何补救" class="headerlink" title="月光族该如何补救?"></a>月光族该如何补救?</h3><p>There are months when sticking to your budget seems very easy.<br>There are also months when you manage to blow your budget even when you have been careful with your money.<br>一年中有几个月，把生活成本控制在预算之内还是很容易的。<br>但还有几个月，即使你精打细算，最终还是超支了。  </p><pre><code>(There are months when) sticking to (your budget seems very easy).          有几个月            坚持         你的预算似乎很容易。manage to do sth.  成功地做到（了）某事，是有明确结果的。(There are also months when) (you manage to blow your budget) even when (you have been careful with your money).       也有几个月                   你最终超出你的预算               即使          你用钱很小心</code></pre><p>If you are working without an emergency fund, any unexpected expenses like a medical bill can blow your budget at the beginning of the month.<br>如果你没有一笔应急资金，任何意想不到的开支（比如医疗费用）都可能在月初就超出你的预算。   </p><pre><code>If you are working (without an emergency fund), (any unexpected expenses) (like a medical bill) can (blow your budget) at (the beginning of the month).  如果你                 没有一笔应急资金    ，           任何意想不到的开支         比如医疗费用         可能    超出你的预算      在        月初。  </code></pre><p>It is stressful to realize that you are out of money and still have several days or even weeks until you get paid again.<br>当你意识到自己已经没钱了，而且还有几天甚至几周的时间才能拿到工资时，你会感到压力重重。   </p><pre><code>stressful  [ˈstresfl]        adj. 紧张的；有压力的 realize  [ˈriːəlaɪz]       vt. 实现；认识到；了解；将某物卖得，把(证券等)变成现钱；变卖 still  [stɪl]    adv. 仍然；更；静止地    adj. 静止的，不动的；寂静的，平静的；不起泡的    n. 寂静；剧照；蒸馏室    conj. 仍然；但是；尽管如此    vt. 蒸馏；使…静止；使…平静下来    vi. 静止；平静；蒸馏    n. (Still)人名；(英、芬、瑞典)斯蒂尔；(德)施蒂尔several  [ˈsevrəl]    adj. 几个的；各自的    pron. 几个；数个until  [ənˈtɪl]    conj. 到……时，直到……为止    prep. 到……时，直到……为止paid  [peɪd]    v. 支付；付清（pay 的过去式和过去分词）    adj. （工作）有薪酬的；（假期）带薪的；受雇用的；薪水（高或低）的    n. (Paid) （美）排德（人名）It is stressful to realize that (you are out of money) and still (have several days or even weeks) until (you get paid again).   这是有压力的        认识到          你没钱了                  仍然    有几个或者几周                     直到     你再次获得薪水。</code></pre><p>If you have blown your budget, you need to reduce the amount of money that you spend each day.<br>如果你的预算已经超支了，你需要减少每天的开销。  </p><pre><code>blown  [bləʊn]    adj. （非正式）配有涡轮增压器的    v. （风）吹（blow 的过去分词）need  [niːd]    v. 必须，需要；（表示应该或不得不做）有必要    n. 需要，必须； 特别需要，迫切要求；欲望；（食物、钱或生活来源的）短缺，缺乏；必需品；贫困（或困难）的处境reduce  [rɪˈdjuːs]    vt. 减少；降低；使处于；把…分解    vi. 减少；缩小；归纳为spend  [spend]    vt. 度过，消磨（时光）；花费；浪费；用尽    vi. 花钱；用尽，耗尽    n. 预算If you have (blown your budget), you need to (reduce the amount of money) that (you spend each day).                花光你的预算           你需要       减少钱数                            你每日的花费</code></pre><p>Depending on how tight your budget is, you may need to stop all spending completely.<br>这取决于你的预算有多紧张，有可能你需要完全停止所有支出。  </p><pre><code>depending  [di&#39;pendiŋ]    v. 依赖；信任（depend的ing形式）how  [haʊ]    adv. 如何；多少；多么    n. 方法；方式    conj. 如何    n. (How)人名；(英)豪tight  [taɪt]    adj. 紧的；密封的；绷紧的；麻烦的；严厉的；没空的；吝啬的    adv. 紧紧地；彻底地    n. (Tight)人名；(英)泰特may  [meɪ]    aux. 可以，能够；可能，也许；祝，愿；会，能completely  [kəmˈpliːtli]    adv. 完全地，彻底地；完整地Depending on how tight your budget is, you may need to (stop all spending completely).                                                            完成停止所有花费</code></pre><p>You should bring your lunch from home and do everything you can to really reduce the amount that you spend on food.<br>你应该从家里带午餐，尽你所能来减少你在食物上的开支。  </p><pre><code>everything  [ˈevriθɪŋ]    pron. 每件事物，（有关的）一切，万事；形势，情况；最重要的东西    n. (Everything) （印、美、澳）艾维辛（人名）really  [ˈriːəli]    adv. 实际上，事实上；真正地，真实地；真的吗？（表语气）do everything you can to do sth  尽你所能的去做,you can 是修饰everything的  You should (bring your lunch from home) and (do everything you can to) really (reduce the amount that you spend on food).               从家里带来你的午餐                  尽你所能的去做                       减少你在食物上的花费。</code></pre><p>It is important to think about necessities versus luxuries at this point. If it is a luxury, then you need to skip it for the rest of the month.<br>这时候考虑必需品和奢侈品是很重要的。如果是奢侈品，那么你需要在这个月剩下的时间里跳过它。  </p><pre><code>important  [ɪmˈpɔːtnt]    adj. 重要的，重大的；有地位的；有权力的necessities  [nə&#39;sɛsəti]    n. 必需品（necessity的复数）versus  [ˈvɜːsəs]    prep. 对，对抗；与……相对，与……相比luxuries    n. 奢侈品（luxury的复数形式）point  [pɔɪnt]    n. 要点；得分；标点；[机] 尖端    vt. 指向；弄尖；加标点于    vi. 表明；指向    n. (Point)人名；(法)普安then  [ðen]    adv. 然后；那么；于是；当时；此外    n. (Then)人名；(德)特恩skip  [skɪp]    vi. 跳跃；跳绳；遗漏；跳读    vt. 跳过；遗漏    n. 跳跃；跳读    n. (Skip)人名；(英)斯基普rest  [rest]    v. （使）休息；（使）运动员暂时离队；（使）倚靠；被搁置；（遗体或尸体）安葬于；让（土地）休耕；（原告或被告）完成向法庭提出证据（或辩论）；归属于；保持不变    n. 休息；睡眠；静止；休止；休止符；（演说中的）停顿；（诗句中的）停顿；休息处；支架；剩余部分；其余的人（或物）；（器官或组织的）一小碎块；（网球）对打    n. (Rest) （美）雷斯特（人名）It is important to think about necessities versus luxuries at this point. If it is a luxury, then you need to skip it for the rest of the month.</code></pre><p>You should even work on reducing the amount that you would normally spend on necessities. This can make a big difference in how long it takes you to recover from a financial mistake.<br>你甚至应该努力减少日常生活必需品的开支。这将会对你从财务错误中恢复过来的时间有很大的影响。  </p><p>You may also want to consider selling some things to raise extra cash, taking on extra hours or picking up part-time work to cover the difference.</p><p>你也可以考虑卖掉一些东西来筹集额外的资金，加班或者兼职来弥补差额。</p><p>01 Should I Use a Credit Card?</p><p>我应该用信用卡吗？</p><p>This is a tricky situation. It is not a good idea to use a credit card, but if you are choosing between not eating at all for the rest of the month or using your credit card to buy groceries, then it is better to eat.</p><p>这是一个棘手的情况。使用信用卡并不是一个好主意，但是如果你要在这个月剩下的时间里选择完全不吃东西或者用信用卡购买食品杂货，最好还是选择吃东西吧。</p><p>However, this means that you are buying inexpensive items, you are not eating out and you are doing everything you can to reduce the amount that you are spending.</p><p>然而，这意味着你买的是便宜的东西，没有在外面吃饭，你正在尽一切努力减少你的消费。</p><p>You should not eat out on the credit card, and you should not be using it to go to the movies.</p><p>你不应该在外面用信用卡吃饭，也不应该用信用卡去看电影。</p><p>You do not need to wrack up big bills to travel for entertainment reasons when you are in this situation. You should also have a clear plan on how you are going to pay this off in the next month or two.</p><p>当你处于这种情况时，你不需要为了娱乐去旅行而花费大笔的钱。你还应该有一个明确的计划，你将如何在接下来的一两个月内还清这笔钱。</p><p>02 How Can I Stop This From Happening Again?</p><p>我如何阻止这种事情再次发生呢？</p><p>If you find yourself in a pattern where you consistently run out of money or blow your budget at the beginning of the month, you need to work to change your situation.</p><p>如果你发现自己在月初总是没有钱或花光预算，你需要努力改变现状。</p><p>If it is something like a car repair or an unexpected expense, then an emergency fund should solve your problem.</p><p>如果是修车或意外开支，那么应急基金应该能解决你的问题。</p><p>This allows you to cover the expense without affecting the rest of your budget.</p><p>这允许你在不影响你其余部分预算的情况下支付费用。</p><p>If you find this happening all of the time, you need to consider whether or not you have spending issues that you need to address.</p><p>如果你发现这种情况经常发生，你需要考虑一下是否有需要解决的消费问题。</p><p>You also need to consider if your budget is actually working. Often people who struggle this way do not have a budget at all.</p><p>你还需要考虑你的预算是否真的有效。通常这样挣扎的人根本没有预算。</p><p>03 Why Does My Budget Never Seem to Work?</p><p>为什么我的预算似乎从来没有起作用？</p><p>If you are having a hard time following your budget, you may be facing a few different issues.</p><p>如果你在预算上有困难，你可能会面临一些不同的问题。</p><p>The first thing you need to consider is if you set your budget categories at a realistic level.</p><p>你需要考虑的第一件事是你是否把预算类别设置在一个现实的水平。</p><p>When you first set up a budget you may arbitrarily decide that you can get by with spending only $100.00 a week on food.</p><p>当你第一次制定预算时，你可能随随便便地就决定每周只花100美元买食物。</p><p>However, if up to this point you have been spending $200.00 a week, this is a big difference and you may not be able to do it.</p><p>然而，如果到目前为止你一周花了200美元，这是一个很大的差额，你可能无法做到。</p><p>You may want to try cutting back gradually until you reach your goal.</p><p>你可能想要尝试逐渐削减直到达到你的目标。</p><p>You may also be having a hard time tracking your expenses. This means that you are overspending in certain categories like entertainment and then you are out of money when it is time to buy groceries.</p><p>你可能也很难记录你的开销。这意味着你在某些领域如娱乐上花费过多，当你需要购买日用品的时候你就没钱了。</p><p>Finally, you may have an income issue where you simply do not make enough to cover your necessities or your lifestyle.</p><p>最后，你可能会有收入问题，你挣的钱不足以支付你的生活必需品或生活方式。</p><p>You will need to cut back your spending and work on raising your income.</p><p>你需要削减开支，还要努力提高你的收入。</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>线程阻塞与唤醒</title>
    <link href="/2021/01/07/2020-04-16-threadPark/"/>
    <url>/2021/01/07/2020-04-16-threadPark/</url>
    
    <content type="html"><![CDATA[<h2 id="线程阻塞与唤醒"><a href="#线程阻塞与唤醒" class="headerlink" title="线程阻塞与唤醒"></a>线程阻塞与唤醒</h2><h3 id="方式一（-Deprecated）"><a href="#方式一（-Deprecated）" class="headerlink" title="方式一（@Deprecated）"></a>方式一（@Deprecated）</h3><p>早期JAVA采用suspend()、resume()对线程进行阻塞与唤醒，但这种方式产生死锁的风险很大，因为线程被挂起以后不会释放锁，可能与其他线程、主线程产生死锁，suspend 它会一直保持对锁的占有，一直到其他的线程调用resume方法，它才能继续向下执行。   </p><ul><li>演示 suspend 方法为什么被弃用  </li></ul><p>1).独占：因为 suspend 在调用过程中不会释放所占用的锁，所以如果使用不当会造成对公共对象的独占，使得其他线程无法访问公共对象，严重的话造成死锁。<br>假如有A，B两个线程，A线程在获得某个锁之后被suspend阻塞，这时A不能继续执行，线程B在获得相同的锁之后才能调用resume方法将A唤醒，但是此时的锁被A占有，B不能继续执行，也就不能及时的唤醒A，此时A，B两个线程都不能继续向下执行而形成了死锁。这就是suspend被弃用的原因。<br>如果把 System.out.println(“I’m OK.”); 注掉，则会输出 suspend complete? ；否则因为println函数，suspend挂起后的线程没有释放锁，导致其他线程在调用println函数时出现阻塞</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadSuspendTest</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span> &#123;<br>        Thread a = <span class="hljs-keyword">new</span> MyThread();<br>        a.start();<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.currentThread().sleep(<span class="hljs-number">100</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        a.suspend();<br>        System.out.println(<span class="hljs-string">&quot;suspend complete?&quot;</span>);<br>        a.resume();<br>        System.err.println(<span class="hljs-string">&quot;--&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;I&#x27;m OK.&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2).不同步：容易造成因线程暂停而导致的数据不同步  </p><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><ul><li>wait、notify形式通过一个object作为信号，object的wait()方法是锁门的动作，notify()、notifyAll()是开门的动作，某一线程一旦关上门后其他线程都将阻塞，直到别的线程打开门。notify()准许阻塞的一个线程通过，notifyAll()允许所有线程通过。<br>演示代码：主线程分别启动两个线程，随后通知子线程暂停等待，再逐个唤醒后线程抛异常退出。</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> ObjectWaitTest &#123;<br>    public static Object waitObject = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Object()</span>;<br><br>    public static void notify<span class="hljs-constructor">AllThread()</span> &#123;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;notifyAllThread&quot;</span>);<br>        synchronized (waitObject) &#123;<br>            waitObject.notify<span class="hljs-constructor">All()</span>;<br>        &#125;<br>    &#125;<br><br>    public static void notify<span class="hljs-constructor">Thread()</span> &#123;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;notifyThread&quot;</span>);<br>        synchronized (waitObject) &#123;<br>            waitObject.notify<span class="hljs-literal">()</span>;<br>        &#125;<br>    &#125;<br><br>    public static void main(String<span class="hljs-literal">[]</span> args) throws InterruptedException &#123;<br>        MyThread tm1 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">MyThread(<span class="hljs-params">waitObject</span>)</span>;<br>        tm1.set<span class="hljs-constructor">Name(<span class="hljs-string">&quot;tm1&quot;</span>)</span>;<br>        tm1.start<span class="hljs-literal">()</span>;<br>        MyThread tm2 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">MyThread(<span class="hljs-params">waitObject</span>)</span>;<br>        tm2.set<span class="hljs-constructor">Name(<span class="hljs-string">&quot;tm2&quot;</span>)</span>;<br>        tm2.start<span class="hljs-literal">()</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.sleep(<span class="hljs-number">1000</span>);<br>        tm1.suspend<span class="hljs-constructor">Thread()</span>;<br>        tm2.suspend<span class="hljs-constructor">Thread()</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.sleep(<span class="hljs-number">1000</span>);<br>        notify<span class="hljs-constructor">Thread()</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.sleep(<span class="hljs-number">1000</span>);<br>        notify<span class="hljs-constructor">Thread()</span>;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> MyThread extends Thread &#123;<br>    public Object waitObject = null;<br>    <span class="hljs-keyword">private</span> boolean isStop = <span class="hljs-literal">false</span>;<br><br>    public <span class="hljs-constructor">MyThread(Object <span class="hljs-params">waitObject</span>)</span> &#123;<br>        this.waitObject = waitObject;<br>    &#125;<br><br>    public void run<span class="hljs-literal">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            synchronized (waitObject) &#123;<br>                <span class="hljs-keyword">if</span> (isStop) &#123;<br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span> + <span class="hljs-string">&quot; is stop&quot;</span>);<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        waitObject.wait<span class="hljs-literal">()</span>;<br>                    &#125; catch (InterruptedException e) &#123;<br>                        e.print<span class="hljs-constructor">StackTrace()</span>;<br>                    &#125;<br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span> + <span class="hljs-string">&quot; is resume&quot;</span>);<br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span> + <span class="hljs-string">&quot; will  exit&quot;</span>);<br>                    throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">RuntimeException(Thread.<span class="hljs-params">currentThread</span>()</span>.get<span class="hljs-constructor">Name()</span> + <span class="hljs-string">&quot; exit&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    public void suspend<span class="hljs-constructor">Thread()</span> &#123;<br>        this.isStop = <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>wait、notify使用要点：<br>1、对象操作都需要加同步synchronized；<br>2、线程需要阻塞的地方调用对象的wait方法；<br>存在的不足：面向对象的阻塞是阻塞当前线程，而唤醒的是随机的一个线程或者所有线程，偏重线程间的通信；同时某一线程在被另一线程notify之前必须要保证此线程已经执行到wait等待点，错过notify则可能永远都在等待。  </li></ul><h3 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h3><p>LockSupport 提供的 park 和 unPark 方法，提供避免死锁和竞态条件，很好地代替 suspend 和 resume 组合。<br>park 与 unPark 方法控制的颗粒度更加细小，能准确决定线程在某个点停止，进而避免死锁的产生。<br>park 与 unPark 引入了许可机制，许可逻辑为：<br>①park 将许可在等于0的时候阻塞，等于1的时候返回并将许可减为0；<br>②unPark 尝试唤醒线程，许可加1。根据这两个逻辑，对于同一条线程，park 与 unPark 先后操作的顺序似乎并不影响程序正确地执行，假如先执行 unPark 操作，许可则为1，之后再执行park操作，此时因为许可等于1直接返回往下执行，并不执行阻塞操作。<br>park 与 unPark 组合真正解耦了线程之间的同步，不再需要另外的对象变量存储状态，并且也不需要考虑同步锁，wait与notify要保证必须有锁才能执行，而且执行notify操作释放锁后还要将当前线程扔进该对象锁的等待队列，LockSupport则完全不用考虑对象、锁、等待队列等问题。  </p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> ThreadParkTest &#123;<br>    public static void main(String<span class="hljs-literal">[]</span> args) throws Exception &#123;<br>        Thread t = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(()</span> -&gt; &#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;start&quot;</span>);<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LockSupport</span>.</span></span>park<span class="hljs-literal">()</span>; <span class="hljs-comment">//一直wait</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;continue&quot;</span>);<br>        &#125;);<br>        t.start<span class="hljs-literal">()</span>;<br><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>sleep(<span class="hljs-number">1000</span>);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LockSupport</span>.</span></span>unpark(t); <span class="hljs-comment">//指定t线程解除wait态</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>suspend()、resume()已经被deprecated，不建议使用。wait、notify需要对对象加同步，性能有折扣。LockSupport则完全不用考虑对象、锁、等待队列。</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>递归介绍(一）：线性递归、线性迭代、树形递归</title>
    <link href="/2021/01/07/2020-03-26-recursion/"/>
    <url>/2021/01/07/2020-03-26-recursion/</url>
    
    <content type="html"><![CDATA[<h2 id="以计算阶乘-n-为例解释线性递归和线性迭代"><a href="#以计算阶乘-n-为例解释线性递归和线性迭代" class="headerlink" title="以计算阶乘(n!)为例解释线性递归和线性迭代"></a>以计算阶乘(n!)为例解释线性递归和线性迭代</h2><h3 id="线性递归"><a href="#线性递归" class="headerlink" title="线性递归"></a>线性递归</h3><h4 id="思路：对于一个正整数n，n-就等于-n-n-1"><a href="#思路：对于一个正整数n，n-就等于-n-n-1" class="headerlink" title="思路：对于一个正整数n，n!就等于 n*(n-1)!"></a>思路：对于一个正整数n，n!就等于 n*(n-1)!</h4><p>代码：  </p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fuctorial</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> n * fuctorial(n<span class="hljs-number">-1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3!的线性递归过程,利用代换模型观看这一过程在计算3!时表现出的行为（代换模型揭示出一种先逐步展开而后收缩的形状）。<br>在展开阶段里，这一计算过程构造起一个推迟进行的操作所形成的链条（在这里是一个乘法的链条），收缩阶段表现为这些运算的实际执行。<br>这种类型的计算过程由一个推迟执行的运算链条刻画，称为一个递归计算过程。<br>要执行这种计算过程，解释器就需要维护好那些以后将要执行的操作的轨迹。<br>在计算阶乘n!时，推迟执行的乘法链条的长度也就是为保存其轨迹需要保存的信息量，这个长度随着n值而线性增长（正比于n），<br>就像计算中的步骤数目一样。这样的计算过程称为一个线性递归过程。  </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">3</span>!的执行过程：<br>    <span class="hljs-attribute">fuctorial</span>(<span class="hljs-number">3</span>)<br>    <span class="hljs-attribute">3</span> * fuctorial(<span class="hljs-number">2</span>)<br>    <span class="hljs-attribute">3</span> * <span class="hljs-number">2</span> * fuctorial(<span class="hljs-number">1</span>)<br>    <span class="hljs-attribute">3</span> * <span class="hljs-number">2</span> * <span class="hljs-number">1</span><br>    <span class="hljs-attribute">3</span> * <span class="hljs-number">2</span><br>    <span class="hljs-attribute">6</span><br></code></pre></td></tr></table></figure><h3 id="线性迭代"><a href="#线性迭代" class="headerlink" title="线性迭代"></a>线性迭代</h3><h4 id="思路：先乘以1和2，而后一直乘到n"><a href="#思路：先乘以1和2，而后一直乘到n" class="headerlink" title="思路：先乘以1和2，而后一直乘到n"></a>思路：先乘以1和2，而后一直乘到n</h4><p>计算过程里并没有任何增长或者收缩，对于任何一个n，在计算过程中的每一步，在我们需要保存轨迹里，所有的东西就是变量product、counter和maxCount的当前值。这种过程为一个迭代计算过程。<br>一般来说，迭代计算过程就是那种状态可以用固定数目的状态变量描述的计算过程；而与此同时，又存在着一套固定的规则，描述了计算过程在从一个状态到下一状态转换时，这些变量的更新方式；还有一个（可能有的）结果检测，它描述这一计算过程应该终止的条件。在计算n!时，所需的计算步骤随着n线性增长，这种过程称为线性迭代过程。<br>计算3!的线性迭代过程  </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">factiorial</span><span class="hljs-params">(<span class="hljs-number">3</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">factIter</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">factIter</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">factIter</span><span class="hljs-params">(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">factIter</span><span class="hljs-params">(<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>)</span></span><br></code></pre></td></tr></table></figure><p>代码：  </p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Iteration</span> &#123;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">factiorial</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> factIter(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">factIter</span><span class="hljs-params">(<span class="hljs-keyword">int</span> product, <span class="hljs-keyword">int</span> counter, <span class="hljs-keyword">int</span> maxCount)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (counter &gt; maxCount)&#123;<br>            <span class="hljs-keyword">return</span> product;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> factIter(counter*product,++counter,maxCount);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br>        System.out.<span class="hljs-built_in">println</span>(factiorial(<span class="hljs-number">3</span>));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="递归计算过程和递归过程的区别"><a href="#递归计算过程和递归过程的区别" class="headerlink" title="递归计算过程和递归过程的区别"></a>递归计算过程和递归过程的区别</h3><p>当我们说一个过程是递归的时候，论述的是一个语法形式上的事实，说明这个过程的定义中（直接或间接的）引用了该过程本身。再说某一计算过程具有某种格式时（例如线性递归），我们说的是这一计算过程的进展方式，而不是相应过程书写上的语法形式。<br>例如上个例子中说到的线性迭代，我们说这个递归过程将产生出一个迭代的计算过程，因为它的状态能由其中的三个状态变量完全刻画，解释器在执行这一计算过程时，只需要保持这三个变量的轨迹就足够了。  </p><h2 id="以斐波那契数列为例解释计算模式–树形递归"><a href="#以斐波那契数列为例解释计算模式–树形递归" class="headerlink" title="以斐波那契数列为例解释计算模式–树形递归"></a>以斐波那契数列为例解释计算模式–树形递归</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fibonacci</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> int <span class="hljs-function"><span class="hljs-title">fib</span>(<span class="hljs-params">int n</span>)</span>&#123;<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> fib(n-<span class="hljs-number">1</span>)+fib(n-<span class="hljs-number">2</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="计算fib-5-中的产生的树型递归计算过程"><a href="#计算fib-5-中的产生的树型递归计算过程" class="headerlink" title="计算fib(5)中的产生的树型递归计算过程"></a>计算fib(5)中的产生的树型递归计算过程</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache">                    <span class="hljs-attribute">fib</span>(<span class="hljs-number">5</span>)<br>     <span class="hljs-attribute">fib</span>(<span class="hljs-number">4</span>)          +            flib(<span class="hljs-number">3</span>)<br><span class="hljs-attribute">fib</span>(<span class="hljs-number">3</span>)     fib(<span class="hljs-number">2</span>)    +        fib(<span class="hljs-number">2</span>)fib(<span class="hljs-number">1</span>)<br><span class="hljs-attribute">fib</span>(<span class="hljs-number">2</span>)+<span class="hljs-number">1</span>  +  <span class="hljs-number">1</span>+<span class="hljs-number">0</span>     +          <span class="hljs-number">1</span>+<span class="hljs-number">0</span>  +   <span class="hljs-number">1</span><br><span class="hljs-attribute">1</span>+<span class="hljs-number">0</span>+   <span class="hljs-number">1</span> +   <span class="hljs-number">1</span>+<span class="hljs-number">0</span>     +          <span class="hljs-number">1</span>+<span class="hljs-number">0</span>  +   <span class="hljs-number">1</span><br><span class="hljs-attribute">5</span><br></code></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>树形递归计算模式的每层分裂为两个分支（除了最下面），反映出对fib过程的每个调用中两次递归调用自身的事实。<br>fib(n)的增长相对于n是指数级的，该过程所用的计算步骤数将随着输入增长而指数性地增长。  </p><h3 id="线性迭代实现"><a href="#线性迭代实现" class="headerlink" title="线性迭代实现"></a>线性迭代实现</h3><p>规划出计算斐波那契数列的迭代计算过程，其基本想法就是用一对整数a和b，将它们分别初始化为flib(1)=1</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IterFibonacci</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fib</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-title">fibIter</span><span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, n)</span></span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fibIter</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> count)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (count == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> b;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-title">fibIter</span><span class="hljs-params">(a + b, a, --count)</span></span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="树形递归和线性迭代实现比较"><a href="#树形递归和线性迭代实现比较" class="headerlink" title="树形递归和线性迭代实现比较"></a>树形递归和线性迭代实现比较</h3><p>这两种方法在计算中所需的步骤差异巨大–线性迭代方法相对于n为线性的，树型递归实现增长像fib(n)一样快，即使不大的输入也可能造成很大的差异。<br>当我们考虑的是在层次结构性的数据上操作，而不是对数操作时，将会发现树形递归计算过程是一种自然的、威力强大的工具。<br>以以斐波那契数列为例，虽然树形递归计算过程远比线性迭代低效，但它更直截了当。而要规划出迭代过程，则需要注意到，这一计算过程可以重新塑造为一个采用三个状态变量的迭代。  </p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java运行时数据区</title>
    <link href="/2021/01/07/2020-03-27-runtimeDataArea/"/>
    <url>/2021/01/07/2020-03-27-runtimeDataArea/</url>
    
    <content type="html"><![CDATA[<h2 id="Java运行时数据区"><a href="#Java运行时数据区" class="headerlink" title="Java运行时数据区"></a>Java运行时数据区</h2><h3 id="线程共享的数据区"><a href="#线程共享的数据区" class="headerlink" title="线程共享的数据区"></a>线程共享的数据区</h3><h4 id="方法区（非堆）–堆的一个逻辑部分"><a href="#方法区（非堆）–堆的一个逻辑部分" class="headerlink" title="方法区（非堆）–堆的一个逻辑部分"></a>方法区（非堆）–堆的一个逻辑部分</h4><p>存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等。  </p><ul><li>运行时常量池<br>运行时常量池是方法区的一部分，存放编译器生成的各种字面量与符号引用。  </li></ul><h4 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h4><p>存放对象实例和数组<br>可扩展：-Xmx和-Xms设定  </p><h3 id="线程隔离的数据区（线程私有的内存）"><a href="#线程隔离的数据区（线程私有的内存）" class="headerlink" title="线程隔离的数据区（线程私有的内存）"></a>线程隔离的数据区（线程私有的内存）</h3><h4 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h4><p>栈帧：局部变量表、操作数栈、动态连接、方法接口等。  </p><h4 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h4><p>和Java虚拟机栈类似，存取本地方法。<br>HotSpot虚拟机把本地方法栈和虚拟机栈合二为一。  </p><h4 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h4><p>程序计数器是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。<br>程序控制流的指示器。   </p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>AOP介绍</title>
    <link href="/2021/01/07/2020-03-28-aopIntroduce/"/>
    <url>/2021/01/07/2020-03-28-aopIntroduce/</url>
    
    <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="AOP中-Before-After-AfterThrowing-AfterReturning-的执行顺序"><a href="#AOP中-Before-After-AfterThrowing-AfterReturning-的执行顺序" class="headerlink" title="AOP中 @Before @After @AfterThrowing @AfterReturning 的执行顺序"></a>AOP中 @Before @After @AfterThrowing @AfterReturning 的执行顺序</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-keyword">Object</span> invoke(<span class="hljs-keyword">Object</span> proxy, Method method, <span class="hljs-keyword">Object</span>[] args) throws <span class="hljs-built_in">Throwable</span> &#123;<br>   <span class="hljs-keyword">Object</span> result;<br>   <span class="hljs-keyword">try</span> &#123;<br>       <span class="hljs-comment">//@Before</span><br>       result = method.invoke(target, args);<br>       <span class="hljs-comment">//@After</span><br>       <span class="hljs-keyword">return</span> result;<br>   &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>       <span class="hljs-built_in">Throwable</span> targetException = e.getTargetException();<br>       <span class="hljs-comment">//@AfterThrowing</span><br>       <span class="hljs-keyword">throw</span> targetException;<br>   &#125; <span class="hljs-keyword">finally</span> &#123;<br>       <span class="hljs-comment">//@AfterReturning</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Redis实现幂等性接口（Java语言实现）</title>
    <link href="/2021/01/07/2020-03-28-redisImplIdmpotent/"/>
    <url>/2021/01/07/2020-03-28-redisImplIdmpotent/</url>
    
    <content type="html"><![CDATA[<h2 id="基础准备"><a href="#基础准备" class="headerlink" title="基础准备"></a>基础准备</h2><h3 id="幂等性接口概念"><a href="#幂等性接口概念" class="headerlink" title="幂等性接口概念"></a>幂等性接口概念</h3><p>任意多次执行所产生的影响均与一次执行的影响相同。按照这个含义，最终的含义就是：对数据库的影响只能是一次性的，不能重复处理。  </p><h3 id="如何保证其幂等性，通常有以下手段："><a href="#如何保证其幂等性，通常有以下手段：" class="headerlink" title="如何保证其幂等性，通常有以下手段："></a>如何保证其幂等性，通常有以下手段：</h3><ol><li>数据库建立唯一性索引，可以保证最终插入数据库的只有一条数据    </li><li>token机制，每次接口请求前先获取一个token，然后再下次请求的时候在请求的header体中加上这个token，后台进行验证，如果验证通过删除token，下次请求再次判断token  </li><li>悲观锁或者乐观锁，悲观锁可以保证每次for update的时候其他sql无法update数据(在数据库引擎是innodb的时候,select的条件必须是唯一索引,防止锁全表)  </li><li>先查询后判断，首先通过查询数据库是否存在数据，如果存在证明已经请求过了，直接拒绝该请求，如果没有存在，就证明是第一次进来，直接放行。  </li></ol><h2 id="Redis实现幂等性接口"><a href="#Redis实现幂等性接口" class="headerlink" title="Redis实现幂等性接口"></a>Redis实现幂等性接口</h2><h3 id="搭建redis的服务Api"><a href="#搭建redis的服务Api" class="headerlink" title="搭建redis的服务Api"></a>搭建redis的服务Api</h3><ol><li>首先是搭建redis服务器。  </li><li>引入springboot中到的redis的stater，或者Spring封装的jedis也可以，后面主要用到的api就是它的set方法和exists方法,由于上篇Redis实现分布式锁时我们用的jedis，这里我们再尝试使用springboot的封装好的redisTemplate  </li></ol><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-params">&lt;dependency&gt;</span><br>    <span class="hljs-params">&lt;groupId&gt;</span>org.springframework.boot<span class="hljs-params">&lt;/groupId&gt;</span><br>    <span class="hljs-params">&lt;artifactId&gt;</span>spring-boot-starter-data-redis<span class="hljs-params">&lt;/artifactId&gt;</span><br><span class="hljs-params">&lt;/dependency&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>redisTemplate所需工具类及具体使用参照之前 SpringBoot中使用Redis 博文</li></ol><h3 id="自定义注解AutoIdempotent-自定义注解使用方式可以参照之前写过的-Java自定义注解-博文"><a href="#自定义注解AutoIdempotent-自定义注解使用方式可以参照之前写过的-Java自定义注解-博文" class="headerlink" title="自定义注解AutoIdempotent(自定义注解使用方式可以参照之前写过的 Java自定义注解 博文)"></a>自定义注解AutoIdempotent(自定义注解使用方式可以参照之前写过的 Java自定义注解 博文)</h3><p>自定义一个注解，定义此注解的主要目的是把它添加在需要实现幂等的方法上，凡是某个方法注解了它，都会实现自动幂等。后台利用反射如果扫描到这个注解，就会处理这个方法实现自动幂等，使用元注解ElementType.METHOD表示它只能放在方法上，etentionPolicy.RUNTIME表示它在运行时。   </p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Target</span>(&#123;ElementType.METHOD&#125;)<br><span class="hljs-variable">@Retention</span>(RetentionPolicy.RUNTIME)<br>public <span class="hljs-variable">@interface</span> AutoIdempotent &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="token创建和检验"><a href="#token创建和检验" class="headerlink" title="token创建和检验"></a>token创建和检验</h3><ol><li>token服务接口<br>我们新建一个接口，创建token服务，里面主要是两个方法，一个用来创建token，一个用来验证token。创建token主要产生的是一个字符串，检验token的话主要是传达request对象，为什么要传request对象呢？主要作用就是获取header里面的token,然后检验，通过抛出的Exception来获取具体的报错信息返回给前端。   </li></ol><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs zephir"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 幂等接口所需功能</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">TokenService</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建token</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    String createToken();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检验token</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">boolean</span> checkToken(HttpServletRequest request) throws <span class="hljs-keyword">Exception</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>token的服务实现类<br>token引用了redis服务，创建token采用随机算法工具类生成随机uuid字符串,然后放入到redis中(为了防止数据的冗余保留,这里设置过期时间为10000秒,具体可视业务而定)，如果放入成功，最后返回这个token值。checkToken方法就是从header中获取token到值(如果header中拿不到，就从paramter中获取)，如若不存在,直接抛出异常。这个异常信息可以被拦截器捕捉到，然后返回给前端。  </li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 幂等接口功能实现类</span><br><span class="hljs-comment"> */</span><br>@Service<br>public <span class="hljs-keyword">class</span> TokenServiceImpl implements TokenService &#123;<br><br><br>    @Autowired<br>    <span class="hljs-keyword">private</span> DataCache dataCache;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检验token</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param request</span><br><span class="hljs-comment">     * @return</span><br><span class="hljs-comment">     */</span><br>    @Override<br>    public boolean check<span class="hljs-constructor">Token(HttpServletRequest <span class="hljs-params">request</span>)</span> throws Exception &#123;<br>        String token = request.get<span class="hljs-constructor">Header(Constant.TOKEN_NAME)</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StrUtil</span>.</span></span>is<span class="hljs-constructor">Blank(<span class="hljs-params">token</span>)</span>) &#123;<br>            <span class="hljs-comment">// header中不存在tokenw</span><br>            token = request.get<span class="hljs-constructor">Parameter(Constant.TOKEN_NAME)</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StrUtil</span>.</span></span>is<span class="hljs-constructor">Blank(<span class="hljs-params">token</span>)</span>) &#123;<br>            <span class="hljs-comment">// parameter中也不存在token</span><br>                throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">Exception(<span class="hljs-string">&quot;parameter中也不存在token&quot;</span>)</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!dataCache.exists(token)) &#123;<br>            throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">Exception(<span class="hljs-string">&quot;找不到token&quot;</span>)</span>;<br>        &#125;<br>        boolean remove = dataCache.remove(token);<br>        <span class="hljs-keyword">if</span> (!remove) &#123;<br>            throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">Exception(<span class="hljs-string">&quot;redis错误&quot;</span>)</span>;<br>        &#125;<br>        return <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建token</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @return</span><br><span class="hljs-comment">     */</span><br>    @Override<br>    public String create<span class="hljs-constructor">Token()</span> &#123;<br>        String str = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UUID</span>.</span></span>random<span class="hljs-constructor">UUID()</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>;<br>        StringBuilder token = <span class="hljs-keyword">new</span> <span class="hljs-constructor">StringBuilder()</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            token.append(str);<br>            dataCache.set(token.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>, token.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>, <span class="hljs-number">10000L</span>);<br>            boolean notEmpty = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StrUtil</span>.</span></span>is<span class="hljs-constructor">NotBlank(<span class="hljs-params">token</span>.<span class="hljs-params">toString</span>()</span>);<br>            <span class="hljs-keyword">if</span> (notEmpty) &#123;<br>                return token.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>;<br>            &#125;<br><br>        &#125; catch (Exception ex) &#123;<br>            ex.print<span class="hljs-constructor">StackTrace()</span>;<br>        &#125;<br>        return null;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="拦截器的配置"><a href="#拦截器的配置" class="headerlink" title="拦截器的配置"></a>拦截器的配置</h3><ol><li>web配置类，实现WebMvcConfigurer，主要作用就是添加拦截器AutoIdempotentInterceptor到配置类中，这样我们到拦截器才能生效，注意使用@Configuration注解，这样在容器启动是时候就可以添加进入context中。   </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebConfiguration</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>&#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> AutoIdempotentInterceptor autoIdempotentInterceptor;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加拦截器</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> registry</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> </span>&#123;<br>        registry.addInterceptor(autoIdempotentInterceptor);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>拦截处理器：主要的功能是拦截扫描到AutoIdempotent注解的方法,然后调用tokenService的checkToken()方法校验token是否正确，如果捕捉到异常就将异常信息渲染成json返回给前端   </li></ol><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 幂等接口拦截器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AutoIdempotentInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> TokenService tokenService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 预处理</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> handler</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object <span class="hljs-keyword">handler</span>)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;走了AutoIdempotentInterceptor.preHandle&quot;</span>);<br>        <span class="hljs-keyword">if</span> (!(<span class="hljs-keyword">handler</span> <span class="hljs-keyword">instanceof</span> HandlerMethod)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        HandlerMethod handlerMethod = (HandlerMethod) <span class="hljs-keyword">handler</span>;<br>        Method method = handlerMethod.getMethod();<br>        <span class="hljs-comment">//被ApiIdempotment标记的扫描</span><br>        AutoIdempotent methodAnnotation = method.getAnnotation(AutoIdempotent.class);<br>        <span class="hljs-keyword">if</span> (methodAnnotation != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-function"><span class="hljs-keyword">return</span> tokenService.<span class="hljs-title">checkToken</span><span class="hljs-params">(request)</span></span>;<br>                <span class="hljs-comment">// 幂等性校验, 校验通过则放行, 校验失败则抛出异常, 并通过统一异常处理返回友好提示</span><br>            &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>                writeReturnJson(response, <span class="hljs-string">&quot;返回的json错误信息&quot;</span>);<br>                <span class="hljs-keyword">throw</span> ex;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//必须返回true,否则会被拦截一切请求</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回的json值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> json</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">writeReturnJson</span><span class="hljs-params">(HttpServletResponse response, String json)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        PrintWriter writer = <span class="hljs-keyword">null</span>;<br>        response.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        response.setContentType(<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            writer = response.getWriter();<br>            writer.print(json);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (writer != <span class="hljs-keyword">null</span>)<br>                writer.close();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object <span class="hljs-keyword">handler</span>, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object <span class="hljs-keyword">handler</span>, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><p>1、模拟业务请求类<br>首先我们需要通过/get/token路径通过getToken()方法去获取具体的token，然后我们调用test/Idempotence方法，这个方法上面注解了@AutoIdempotent，拦截器会拦截所有的请求，当判断到处理的方法上面有该注解的时候，就会调用TokenService中的checkToken()方法，如果捕获到异常会将异常抛出调用者。  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 幂等接口测试Controller</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BusinessController</span> </span>&#123;<br><br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> TokenService tokenService;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 幂等接口，必须携带token</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@AutoIdempotent</span><br>    <span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">&quot;/test/Idempotence&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">testIdempotence</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">String</span> businessResult = <span class="hljs-string">&quot;幂等接口&quot;</span>;<br>        <span class="hljs-keyword">if</span> (StrUtil.isNotBlank(businessResult)) &#123;<br>            <span class="hljs-keyword">return</span> businessResult;<br>        &#125;<br>        <span class="hljs-keyword">return</span> StrUtil.EMPTY;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取幂等接口所需token</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">&quot;/get/token&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getToken</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">String</span> token = tokenService.createToken();<br>        <span class="hljs-keyword">if</span> (StrUtil.isNotBlank(token)) &#123;<br>            <span class="hljs-keyword">return</span> token;<br>        &#125;<br>        <span class="hljs-keyword">return</span> StrUtil.EMPTY;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>介绍了使用springboot和拦截器、redis来优雅的实现接口幂等，对于幂等在实际的开发过程中是十分重要的，因为一个接口可能会被无数的客户端调用，如何保证其不影响后台的业务处理，如何保证其只影响数据一次是非常重要的，它可以防止产生脏数据或者乱数据，也可以减少并发量，实乃十分有益的一件事。而传统的做法是每次判断数据，这种做法不够智能化和自动化，比较麻烦。而今天的这种自动化处理也可以提升程序的伸缩性。  </p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Redis实现分布式锁（Java语言实现）</title>
    <link href="/2021/01/07/2020-03-28-redisImplLock/"/>
    <url>/2021/01/07/2020-03-28-redisImplLock/</url>
    
    <content type="html"><![CDATA[<h2 id="基础准备"><a href="#基础准备" class="headerlink" title="基础准备"></a>基础准备</h2><h3 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h3><p>Redis是一个Key-Value存储系统。   </p><h3 id="Redis命令参考"><a href="#Redis命令参考" class="headerlink" title="Redis命令参考"></a>Redis命令参考</h3><p><a href="http://redisdoc.com/">http://redisdoc.com</a>  </p><h2 id="使用set函数的NX参数实现分布式锁"><a href="#使用set函数的NX参数实现分布式锁" class="headerlink" title="使用set函数的NX参数实现分布式锁"></a>使用set函数的NX参数实现分布式锁</h2><p>对于java中想操作redis，好的方式是使用jedis，首先pom中引入依赖（使用Jedis 2.9.3版本）：   </p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="初始化Jedis"><a href="#初始化Jedis" class="headerlink" title="初始化Jedis"></a>初始化Jedis</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">JedisPool jedisPool;<br>JedisPoolConfig jedisPoolConfig = <span class="hljs-keyword">new</span> <span class="hljs-constructor">JedisPoolConfig()</span>;<br>String ip = <span class="hljs-string">&quot;127.0.0.1&quot;</span>;<br><span class="hljs-built_in">int</span> port = <span class="hljs-number">6379</span>;<br><span class="hljs-built_in">int</span> timeout = <span class="hljs-number">2000</span>;<br><br>public <span class="hljs-constructor">RedisLockUtils()</span> &#123;<br>    <span class="hljs-comment">// 初始化jedis</span><br>    <span class="hljs-comment">// 设置配置</span><br>    jedisPoolConfig.set<span class="hljs-constructor">MaxTotal(1024)</span>;<br>    jedisPoolConfig.set<span class="hljs-constructor">MaxIdle(100)</span>;<br>    jedisPoolConfig.set<span class="hljs-constructor">MaxWaitMillis(100)</span>;<br>    jedisPoolConfig.set<span class="hljs-constructor">TestOnBorrow(<span class="hljs-params">false</span>)</span>;<span class="hljs-comment">//jedis 第一次启动时，会报错</span><br>    jedisPoolConfig.set<span class="hljs-constructor">TestOnReturn(<span class="hljs-params">true</span>)</span>;<br>    <span class="hljs-comment">// 初始化JedisPool</span><br>    jedisPool = <span class="hljs-keyword">new</span> <span class="hljs-constructor">JedisPool(<span class="hljs-params">jedisPoolConfig</span>, <span class="hljs-params">ip</span>, <span class="hljs-params">port</span>, <span class="hljs-params">timeout</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="如何使用nx生成锁"><a href="#如何使用nx生成锁" class="headerlink" title="如何使用nx生成锁"></a>如何使用nx生成锁</h3><h4 id="创建锁的策略："><a href="#创建锁的策略：" class="headerlink" title="创建锁的策略："></a>创建锁的策略：</h4><p>redis的普通key一般都允许覆盖，A用户set某个key后，B在set相同的key时同样能成功，如果是锁场景，那就无法知道到底是哪个用户set成功的；这里jedis的setnx方式为我们解决了这个问题，简单原理是：当A用户先set成功了，那B用户set的时候就返回失败，满足了某个时间点只允许一个用户拿到锁。  </p><h4 id="锁过期时间："><a href="#锁过期时间：" class="headerlink" title="锁过期时间："></a>锁过期时间：</h4><p>某个抢购场景时候，如果没有过期的概念，当A用户生成了锁，但是后面的流程被阻塞了一直无法释放锁，那其他用户此时获取锁就会一直失败，无法完成抢购的活动；当然正常情况一般都不会阻塞，A用户流程会正常释放锁；过期时间只是为了更有保障。   </p><h4 id="注意点在于jedis的set方法，其参数的说明如下："><a href="#注意点在于jedis的set方法，其参数的说明如下：" class="headerlink" title="注意点在于jedis的set方法，其参数的说明如下："></a>注意点在于jedis的set方法，其参数的说明如下：</h4><p>NX：只在键不存在时，才对键进行设置操作。执行 SET key value NX 的效果等同于执行 SETNX key value 。<br>PX milliseconds：将键的过期时间设置为 milliseconds 毫秒。执行 SET key value PX milliseconds 的效果等同于执行 PSETEX key milliseconds value。<br>==下面是其他参数介绍==<br>XX：只在键已经存在时，才对键进行设置操作。<br>EX seconds：将键的过期时间设置为 seconds 秒。执行 SET key value EX seconds 的效果等同于执行 SETEX key seconds value 。  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-function"><span class="hljs-title">setnx</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> key, <span class="hljs-built_in">String</span> val</span>)</span> &#123;<br>    Jedis jedis = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        jedis = jedisPool.getResource();<br>        <span class="hljs-keyword">if</span> (jedis == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> jedis.set(key, val, <span class="hljs-string">&quot;NX&quot;</span>, <span class="hljs-string">&quot;PX&quot;</span>, <span class="hljs-number">10000</span> * <span class="hljs-number">60</span>).<br>                equalsIgnoreCase(<span class="hljs-string">&quot;ok&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (NullPointerException ex) &#123;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>        ex.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (jedis != <span class="hljs-literal">null</span>) &#123;<br>            jedis.close();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="如何删除锁"><a href="#如何删除锁" class="headerlink" title="如何删除锁"></a>如何删除锁</h3><p>上面是创建锁，同样的具有有效时间，但是我们不能完全依赖这个有效时间，场景如：有效时间设置1分钟，本身用户A获取锁后，没遇到什么特殊情况正常生成了抢购订单后，此时其他用户应该能正常下单了才对，但是由于有个1分钟后锁才能自动释放，那其他用户在这1分钟无法正常下单（因为锁还是A用户的），因此我们需要A用户操作完后，主动去解锁：<br>这里也使用了jedis方式，直接执行lua脚本：根据val判断其是否存在，如果存在就del；<br>其实个人认为通过jedis的get方式获取val后，然后再比较value是否是当前持有锁的用户，如果是那最后再删除，效果其实相当；只不过直接通过eval执行脚本，这样避免多一次操作了redis而已，缩短了原子操作的间隔。同样这里创建个get方式的api来测试：<br>注意的是delnx时，需要传递创建锁时的value，因为通过et的value与delnx的value来判断是否是持有锁的操作请求，只有value一样才允许del.<br>通过key和value删除指定键  </p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> delnx(<span class="hljs-keyword">String</span> <span class="hljs-built_in">key</span>, <span class="hljs-keyword">String</span> val) &#123;<br>    Jedis jedis = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        jedis = jedisPool.getResource();<br>        <span class="hljs-keyword">if</span> (jedis == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//if redis.call(&#x27;get&#x27;,&#x27;orderkey&#x27;)==&#x27;1111&#x27; then return redis.call(&#x27;del&#x27;,&#x27;orderkey&#x27;) else return 0 end</span><br>        StringBuilder sbScript = <span class="hljs-keyword">new</span> StringBuilder();<br>        sbScript.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;if redis.call(&#x27;get&#x27;,&#x27;&quot;</span>).<span class="hljs-built_in">append</span>(<span class="hljs-built_in">key</span>).<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;&#x27;)&quot;</span>).<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;==&#x27;&quot;</span>).<span class="hljs-built_in">append</span>(val).<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;&#x27;&quot;</span>).<br>                <span class="hljs-built_in">append</span>(<span class="hljs-string">&quot; then &quot;</span>).<br>                <span class="hljs-built_in">append</span>(<span class="hljs-string">&quot; return redis.call(&#x27;del&#x27;,&#x27;&quot;</span>).<span class="hljs-built_in">append</span>(<span class="hljs-built_in">key</span>).<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;&#x27;)&quot;</span>).<br>                <span class="hljs-built_in">append</span>(<span class="hljs-string">&quot; else &quot;</span>).<br>                <span class="hljs-built_in">append</span>(<span class="hljs-string">&quot; return 0&quot;</span>).<br>                <span class="hljs-built_in">append</span>(<span class="hljs-string">&quot; end&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> Integer.valueOf(jedis.eval(sbScript.toString()).toString());<br>    &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (jedis != <span class="hljs-keyword">null</span>) &#123;<br>            jedis.close();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="模拟抢单动作-10w个人开抢"><a href="#模拟抢单动作-10w个人开抢" class="headerlink" title="模拟抢单动作(10w个人开抢)"></a>模拟抢单动作(10w个人开抢)</h3><p>有了上面对分布式锁的粗略基础，我们模拟下10w人抢单的场景，其实就是一个并发操作请求而已，由于环境有限，只能如此测试；如下初始化10w个用户，并初始化库存，商品等信息.<br>有了上面10w个不同用户，我们设定商品只有10个库存，然后通过并行流的方式来模拟抢购<br>这里实现的逻辑是：<br>parallelStream()：并行流模拟多用户抢购<br>(startTime + timeout) &gt;= System.currentTimeMillis()：判断未抢成功的用户，timeout秒内继续获取锁<br>获取锁前和后都判断库存是否还足够<br>jedisCom.setnx(shangpingKey, b)：用户获取抢购锁<br>获取锁后并下单成功，最后释放锁：jedisCom.delnx(shangpingKey, b)  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//总库存</span><br><span class="hljs-keyword">private</span> long nKuCuen;<br><span class="hljs-comment">//商品key名字</span><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> shangpingKey = <span class="hljs-string">&quot;computer_key&quot;</span>;<br><span class="hljs-comment">//获取锁的超时时间 秒</span><br><span class="hljs-keyword">private</span> int timeout = <span class="hljs-number">30</span> * <span class="hljs-number">1000</span>;<br><span class="hljs-keyword">static</span> RedisLockUtils jedisCom = <span class="hljs-keyword">new</span> RedisLockUtils();<br><br><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/qiangdan&quot;</span>)<br><span class="hljs-keyword">public</span> List&lt;<span class="hljs-built_in">String</span>&gt; <span class="hljs-function"><span class="hljs-title">qiangdan</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">//抢到商品的用户</span><br>    List&lt;<span class="hljs-built_in">String</span>&gt; shopUsers = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>    <span class="hljs-comment">//构造很多用户</span><br>    List&lt;<span class="hljs-built_in">String</span>&gt; users = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    IntStream.range(<span class="hljs-number">0</span>, <span class="hljs-number">100000</span>)<span class="hljs-comment">/*.parallel()*/</span>.forEach(b -&gt; &#123;<br><span class="hljs-comment">//        IntStream.range(0, 100000).forEach(b -&gt; &#123;</span><br>        users.add(<span class="hljs-string">&quot;神牛-&quot;</span> + b);<br>    &#125;);<br>    <span class="hljs-comment">//初始化库存</span><br>    nKuCuen = <span class="hljs-number">10</span>;<br><br>    <span class="hljs-comment">//模拟开抢(parallelStream()：并行流模拟多用户抢购)</span><br>    users.parallelStream().forEach(b -&gt; &#123;<br>        <span class="hljs-built_in">String</span> shopUser = qiang(b);<br>        <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(shopUser)) &#123;<br>            shopUsers.add(shopUser);<br>        &#125;<br>    &#125;);<br><br>    <span class="hljs-keyword">return</span> shopUsers;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 模拟抢单动作</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-variable">b</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">qiang</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> b</span>)</span> &#123;<br>    <span class="hljs-comment">//用户开抢时间</span><br>    long startTime = System.currentTimeMillis();<br><br>    <span class="hljs-comment">//未抢到的情况下，30秒内继续获取锁</span><br>    <span class="hljs-keyword">while</span> ((startTime + timeout) &gt;= System.currentTimeMillis()) &#123;<br>        <span class="hljs-comment">//获取锁前和后都判断库存是否还足够</span><br>        <span class="hljs-comment">//商品是否剩余</span><br>        <span class="hljs-keyword">if</span> (nKuCuen &lt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (jedisCom.setnx(shangpingKey, b)) &#123;<br>            <span class="hljs-comment">//用户b拿到锁</span><br>            logger.info(<span class="hljs-string">&quot;用户&#123;&#125;拿到锁...&quot;</span>, b);<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">//商品是否剩余</span><br>                <span class="hljs-keyword">if</span> (nKuCuen &lt;= <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br><br>                <span class="hljs-comment">//模拟生成订单耗时操作，方便查看：神牛-50 多次获取锁记录</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br><br>                <span class="hljs-comment">//抢购成功，商品递减，记录用户</span><br>                nKuCuen -= <span class="hljs-number">1</span>;<br><br>                <span class="hljs-comment">//抢单成功跳出</span><br>                logger.info(<span class="hljs-string">&quot;用户&#123;&#125;抢单成功跳出...所剩库存：&#123;&#125;&quot;</span>, b, nKuCuen);<br><br>                <span class="hljs-keyword">return</span> b + <span class="hljs-string">&quot;抢单成功，所剩库存：&quot;</span> + nKuCuen;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                logger.info(<span class="hljs-string">&quot;用户&#123;&#125;释放锁...&quot;</span>, b);<br>                <span class="hljs-comment">//释放锁</span><br>                jedisCom.delnx(shangpingKey, b);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//用户b没拿到锁，在超时范围内继续请求锁，不需要处理</span><br>            <span class="hljs-comment">// logger.info(&quot;用户&#123;&#125;等待获取锁...&quot;, b);</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>谁说 HTTP GET 就不能通过 Body 来发送数据呢？</title>
    <link href="/2021/01/07/2020-03-30-getSendBody/"/>
    <url>/2021/01/07/2020-03-30-getSendBody/</url>
    
    <content type="html"><![CDATA[<h2 id="转载地址"><a href="#转载地址" class="headerlink" title="转载地址"></a>转载地址</h2><p><a href="https://yanbin.blog/why-http-get-cannot-sent-data-with-reuqest-body/">https://yanbin.blog/why-http-get-cannot-sent-data-with-reuqest-body/</a><br>当我们被问及 HTTP 的 GET 与 POST 两种请求方式的区别的时候，很多答案是说 GET 的数据须通过 URL 以 Query Parameter 来传送，而 POST 可以通过请求体来发送数据，所以因 URL 的受限，往往 GET 无法发送太多的字符。这个回答好比在启用了 HTTPS 时，GET 请求 URL 中的参数仍然是明文传输的一样。<br>GET 果真不能通过 Request Body 来传送数据吗？非也。如此想法多半是因循着网页中 form 的 method 属性只有 get 与 post 两种而来。因为把 form 的 method 设置为 post, 表单数据会放在 body 中，而 method 为 get(默认值) 时, 提交时浏览器会把表单中的字符拼接到 action 的 URL 后作为 query parameter 传送。于是乎就有了这么一种假像：HTTP GET 必须通过 URL 的查询参数来发送数据。<br>其实 HTTP 规范并未规定说 GET 就不能发送 body 数据，在 RFC GET 中只是说  </p><blockquote><p>The GET method means retrieve whatever information (in the form of an entity) is identified by the Request-URI.</p></blockquote><p>只是说 GET 意味着通过 URI 来识别资源。</p><p>我也是本着传统上对 GET 与 POST 区别的误解很多年，今天突然意识到 GET 应该可以使用 body, 况且 HTTP 本身是一个纯文本的协议。没有测试就没有 100% 的发言权，所以做了如下的测试。</p><p>在 rfc7231 中对 GET 的说明明确了  </p><blockquote><p>A payload within a GET request message has no defined semantics;<br>sending a payload body on a GET request might cause some existing<br>implementations to reject the request.  </p></blockquote><h2 id="四种常见的-POST-提交数据方式"><a href="#四种常见的-POST-提交数据方式" class="headerlink" title="四种常见的 POST 提交数据方式"></a>四种常见的 POST 提交数据方式</h2><p>转载自： <a href="https://imququ.com/post/four-ways-to-post-data-in-http.html">https://imququ.com/post/four-ways-to-post-data-in-http.html</a>  </p><p>HTTP/1.1 协议规定的 HTTP 请求方法有 OPTIONS、GET、HEAD、POST、PUT、DELETE、TRACE、CONNECT 这几种。其中 POST 一般用来向服务端提交数据，本文主要讨论 POST 提交数据的几种方式。<br>我们知道，HTTP 协议是以 ASCII 码传输，建立在 TCP/IP 协议之上的应用层规范。规范把 HTTP 请求分为三个部分：请求行、请求头、消息主体。类似于下面这样：  </p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">&lt;<span class="hljs-function"><span class="hljs-keyword">method</span>&gt; &lt;<span class="hljs-title">request</span>-<span class="hljs-title">URL</span>&gt; &lt;<span class="hljs-title">version</span>&gt;</span><br><span class="hljs-function">&lt;<span class="hljs-title">headers</span>&gt;</span><br><span class="hljs-function"></span><br><span class="hljs-function">&lt;<span class="hljs-title">entity</span>-<span class="hljs-title">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>协议规定 POST 提交的数据必须放在消息主体（entity-body）中，但协议并没有规定数据必须使用什么编码方式。实际上，开发者完全可以自己决定消息主体的格式，只要最后发送的 HTTP 请求满足上面的格式就可以。<br>但是，数据发送出去，还要服务端解析成功才有意义。一般服务端语言如 php、python 等，以及它们的 framework，都内置了自动解析常见数据格式的功能。服务端通常是根据请求头（headers）中的 Content-Type 字段来获知请求中的消息主体是用何种方式编码，再对主体进行解析。所以说到 POST 提交数据方案，包含了 Content-Type 和消息主体编码方式两部分。下面就正式开始介绍它们。  </p><ul><li>application/x-www-form-urlencoded<br>这应该是最常见的 POST 提交数据的方式了。浏览器的原生 <form> 表单，如果不设置 enctype 属性，那么最终就会以 application/x-www-form-urlencoded 方式提交数据。请求类似于下面这样（无关的请求头在本文中都省略掉了）：  </li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs"><span class="hljs-keyword">POST</span> <span class="hljs-string">http://www.example.com</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded;charset=utf-8<br><br>title=test&amp;sub%5B%5D=1&amp;sub%5B%5D=2&amp;sub%5B%5D=3<br></code></pre></td></tr></table></figure><p>首先，Content-Type 被指定为 application/x-www-form-urlencoded；其次，提交的数据按照 key1=val1&amp;key2=val2 的方式进行编码，key 和 val 都进行了 URL 转码。大部分服务端语言都对这种方式有很好的支持。   </p><ul><li>multipart/form-data<br>这又是一个常见的 POST 数据提交的方式。我们使用表单上传文件时，必须让 <form> 表单的 enctype 等于 multipart/form-data。   </li><li>application/json<br>application/json 这个 Content-Type 作为响应头大家肯定不陌生。实际上，现在越来越多的人把它作为请求头，用来告诉服务端消息主体是序列化后的 JSON 字符串。由于 JSON 规范的流行，除了低版本 IE 之外的各大浏览器都原生支持 JSON.stringify，服务端语言也都有处理 JSON 的函数，使用 JSON 不会遇上什么麻烦。<br>JSON 格式支持比键值对复杂得多的结构化数据，这一点也很有用。<br>这种方案，可以方便的提交复杂的结构化数据，特别适合 RESTful 的接口。各大抓包工具如 Chrome 自带的开发者工具、Firebug、Fiddler，都会以树形结构展示 JSON 数据，非常友好。  </li><li>text/xml<br>它是一种使用 HTTP 作为传输协议，XML 作为编码方式的远程调用规范。典型的 XML-RPC 请求是这样的：</li></ul><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml">POST http://www.example.com HTTP/1.1 </span><br><span class="xml">Content-Type: text/xml</span><br><br><span class="xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">methodCall</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">methodName</span>&gt;</span>examples.getStateName<span class="hljs-tag">&lt;/<span class="hljs-name">methodName</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">params</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">param</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i4</span>&gt;</span>41<span class="hljs-tag">&lt;/<span class="hljs-name">i4</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">param</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">params</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">methodCall</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="在一个-Spring-Boot-Web-项目中创建的-GET-请求-API"><a href="#在一个-Spring-Boot-Web-项目中创建的-GET-请求-API" class="headerlink" title="在一个 Spring Boot Web 项目中创建的 GET 请求 API"></a>在一个 Spring Boot Web 项目中创建的 GET 请求 API</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">&quot;/getSendBody&quot;</span>, method = RequestMethod.GET)<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getRequest</span>(<span class="hljs-params"><span class="hljs-meta">@RequestParam</span>(<span class="hljs-string">&quot;id&quot;</span>) <span class="hljs-built_in">String</span> id,<span class="hljs-meta">@RequestBody</span> Person body</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> id+<span class="hljs-string">&quot;|&quot;</span>+body.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Person实体类</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Data</span><br><span class="hljs-variable">@ToString</span><br>public class Person implements Serializable &#123;<br>    <span class="hljs-selector-tag">private</span> <span class="hljs-selector-tag">Integer</span> <span class="hljs-selector-tag">age</span>;<br>    <span class="hljs-selector-tag">private</span> <span class="hljs-selector-tag">String</span> <span class="hljs-selector-tag">name</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Postman测试"><a href="#Postman测试" class="headerlink" title="Postman测试"></a>Postman测试</h3><p>路径：<a href="http://localhost:8080/getSendBody?id=123">http://localhost:8080/getSendBody?id=123</a><br>选择Postman中body，选择raw，选择JSON，输入如下：</p><blockquote><p>{“name”:”Raines”}</p></blockquote><p>返回</p><blockquote><p>123|Person(age=null, name=Raines)</p></blockquote><h3 id="curl测试"><a href="#curl测试" class="headerlink" title="curl测试"></a>curl测试</h3><p>命令行输入命令：  </p><blockquote><p>curl -v -X GET -H ‘Content-Type: application/json’ <a href="http://127.0.0.1:8080/getSendBody/?id%5C=123">http://127.0.0.1:8080/getSendBody\?id\=123</a> -d ‘{“name”:”sd”}’</p></blockquote><p>返回   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plain">*   Trying 127.0.0.1...<br>* TCP_NODELAY set<br>* Connected to 127.0.0.1 (127.0.0.1) port 8080 (#0)<br>&gt; GET &#x2F;getSendBody?id&#x3D;123 HTTP&#x2F;1.1<br>&gt; Host: 127.0.0.1:8080<br>&gt; User-Agent: curl&#x2F;7.64.1<br>&gt; Accept: *&#x2F;*<br>&gt; Content-Type: application&#x2F;json<br>&gt; Content-Length: 13<br>&gt;<br>* upload completely sent off: 13 out of 13 bytes<br>&lt; HTTP&#x2F;1.1 200<br>&lt; Content-Type: text&#x2F;plain;charset&#x3D;UTF-8<br>&lt; Content-Length: 59<br>&lt; Date: Mon, 30 Mar 2020 02:48:51 GMT<br>&lt;<br>* Connection #0 to host 127.0.0.1 left intact<br>123|Person(age&#x3D;null, name&#x3D;sd)* Closing connection 0<br></code></pre></td></tr></table></figure><h4 id="curl参数解释"><a href="#curl参数解释" class="headerlink" title="curl参数解释"></a>curl参数解释</h4><ul><li>-v    可以看到详细的请求响应数据，请求头的 Content-Length 都是 13, 即 {“name”:”sd”} 的长度，它们确实是在 Request Body 中，服务端接送 GET 来的 body 数据也没有半点问题。  </li><li>-X GET    指定 request 请求方式  </li><li>-H    ‘key:value’指定请求头 header 键值对</li><li>-d/–data <data>  HTTP POST方式传送数据</li></ul><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>curl 命令, 需要用 -X 指定为 GET 请求，否则 curl 在使用 -d 发送 body 数据时自动切换为 POST 请求</p><h2 id="HTTP-规范链接"><a href="#HTTP-规范链接" class="headerlink" title="HTTP 规范链接"></a>HTTP 规范链接</h2><p><a href="https://tools.ietf.org/html/rfc7235">https://tools.ietf.org/html/rfc7235</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然 GET 请求可以通过 body 发送数据，但并不推荐通过body传参。</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>递归介绍(二）：换零钱方式的统计--树形递归</title>
    <link href="/2021/01/07/2020-03-30-swapMoneyCount/"/>
    <url>/2021/01/07/2020-03-30-swapMoneyCount/</url>
    
    <content type="html"><![CDATA[<h2 id="实例：换零钱方式的统计"><a href="#实例：换零钱方式的统计" class="headerlink" title="实例：换零钱方式的统计"></a>实例：换零钱方式的统计</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>给了50美分、25美分、10美分、5美分、1美分的硬币，将1美元换成零钱，一共有多少种不同方式？给定了任意数量的现金，写一个程序，计算出所有换零钱方式的种数。  </p><h3 id="思考过程"><a href="#思考过程" class="headerlink" title="思考过程"></a>思考过程</h3><p>假定我们所考虑的可用硬币类型种类排了某种顺序，于是有了下面的关系：<br>将总数为a的现金换成n种硬币的不同方法的数目等于：  </p><blockquote><p>将现金数a换成除第一种硬币之外的所有其他硬币的不同方式数目，加上  将现金数a-d换成所有种类的硬币的不同方式数目，其中的d是第一种硬币的币值。  </p></blockquote><p>显然，换成零钱的全部方式的数目，就等于完全不用第一种硬币的方式的数目，加上用了第一种硬币的换零钱方式的数目。而后一个数目也就等于去掉一个第一种硬币值后，剩下的现金数的换零钱方式数目。<br>这样就把将某个给定现金数的换零钱的方式的问题，递归的规约为对更少现金数或者更少种类硬币的同一个问题。利用上面的规则写出一个算法来：    </p><blockquote><p>如果a就是0，应该算作是有1种换零钱的方式。<br>如果a小于0，应该算作是有0种换零钱的方式。<br>如果n是0，应该算作是有0种换零钱的方式。  </p></blockquote><h3 id="根据书中scheme代码重写为Java"><a href="#根据书中scheme代码重写为Java" class="headerlink" title="根据书中scheme代码重写为Java"></a>根据书中scheme代码重写为Java</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 换零钱方式的统计</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> raines</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SwapMoneyCount</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">countChange</span><span class="hljs-params">(<span class="hljs-keyword">int</span> amount)</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-title">cc</span><span class="hljs-params">(amount, <span class="hljs-number">5</span>)</span></span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 计算有多少种换零钱的方式</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> amount       钱数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> kindsOfCoins 可用的硬币种数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 换零钱方式的总数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">cc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> amount, <span class="hljs-keyword">int</span> kindsOfCoins)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (amount == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-function"><span class="hljs-keyword">else</span> <span class="hljs-title">if</span> <span class="hljs-params">(amount &lt; <span class="hljs-number">0</span> || kindsOfCoins == <span class="hljs-number">0</span>)</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> cc(amount, kindsOfCoins - <span class="hljs-number">1</span>) + cc(amount - firstDenomination(kindsOfCoins), kindsOfCoins);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 以可用的硬币种数作为输入，返回第一种硬币的币值，默认硬币已经从最大到最小排序好了</span><br><span class="hljs-comment">     * 1美元 = 100美分</span><br><span class="hljs-comment">     * 硬币种数：50、25、10、5、1美分</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> kindsOfCoins 可用的硬币种数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 每种硬币的面值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">firstDenomination</span><span class="hljs-params">(<span class="hljs-keyword">int</span> kindsOfCoins)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (kindsOfCoins == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-function"><span class="hljs-keyword">else</span> <span class="hljs-title">if</span> <span class="hljs-params">(kindsOfCoins == <span class="hljs-number">2</span>)</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">5</span>;<br>        &#125; <span class="hljs-function"><span class="hljs-keyword">else</span> <span class="hljs-title">if</span> <span class="hljs-params">(kindsOfCoins == <span class="hljs-number">3</span>)</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>        &#125; <span class="hljs-function"><span class="hljs-keyword">else</span> <span class="hljs-title">if</span> <span class="hljs-params">(kindsOfCoins == <span class="hljs-number">4</span>)</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">25</span>;<br>        &#125; <span class="hljs-function"><span class="hljs-keyword">else</span> <span class="hljs-title">if</span> <span class="hljs-params">(kindsOfCoins == <span class="hljs-number">5</span>)</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">50</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/01/07/2020-03-30-whyLearnComputerScience/"/>
    <url>/2021/01/07/2020-03-30-whyLearnComputerScience/</url>
    
    <content type="html"><![CDATA[<h2 id="转载地址"><a href="#转载地址" class="headerlink" title="转载地址"></a>转载地址</h2><p><a href="https://teachyourselfcs.com/">https://teachyourselfcs.com/</a><br>中文翻译地址<br><a href="https://github.com/keithnull/TeachYourselfCS-CN/blob/master/TeachYourselfCS-CN.md">https://github.com/keithnull/TeachYourselfCS-CN/blob/master/TeachYourselfCS-CN.md</a>  </p><h2 id="先挖个坑，以后再补"><a href="#先挖个坑，以后再补" class="headerlink" title="先挖个坑，以后再补"></a>先挖个坑，以后再补</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins使用</title>
    <link href="/2021/01/07/2020-04-02-Jenkins/"/>
    <url>/2021/01/07/2020-04-02-Jenkins/</url>
    
    <content type="html"><![CDATA[<h2 id="Docker-Jenkins从入门到放弃"><a href="#Docker-Jenkins从入门到放弃" class="headerlink" title="Docker+Jenkins从入门到放弃"></a>Docker+Jenkins从入门到放弃</h2><ol><li>手动安装docker<br><a href="https://www.cnblogs.com/hellxz/p/11044012.html">https://www.cnblogs.com/hellxz/p/11044012.html</a>   </li><li>Docker镜像源修改<br><a href="https://blog.csdn.net/jixuju/article/details/80158493">https://blog.csdn.net/jixuju/article/details/80158493</a>  </li><li>运行jenkins  </li></ol><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs livescript">docker run <span class="hljs-string">\</span><br>  -u root <span class="hljs-string">\</span><br>  --rm <span class="hljs-string">\</span><br>  -d <span class="hljs-string">\</span><br>  -p <span class="hljs-number">12345</span>:<span class="hljs-number">8080</span> <span class="hljs-string">\</span><br>  -p <span class="hljs-number">50000</span>:<span class="hljs-number">50000</span> <span class="hljs-string">\</span><br>  -v jenkins-data:/<span class="hljs-keyword">var</span>/jenkins_home <span class="hljs-string">\</span><br>  -v /<span class="hljs-keyword">var</span>/run/docker.sock:/<span class="hljs-keyword">var</span>/run/docker.sock <span class="hljs-string">\</span><br>  jenkinsci/blueocean<br></code></pre></td></tr></table></figure><p>参数介绍<br>–rm   关闭时自动删除Docker容器<br>-d     在后台运行容器（即“分离”模式）并输出容器ID。如果您不指定此选项， 则在终端窗口中输出正在运行的此容器的Docker日志。<br>-p 12345:8000   容器的端口8080到主机上的端口8080。 第一个数字代表主机上的端口，而最后一个代表容器的端口。<br>-v jenkins-data:/var/jenkins_home   注意: 所述的 jenkins-data 卷也可以 docker volume create命令创建： docker volume create jenkins-data 代替映射 /var/jenkins_home 目录转换为Docker卷，还 可以将此目录映射到计算机本地文件系统上的目录。 例如，指定该选项 -v $HOME/jenkins:/var/jenkins_home 会将容器的 /var/jenkins_home 目录映射 到 本地计算机上目录中的 jenkins 子目录， 该$HOME目录通常是 /Users/<your-username>/jenkins 或 <code>/home/&lt;your-username&gt;/jenkins</code>  。</p><ol start="4"><li>进入docker容器(查看docker中jenkins administrator密码)  </li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker exec -it jenkins-blueoceanId bash<br>```  <br>离开容器：<span class="hljs-keyword">exit</span>  <br><span class="hljs-number">5</span>. 查看日志  <br><br></code></pre></td></tr></table></figure><p>docker logs jenkins-blueoceanId</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">6</span>. 注意挂载目录授权  <br>sudo chown -R <span class="hljs-number">1000</span> <span class="hljs-regexp">/var/</span>jenkins_home   <br>启动：  <br>-v命令进行挂载，其中冒号前面的是本机的目录，将本机的javahome和mavenhome的路径，挂载到Jenkins容器上，冒号后面是容器上的目录，可以写跟本机目录相同。  <br>这样启动后就本地的容器中<span class="hljs-regexp">/var/</span>jenkins_home目录下的内容就会存入本机的<span class="hljs-regexp">/var/</span>jenkins_home下，密码也可以从这个目录下获取而不用进入容器内部。  <br><br><span class="hljs-number">7</span>. 放弃  <br>乱七八槽的授权与配置，算了，还是简单来吧。  <br><br><span class="hljs-comment">## Centos7 使用 Jenkins（以下为测试环境玩一下，切不可直接上手生产环境） </span><br><span class="hljs-number">1</span>. centos 使用 yum 安装 jenkins    <br>https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/loveyouyou616/</span>p/<span class="hljs-number">8714544</span>.html  <br><span class="hljs-number">2</span>. jdk 安装  <br><span class="hljs-number">3</span>. maven 安装  <br>jdk和maven安装都类似，例如maven，下载 *-bin.tar.gz文件，解压；在linux环境中创建maven目录，<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/maven，将maven安装包上传至此目录中；配置环境变量 vi /</span>etc/profile :将下面这两行代码拷贝到文件末尾并保存   <br><br></code></pre></td></tr></table></figure><p>MAVEN_HOME=/usr/local/maven/apache-maven-3.6.1<br>export PATH=${MAVEN_HOME}/bin:${PATH}</p><pre><code>重载环境变量: source /etc/profile  查看结果: mvn –v  其他（非必须）： 可以考虑替换maven源 vim /usr/local/maven/apache-maven-3.6.1/conf/settings.xml  4. 主页面选择 Manage Jenkins，选择 Global Tool Configuration，配置jdk、maven (如果使用git需要配置git环境)  5. 主页面选择 New Item，选择 Freestyle project，OK。    选中 Source Code Management，填写 git/svn 配置  以maven为例，逻辑是先干掉现在运行的项目，然后打包，然后启动打包成功后的项目。  Build -&gt; Add build step，选择 shell（路径是当前workspace里项目名下的路径为起点） 和 maven targets（选择第4步配置的maven版本，输入打包命令clean install -e -DskipTests）   可能需要的配置：  Discard old builds  丢弃旧版本   注意【坑】： 按照第5步的逻辑来，可能出现Jenkins启动打包成功后发现执行脚本运行了，但是jar没有启动，原因是Jenkins又杀死了启动的jar。需要配置 Jenkins 参数为 dontKillMe   This project is parameterized -&gt; Add parameter -&gt; String parameter，设置name为BUILD_ID，默认值为dontKillMe。   6. 回到项目页面，Build/Build with parameters 执行就可以啦  总结：若遇到 Jenkins 没有权限执行某些命令（ https://www.cnblogs.com/vana/p/8707651.html）   粗糙解决方案：修改jenkins执行用户，重启Jenkins。  ## 创建项目本地部署### General- 勾选 Discard old builds   - 勾选 This project is parameterized （不要自己 kill 掉自己）Add Parameter -&gt; String Parameter     添加内容：    Name:BUILD_ID    Default Value    :dontKillMe  ### Source Code Management- Git  Repository URL: git地址  Credentials： 用户名密码- Branch Specifier (blank for &#39;any&#39;)   选择分支，例如 develop 分支则输入：   */develop  ### Build- Add build step -&gt; Execute shell   运行 shell 脚本，比如杀死项目jar包，重新部署   - Add build step -&gt; invoke top-level Maven targets   选择 Maven Version（此前要配置maven）   - Add build step -&gt; Execute shell    运行项目开启 shell 脚本    ## 创建项目远程部署### General- 勾选 Discard old builds  - 勾选 This project is parameterized （不要自己 kill 掉自己）    Add Parameter -&gt; String Parameter      添加内容：     Name:BUILD_ID     Default Value    :dontKillMe  ### Source Code Management- Git    Repository URL: git地址    Credentials： 用户名密码  - Branch Specifier (blank for &#39;any&#39;)       选择分支，例如 develop 分支则输入：   */develop  ### Build Environment- 勾选 Send files or execute commands over SSH after the build runs -&gt; Add Server    填写 SSH Publishers -&gt; SSH Server    1) 选择 Name（远程服务器）    2) 添加 Transfers    Add Transfer Set        Source files：需要传输的文件或文件夹，如 Lovol-iot-farm-web/ 或 provider-pro.sh       Remote directory：远程服务器目标路径，如 /farmJar     Exec command： 执行命令（例如执行 shell 脚本）  ### Build- Add build step -&gt; invoke top-level Maven targets    选择 Maven Version（此前要配置maven）  </code></pre>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>用高阶函数做抽象</title>
    <link href="/2021/01/07/2020-04-07-highFunction/"/>
    <url>/2021/01/07/2020-04-07-highFunction/</url>
    
    <content type="html"><![CDATA[<h2 id="以计算数值为例"><a href="#以计算数值为例" class="headerlink" title="以计算数值为例"></a>以计算数值为例</h2><h3 id="定义过程计算数值"><a href="#定义过程计算数值" class="headerlink" title="定义过程计算数值"></a>定义过程计算数值</h3><p>定义过程，做某些行为的封装</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> SumCount &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 计算从a到b各整数之和</span><br><span class="hljs-comment">     */</span><br>    public <span class="hljs-built_in">int</span> sum<span class="hljs-constructor">Integers(<span class="hljs-params">int</span> <span class="hljs-params">a</span>, <span class="hljs-params">int</span> <span class="hljs-params">b</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (a &gt; b) return <span class="hljs-number">0</span>;<br>        return a + sum<span class="hljs-constructor">Integers(<span class="hljs-params">a</span> + 1, <span class="hljs-params">b</span>)</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 计算给定范围内(a-b)整数的立方之和</span><br><span class="hljs-comment">     */</span><br>    public <span class="hljs-built_in">int</span> sum<span class="hljs-constructor">Cubes(<span class="hljs-params">int</span> <span class="hljs-params">a</span>, <span class="hljs-params">int</span> <span class="hljs-params">b</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (a &gt; b) return <span class="hljs-number">0</span>;<br>        return cube(a) + sum<span class="hljs-constructor">Cubes(<span class="hljs-params">a</span> + 1, <span class="hljs-params">b</span>)</span>;<br>    &#125;<br><br>    public double pi<span class="hljs-constructor">Sum(<span class="hljs-params">int</span> <span class="hljs-params">a</span>, <span class="hljs-params">int</span> <span class="hljs-params">b</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (a &gt; b) return <span class="hljs-number">0</span>;<br>        return <span class="hljs-number">1.0</span><span class="hljs-operator"> / </span>(a<span class="hljs-operator"> * </span>(a + <span class="hljs-number">2</span>)) + pi<span class="hljs-constructor">Sum(<span class="hljs-params">a</span> + 4, <span class="hljs-params">b</span>)</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 计算x的立方</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> cube(<span class="hljs-built_in">int</span> x) &#123;<br>        return x<span class="hljs-operator"> * </span>x<span class="hljs-operator"> * </span>x;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="用高阶函数做抽象计算数值（过程作为参数或过程作为返回值）"><a href="#用高阶函数做抽象计算数值（过程作为参数或过程作为返回值）" class="headerlink" title="用高阶函数做抽象计算数值（过程作为参数或过程作为返回值）"></a>用高阶函数做抽象计算数值（过程作为参数或过程作为返回值）</h3><p>将过程作为参数传递，能够显著增强我们的程序语言的表达能力。<br>sum方法：为公共的模式命名，建立抽象，而后直接在抽象的层次上进行工作。<br>以过程作为参数，或者以过程作为返回值，这类能操作过程的过程称为高阶过程。  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> NewSumCount &#123;<br>    <br>    private static <span class="hljs-type">int</span> sum(<span class="hljs-keyword">Method</span> term, <span class="hljs-type">Integer</span> a, <span class="hljs-keyword">Method</span> next, <span class="hljs-type">Integer</span> b) throws InvocationTargetException, IllegalAccessException &#123;<br>        <span class="hljs-keyword">if</span> (a &gt; b) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-type">Integer</span>) term.invoke(<span class="hljs-type">Integer</span>.<span class="hljs-keyword">class</span>, a) + sum(term, (<span class="hljs-type">Integer</span>) next.invoke(<span class="hljs-type">Integer</span>.<span class="hljs-keyword">class</span>, a), next, b);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 计算从a到b各整数之和</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">int</span> sumIntegers(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b) throws <span class="hljs-keyword">Exception</span> &#123;<br>        <span class="hljs-keyword">return</span> sum(NewSumCount.<span class="hljs-keyword">class</span>.getDeclaredMethod(&quot;identity&quot;, <span class="hljs-type">Integer</span>.<span class="hljs-keyword">class</span>), a, NewSumCount.<span class="hljs-keyword">class</span>.getDeclaredMethod(&quot;inc&quot;, <span class="hljs-type">Integer</span>.<span class="hljs-keyword">class</span>), b);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 计算从a到b各整数的立方和</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">int</span> sumCubes(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b) throws <span class="hljs-keyword">Exception</span> &#123;<br>        <span class="hljs-keyword">return</span> sum(NewSumCount.<span class="hljs-keyword">class</span>.getDeclaredMethod(&quot;cube&quot;, <span class="hljs-type">Integer</span>.<span class="hljs-keyword">class</span>), a, NewSumCount.<span class="hljs-keyword">class</span>.getDeclaredMethod(&quot;inc&quot;, <span class="hljs-type">Integer</span>.<span class="hljs-keyword">class</span>), b);<br>    &#125;<br><br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) throws <span class="hljs-keyword">Exception</span> &#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(sumIntegers(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>));<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(sumCubes(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 计算x的立方</span><br><span class="hljs-comment">     */</span><br>    private static <span class="hljs-type">int</span> <span class="hljs-keyword">cube</span>(<span class="hljs-type">Integer</span> x) &#123;<br>        <span class="hljs-keyword">return</span> x * x * x;<br>    &#125;<br><br>    private static <span class="hljs-type">int</span> <span class="hljs-keyword">identity</span>(<span class="hljs-type">Integer</span> x) &#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br><br>    private static <span class="hljs-type">int</span> inc(<span class="hljs-type">Integer</span> a) &#123;<br>        <span class="hljs-keyword">return</span> a + <span class="hljs-number">1</span>;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>个人简历</title>
    <link href="/2021/01/07/2020-01-13-resume/"/>
    <url>/2021/01/07/2020-01-13-resume/</url>
    
    <content type="html"><![CDATA[<h2 id="基本资料"><a href="#基本资料" class="headerlink" title="基本资料"></a>基本资料</h2><ul><li>姓名：刘晓龙 </li><li>性别：男  </li><li>电子邮箱：<a href="mailto:&#114;&#x75;&#121;&#x69;&#108;&#x69;&#117;&#x63;&#x68;&#105;&#108;&#x64;&#64;&#x67;&#109;&#x61;&#105;&#108;&#46;&#x63;&#111;&#x6d;">&#114;&#x75;&#121;&#x69;&#108;&#x69;&#117;&#x63;&#x68;&#105;&#108;&#x64;&#64;&#x67;&#109;&#x61;&#105;&#108;&#46;&#x63;&#111;&#x6d;</a></li></ul><h2 id="技能"><a href="#技能" class="headerlink" title="技能"></a>技能</h2><ol><li>非常熟练使用Java编程语言，IntelliJ IDEA工具，深入理解OOP编程思想；</li><li>非常熟练搭建和使用SpringBoot+SpringCloud+MybatisPlus(SpringdataJPA)等开源框架来进行JavaWeb开发，熟悉微服务架构，熟悉Spring底层源码及实现；</li><li>熟练使用JaveScript，Ajax，jQuery等前台开发技术，熟练使用和进一步封装常用的js插件；</li><li>熟练使用git/svn，maven/gradle命令来进行项目管理和项目构建，熟练使用禅道来进行项目开发管控；</li><li>熟练使用Linux，熟练编写shell脚本，拥抱开源，有个人博客网站作为平时开发经验的分享；</li><li>熟悉MySQL关系型数据库，熟悉分库分表技术，掌握SQL语言，熟悉redis缓存技术的使用；</li><li>熟悉消息中间件Rabbitmq使用，有大型高并发网站设计经验，能根据业务需求选择合适的稳定技术；</li><li>良好的表达与沟通能力，能快速融入团队，积极主动，对工作尽心尽责；</li><li>熟练使用draw.io绘制流程图和脑图，使用网易云笔记来做团队间技能分享；</li><li>熟练使用python编程语言，熟练搭建django框架来进行pythonWeb开发；</li><li>熟悉爬虫技术，熟练使用python和java进行网站信息的爬取。</li></ol><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><h3 id="TMS"><a href="#TMS" class="headerlink" title="TMS"></a>TMS</h3><h4 id="项目描述："><a href="#项目描述：" class="headerlink" title="项目描述："></a>项目描述：</h4><p>运输管理系统（Transportation Management System，TMS）是一套基于运输作业流程的管理系统，该系统以系统管理、信息管理、运输作业、财务管理四大线索设计开发。<br>系统管理是TMS系统的技术后台，起到支持系统高效运转的作用；信息管理是通过对企业的客户信息、车辆信息、人员信息、货物信息的管理，建立运输决策的知识库，也起到促进企业整体运营更加优化的作用；运输作业是该管理系统的核心，系统通过对运输任务的订单处理、调度配载、运输状态跟踪，确定任务的执行状况；财务管理是伴随着运输任务发生的应收应付费用，通过对应收应付的管理及运输任务对应的收支的核算，生成实时全面的统计报表，能够有效地促进运输决策。</p><h4 id="技术及框架："><a href="#技术及框架：" class="headerlink" title="技术及框架："></a>技术及框架：</h4><p>JavaScript+Jquery+BootStrap<br>SpringBoot+SpringCloud+SpringDataJPA+Redis+Jsoup+easypoi+Quartz<br>MySQL+Mycat<br>Git+Maven<br>Centos+shell脚本  </p><h4 id="责任描述："><a href="#责任描述：" class="headerlink" title="责任描述："></a>责任描述：</h4><ol><li>系统需求分析，搭建微服务架构开发环境,放入码云使用git进行版本控制  </li><li>爬虫爬取全国行政区域:根据甲方反应行政区域更新不及时及难以维护的问题进行解决.物流行业对行政区域极为敏感,鉴于维护耗时耗力,采用爬虫爬取国家行政区域的方法解决问题</li><li>系统整体问题的统一解决:<br>(1). 现spring提供的定时任务调度无法在系统崩溃重启后进行之前保存的定时任务,根据此问题作出相应的解决方案;<br>(2). 系统启动时必要缓存的统一刷新;<br>(3). Java事件的监听<br>(4). 测试发现搜索等功能通过前台影响后台sql,springdatajpa框架封装的部分方法无法进行安全检测,根据测试问题统一解决.  </li><li>编写shell脚本,方便版本升级及测试</li><li>根据架构师分解的模块通过禅道给开发分配具体任务</li><li>带新员工熟悉项目及开发日常问题的解决<h3 id="OMS"><a href="#OMS" class="headerlink" title="OMS"></a>OMS</h3></li></ol><h3 id="IDEA禅道插件"><a href="#IDEA禅道插件" class="headerlink" title="IDEA禅道插件"></a>IDEA禅道插件</h3><h4 id="项目描述：-1"><a href="#项目描述：-1" class="headerlink" title="项目描述："></a>项目描述：</h4><p>编写此插件主要是为了方便开发人员使用禅道来做任务管理和Bug处理,禅道为开源项目。<br><a href="https://gitee.com/herolxl/zentao">此项目为开源项目</a></p><h4 id="技术及框架：-1"><a href="#技术及框架：-1" class="headerlink" title="技术及框架："></a>技术及框架：</h4><p>Java+jsoup+fastjson+datepicker<br>禅道<br>Intellij IDEA</p><h4 id="责任描述"><a href="#责任描述" class="headerlink" title="责任描述:"></a>责任描述:</h4><ol><li>使用爬虫来获取禅道的基本信息,开发人员的当前任务和当前Bug</li><li>对用户账号密码的保存及用户的持续保持登录</li><li>通过爬虫来进行任务的新增,开始,暂停,继续,取消</li><li>通过爬虫来进行Bug的开始,完成,驳回</li></ol>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>1月阅读计划</title>
    <link href="/2021/01/07/2020-01-01-booksPlan1/"/>
    <url>/2021/01/07/2020-01-01-booksPlan1/</url>
    
    <content type="html"><![CDATA[<p>也就突然觉得，把阅读计划记录下来，不至于追忆往事，只剩唏嘘，对已有益，对人无害，利大于弊。</p><p>新年新气象，阅读需要立个flag：<br>除了某本书不值得再读下去，否则一本书的再次阅读的时间间隔不要超过3天；<br>不同时阅读超过3本书（不包括相似性及高的技术性书籍）。</p><h2 id="已完成"><a href="#已完成" class="headerlink" title="已完成"></a>已完成</h2><h3 id="《软技能：代码之外的生存指南》"><a href="#《软技能：代码之外的生存指南》" class="headerlink" title="《软技能：代码之外的生存指南》"></a><a href="./softSkills">《软技能：代码之外的生存指南》</a></h3><h3 id="《我们内心的冲突》"><a href="#《我们内心的冲突》" class="headerlink" title="《我们内心的冲突》"></a><a href="./heartClash">《我们内心的冲突》</a></h3><h3 id="医生最想最想让你做的事"><a href="#医生最想最想让你做的事" class="headerlink" title="医生最想最想让你做的事"></a><a href="./docterAdvice">医生最想最想让你做的事</a></h3><h3 id="有钱人和你想的不一样"><a href="#有钱人和你想的不一样" class="headerlink" title="有钱人和你想的不一样"></a><a href="./haveMoneyThink">有钱人和你想的不一样</a></h3><h2 id="预读书籍："><a href="#预读书籍：" class="headerlink" title="预读书籍："></a>预读书籍：</h2><p>《HeadFirst设计模式》</p><p>《反脆弱》：反脆弱去年读过一次，前几天看一个博主的读书笔记，觉得反脆弱的内容忘的差不多了，需要重读一下。</p><p>《决断力:如何在生活与工作中做出更好的选择》：上月读了一段，后来开始读《财务自由之路》中断了《决断力》的阅读，这本书的观念对我影响很大。不清楚是作者还是译者的原因，有的名词介绍的比较模糊，不适合初学者明白。等读完后再分享一下自己的见解。</p><p>《财务自由之路II》：看完财务自由之路I后，感触还是颇深的，不过我们也要针对于国情和自身情况来做具体分析，读书切不可盲目崇拜作者或全盘相信作者。与作者观点相悖的无非五种原因：一个思想境界没有达到作者的高度；二是作者的二是道不同不相为谋；三是客观环境的不同而要懂得变通；四是作者的观点随着发展有了比其更优秀的解决方案；五是作者为了扩大影响力或某些其它原因而故意写的某些片段或某些情况没有明显对读者全盘托出的情况。如果是第五种情况，需要读者有自己坚定的价值观，需要读者有甄别是非虚幻的能力，所谓取其精华去其糟粕吧。</p><p>《沉思录》：沉思录也是去年没有阅读完的书籍。</p><p>《财务自由之路III》：还是抽时间把这一系列都读完吧，不然如鲠在喉，难受极了。</p><p>《人生十二法则》：这本书上月没有读完。其中的字句还是很一针见血的，并不是来回打太极。</p><p>《鲁迅全集》：少年时鲁迅是两个可怕的大字，一学到鲁迅的文章，必然是有背诵的片段，必然是重点学习的文章。到后来，鲁迅先生竟成了一个漠不相干的人，慢慢的没有了先生的音讯，慢慢的几近于忘却了先生。然，先生确是万万不能忘却的。忘却了先生，就逃避了劣根性；忘却了先生，就无法医愚，无法医愚，也就没有了半点血气和自尊，也就遁入吃人的深渊。鲁迅先生的书籍像一面镜子，这面镜子照亮你的内外，劝诸位有则改之，无则加勉。</p><p>《怪诞行为学》：人类真的是理性的动物吗？在看这本书之前我觉得人不一定是理性的，但是一定是趋利避害的，一定是选择最利于自己的（暂不考虑民族大义和爱国主义）。但是最后的选择究竟是不是理性的，是不是真的是最利于自己的，这个则取决于个人的习惯和自身的认知水平。希望看完本书后能有新的认知。</p><p>《焦虑日志》</p><p>《史记》：史家之绝唱，无韵之离骚。</p><p>《有限与无限的游戏》</p><p>《批判性思维》</p><p>《高效能人士的七个习惯》</p><p>《情感敲诈》</p><p>《原生家庭》</p><p>《冷暴力》</p><p>《错不在我》</p><p>《可爱的诅咒》</p><p>《我们内心的冲突》</p><p>《思考致富》</p><h3 id="《有限与无限的游戏》：https-book-douban-com-subject-25742296"><a href="#《有限与无限的游戏》：https-book-douban-com-subject-25742296" class="headerlink" title="《有限与无限的游戏》：https://book.douban.com/subject/25742296/"></a>《有限与无限的游戏》：<a href="https://book.douban.com/subject/25742296/">https://book.douban.com/subject/25742296/</a></h3><h2 id="1-3"><a href="#1-3" class="headerlink" title="1/3"></a>1/3</h2><h3 id="《我们内心的冲突》：https-book-douban-com-subject-33298549"><a href="#《我们内心的冲突》：https-book-douban-com-subject-33298549" class="headerlink" title="《我们内心的冲突》：https://book.douban.com/subject/33298549/"></a>《我们内心的冲突》：<a href="https://book.douban.com/subject/33298549/">https://book.douban.com/subject/33298549/</a></h3><p>你必须透过千篇一律的标签，去识别内心深处的自己。</p><h3 id="《怪诞行为学》："><a href="#《怪诞行为学》：" class="headerlink" title="《怪诞行为学》："></a>《怪诞行为学》：</h3><h3 id="《决断力》：https-book-douban-com-subject-25744065"><a href="#《决断力》：https-book-douban-com-subject-25744065" class="headerlink" title="《决断力》：https://book.douban.com/subject/25744065/"></a>《决断力》：<a href="https://book.douban.com/subject/25744065/">https://book.douban.com/subject/25744065/</a></h3><h2 id="实读书籍"><a href="#实读书籍" class="headerlink" title="实读书籍"></a>实读书籍</h2><h3 id="《软技能：代码之外的生存指南》-1"><a href="#《软技能：代码之外的生存指南》-1" class="headerlink" title="《软技能：代码之外的生存指南》"></a>《软技能：代码之外的生存指南》</h3><h3 id="《史记》"><a href="#《史记》" class="headerlink" title="《史记》"></a>《史记》</h3><h3 id="《医生最想最想让你做的事》"><a href="#《医生最想最想让你做的事》" class="headerlink" title="《医生最想最想让你做的事》"></a>《医生最想最想让你做的事》</h3>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Spark环境搭建及helloCount</title>
    <link href="/2021/01/07/2020-03-08-spark/"/>
    <url>/2021/01/07/2020-03-08-spark/</url>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><h3 id="centos"><a href="#centos" class="headerlink" title="centos"></a>centos</h3><h4 id="查看centos版本"><a href="#查看centos版本" class="headerlink" title="查看centos版本"></a>查看centos版本</h4><p>rpm -q centos-release  </p><h4 id="更换centos默认镜像库"><a href="#更换centos默认镜像库" class="headerlink" title="更换centos默认镜像库"></a>更换centos默认镜像库</h4><p>163链接[<a href="http://mirrors.163.com/.help/centos.html]">http://mirrors.163.com/.help/centos.html]</a>  </p><ol><li>首先备份/etc/yum.repos.d/CentOS-Base.repo  </li></ol><pre><code>mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</code></pre><ol start="2"><li>下载对应版本repo文件, 放入/etc/yum.repos.d/(操作前请做好相应备份)</li><li> 运行以下命令生成缓存  </li></ol><pre><code>yum clean allyum makecache</code></pre><h3 id="linux-CentOS-安装rz和sz命令-lrzsz"><a href="#linux-CentOS-安装rz和sz命令-lrzsz" class="headerlink" title="linux CentOS 安装rz和sz命令 lrzsz"></a>linux CentOS 安装rz和sz命令 lrzsz</h3><ul><li><p>lrzsz在linux里可代替ftp上传和下载。  </p></li><li><p>lrzsz是一个unix通信套件提供的X，Y，和ZModem文件传输协议  </p><h4 id="yum安装"><a href="#yum安装" class="headerlink" title="yum安装"></a>yum安装</h4><p>yum -y install lrzsz   </p><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><p>上传文件，执行命令rz，会跳出文件选择窗口，选择好文件，点击确认即可。</p><p>  rz<br>下载文件，执行命令sz</p><p>  sz 文件名</p></li></ul><h3 id="Spark环境搭建"><a href="#Spark环境搭建" class="headerlink" title="Spark环境搭建"></a>Spark环境搭建</h3><h4 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h4><ol><li>卸掉默认的jdk版本<br>得到目前jdk的版本<br>rpm -qa|grep jdk<br>删除<br>yum -y remove java java-1.7.0-openjdk-headless-1.7.0.51-2.4.5.5.el7.x86_64  </li><li>下载jdk包<br>tar -xvzf jdk-8u121-linux-x64.tar.gz<br>解压好之后，创建个软连接，方便以后更改版本<br>ln -sf /spark/jdk1.8.0_121/ /usr/local/jdk  </li></ol><ul><li>ln -sf用法<br>b—&gt;a<br>ln -sf a b<br>b指向a  </li></ul><h4 id="scala"><a href="#scala" class="headerlink" title="scala"></a>scala</h4><p>ln -sf /spark/scala-2.10.4/ /usr/local/scala   </p><h4 id="spark"><a href="#spark" class="headerlink" title="spark"></a>spark</h4><p>ln -sf /spark/spark-1.6.3-bin-hadoop2.6/ /usr/local/spark-bin-hadoop  </p><h4 id="添加到全局变量"><a href="#添加到全局变量" class="headerlink" title="添加到全局变量"></a>添加到全局变量</h4><ol><li>vi /etc/profile  </li><li>添加路径到文件：<br>export JAVA_HOME=/usr/local/jdk<br>export SCALA_HOME=/usr/local/scala<br>export SPARK_HOME=/usr/local/spark-bin-hadoop<br>export PATH=.:${JAVA_HOME}/bin:${SCALA_HOME}/bin:${SPARK_HOME}/bin:$PATH  </li><li>即时生效<br>source /etc/profile  </li><li>查看版本号<br>java -version<br>scala -version  </li></ol><h4 id="yum安装maven"><a href="#yum安装maven" class="headerlink" title="yum安装maven"></a>yum安装maven</h4><p>yum install maven  </p><ol><li>查看maven版本，并查询maven地址，修改一下maven的中央仓库镜像地址（spark下载速度，你懂得）<br>mvn -version</li><li>修改mirrors节点，添加阿里云的镜像地址</li></ol><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>保存一下。</p><h2 id="启动spark服务"><a href="#启动spark服务" class="headerlink" title="启动spark服务"></a>启动spark服务</h2><ol><li>回到spark安装根目录，进入conf文件夹，修改配置文件<br>cp spark-env.sh.template spark-env.sh<br>vi spark-env.sh.template<br>再开头添加环境<br>export JAVA_HOME=/usr/local/jdk<br>export SCALA_HOME=/usr/local/scala  </li><li>回到spark根目录<br>sbin/start-master.sh </li><li>在主机网页输入地址<a href="http://yourip:8080/">http://yourip:8080/</a> 访问,如果访问不到，说明虚拟机的防火墙打开了，这里要关掉<br>service firewalld stop   </li><li>启动worker<br>bin/spark-class org.apache.spark.deploy.worker.Worker spark://localhost.localdomain:7077  </li></ol><p>【错误解决方案】  </p><pre><code>Failed to connect to master localhost.localdomain:</code></pre><p>添加master启动参数，修改了Master的启动方法<br>./sbin/start-master.sh -h master_ip<br>成功启动后，可以通过<a href="http://master_ip:8080/%E8%BF%9E%E6%8E%A5%E5%88%B0Master%E7%9A%84UI%EF%BC%8C%E5%B9%B6%E5%9C%A8%E9%A1%B5%E9%9D%A2%E4%B8%AD%E6%89%BE%E5%88%B0URL%E4%B8%BAspark://master_ip:7077%E3%80%82%E6%B3%A8%E6%84%8F%E8%BF%99%E9%87%8C%E7%9A%84URL%E5%B7%B2%E7%BB%8F%E7%94%B1spark://host_name:7077%E5%8F%98%E4%B8%BAspark://master_ip:7077%E3%80%82">http://master_ip:8080/连接到Master的UI，并在页面中找到URL为spark://master_ip:7077。注意这里的URL已经由spark://host_name:7077变为spark://master_ip:7077。</a><br>然后，通过如下命令，成功启动了Slave！<br>./sbin/start-slave.sh spark://master_ip:7077<br>用-h参数启动Master，连接到Master的UI，确保URL是spark://master_ip:7077，而非spark://host_name:7077。这样Slave连接Master的问题不会再出现。  </p><h2 id="提交任务给spark"><a href="#提交任务给spark" class="headerlink" title="提交任务给spark"></a>提交任务给spark</h2><p>进入spa安装根目录  </p><ol><li>新建opt/目录，存放要解析的文本  </li><li>运行命令，成功的话统计结果会输出在屏幕上<br>bin/spark-submit –master spark://yourip:7077 –class WorldCount /spark/sparkDemo/target/spark.jar-1.0-SNAPSHOT.jar</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>说实话，想一个spark与java程序彻底打通一直觉得没啥费事的，真是年少气盛，说起来容易做起来难的事情太多。  </p><ul><li>环境部署的要正确，版本号要统一  </li><li>spark启动的顺序<br>sbin/start-master.sh # 启动服务<br>bin/spark-class org.apache.spark.deploy.worker.Worker spark://localhost.localdomain:7077 # 启动worker<br>bin/spark-submit –master spark://localhost.localdomain:7077 –class WorldCount /usr/local/code/target/spark.jar-1.0-SNAPSHOT.jar # 提交任务  </li><li>碰到错误的步骤<br>查看是否是之前操作有误<br>查看是否是历史环境或操作有误<br>查看是否是配置文件有误<br>多维思考问题，报错的信息可能不是错误的根本原因<br>尝试修改错误时一定要记得自己做的操作，成功则知道自己做的啥成功，失败则可以回退。  </li></ul><h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><p>感谢冬天只爱早晨的省路[<a href="https://www.jianshu.com/p/52d0f043cc04?from=singlemessage%5D">https://www.jianshu.com/p/52d0f043cc04?from=singlemessage]</a><br>感谢谢东演唱的笑脸，陪伴我成功打通第一个java与spark程序。<br>不知不觉中跟唱：书上说有情人千里能共婵娟，可是我现在只想把你手儿牵，听说过许多山盟海誓的表演，突然想看看你曾经纯真的笑脸。  </p><h2 id="修改hosts文件"><a href="#修改hosts文件" class="headerlink" title="修改hosts文件"></a>修改hosts文件</h2><p>/etc/hosts<br>/etc/sysconfig/network  </p><ul><li>配置完执行刷新 systemctl restart network  </li><li>验证<br>hostname<br>hostname -i  </li></ul>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java中对象占用内存大小计算</title>
    <link href="/2021/01/07/2020-03-07-memoryCount/"/>
    <url>/2021/01/07/2020-03-07-memoryCount/</url>
    
    <content type="html"><![CDATA[<h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><h3 id="byte与bit"><a href="#byte与bit" class="headerlink" title="byte与bit"></a>byte与bit</h3><h4 id="1个字节占8位"><a href="#1个字节占8位" class="headerlink" title="1个字节占8位"></a>1个字节占8位</h4><h4 id="bit：位，比特。信息的最小单位，二进制数中的一个位数-二进制位-，其值为“0”或“1”；"><a href="#bit：位，比特。信息的最小单位，二进制数中的一个位数-二进制位-，其值为“0”或“1”；" class="headerlink" title="bit：位，比特。信息的最小单位，二进制数中的一个位数(二进制位)，其值为“0”或“1”；"></a>bit：位，比特。信息的最小单位，二进制数中的一个位数(二进制位)，其值为“0”或“1”；</h4><h4 id="byte-字节。计算机文件大小的基本计算单位"><a href="#byte-字节。计算机文件大小的基本计算单位" class="headerlink" title="byte: 字节。计算机文件大小的基本计算单位"></a>byte: 字节。计算机文件大小的基本计算单位</h4><ul><li>原码：正数本身，负数，正数对应的二进制最高位为1(负)。  </li><li>反码：正数本身，负数，符号位不变，其余各位取反。  </li><li>补码：正数本身，负数：反码+1。  </li><li>0的反码、补码都为零。  </li></ul><h3 id="注意-Java中的char占两个字节，而c语言中char占一个字节"><a href="#注意-Java中的char占两个字节，而c语言中char占一个字节" class="headerlink" title="注意:Java中的char占两个字节，而c语言中char占一个字节"></a>注意:Java中的char占两个字节，而c语言中char占一个字节</h3><h2 id="Java中对象占用内存大小"><a href="#Java中对象占用内存大小" class="headerlink" title="Java中对象占用内存大小"></a>Java中对象占用内存大小</h2><h3 id="对象的组成"><a href="#对象的组成" class="headerlink" title="对象的组成"></a>对象的组成</h3><h4 id="Java对象实例、数组实例"><a href="#Java对象实例、数组实例" class="headerlink" title="Java对象实例、数组实例"></a>Java对象实例、数组实例</h4><ul><li>对象头(Header)<br>用于存储对象自身的运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等，这部分数据的长度在32位和64位的虚拟机（未开启压缩指针）中分别为32bit和64bit，官方称它为”Mark Word”。  </li><li>实例数据(Instance Data)<br>对象真正存储的有效信息，也是在程序代码中所定义的各种类型的字段内容。无论是从父类继承下来的，还是在子类中定义的，都需要记录起来。  </li><li>对齐填充(Padding)<br>第三部分对齐填充并不是必然存在的，也没有特别的含义，它仅仅起着占位符的作用。由于HotSpot VM的自动内存管理系统要求对象起始地址必须是8字节的整数倍，换句话说，就是对象的大小必须是8字节的整数倍。而对象头部分正好是8字节的倍数（1倍或者2倍），因此，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。<br>HotSpot的对齐方式为8字节对齐：  </li></ul><pre><code>(Header + Instance Data + Paddding) % 8 = 0 并且 0 &lt;= padding &lt; 8</code></pre><h4 id="具体大小"><a href="#具体大小" class="headerlink" title="具体大小"></a>具体大小</h4><pre><code>名称(单位byte)    32位    64位    开启指针压缩后(指针对64位有效且默认开启)对象头(Header)    8    16    12数组对象头    12    24    16引用(reference)    4    8    4</code></pre><ul><li>开启指针压缩指令-XX:+UseCompressedOops,关闭指令-XX:-UseCompressedOops,只在64位才有效且默认开启；  </li><li>数组对象头比普通对象多了个数组长度；  </li></ul><h2 id="使用Jprofile实战"><a href="#使用Jprofile实战" class="headerlink" title="使用Jprofile实战"></a>使用Jprofile实战</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>JDK：</p><pre><code>java version &quot;1.8.0_201&quot;Java(TM) SE Runtime Environment (build 1.8.0_201-b09)Java HotSpot(TM) 64-Bit Server VM (build 25.201-b09, mixed mode)</code></pre><p>Jprofile11</p><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><ul><li><p>Shallow Size<br>对象自身占用的内存大小，不包括它引用的对象。  </p><ul><li>针对非数组类型的对象，它的大小就是对象与它所有的成员变量大小的总和。当然这里面还会包括一些java语言特性的数据存储单元。  </li><li>针对数组类型的对象，它的大小是数组元素对象的大小总和。  </li></ul></li><li><p>Retained Size<br>Retained Size=当前对象大小+当前对象可直接或间接引用到的对象的大小总和。(间接引用的含义：A-&gt;B-&gt;C, C就是间接引用)</p></li></ul><h3 id="查看对象内存占用"><a href="#查看对象内存占用" class="headerlink" title="查看对象内存占用"></a>查看对象内存占用</h3><p>Heap Walker -&gt; references</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><h4 id="一"><a href="#一" class="headerlink" title="一"></a>一</h4><pre><code>public class A &#123;    private int i;    public static void main(String[] args) throws InterruptedException &#123;        A a = new A();        Thread.sleep(1000 * 1000);        System.out.println(a);    &#125;&#125;</code></pre><p>分析: 64位下默认开启指针压缩，对象头位12byte, i4byte,此时12 + 4 = 16 可以整除8，所以padding=0,最终<br>12(header) + 4(instance data)+0(padding)=16byte<br>如果我们关掉指针压缩<br>16(header) + 4(instance data)+4(padding)=24byte<br>16+4=20，不能整除8，需要再加上4  </p><h4 id="二"><a href="#二" class="headerlink" title="二"></a>二</h4><pre><code>public class B &#123;   private int i = 5;   private Integer ii = 128;   public static void main(String[] args) throws InterruptedException &#123;      B b = new B();      Thread.sleep(1000 * 1000);      System.out.println(b);   &#125;&#125;</code></pre><p>开启指针压缩，计算内存大小<br>Shallow Size： 12(B Header) + 4 (i instance) + 4 (ii reference) + 4(padding) = 24bytes<br>Retained Size: 12(B Header) + 4 (i instance) + 4 (ii reference) + (12(ii header) + 4(instance)+ 0(padding)) + 4(padding) = 40bytes  </p><h4 id="三"><a href="#三" class="headerlink" title="三"></a>三</h4><pre><code>public class C &#123;   private int i;   private char[] cc;   public C() &#123;      i = 5;      cc = new char[]&#123;&#39;a&#39;, &#39;b&#39;, &#39;c&#39;&#125;;   &#125;   public static void main(String[] args) throws InterruptedException &#123;      C c = new C();      Thread.sleep(1000 * 1000);      System.out.println(c);   &#125;&#125;</code></pre><p>多了数组，注意数组自己本身的padding<br>Shallow Size： 12(C Header) + 4 (i instance) + 4 (cc reference) + 4(padding) = 24bytes<br>Retained Size: 12(C Header) + 4 (i instance) + 4 (cc reference) + (16(cc header) + 2(instance) * 3+ 2(padding)) + 4(padding) = 48bytes  </p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机进制计算</title>
    <link href="/2021/01/07/2020-03-06-computerCount/"/>
    <url>/2021/01/07/2020-03-06-computerCount/</url>
    
    <content type="html"><![CDATA[<h2 id="Java基本数据类型"><a href="#Java基本数据类型" class="headerlink" title="Java基本数据类型"></a>Java基本数据类型</h2><p>Java语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。  </p><h3 id="byte："><a href="#byte：" class="headerlink" title="byte："></a>byte：</h3><ul><li>byte 数据类型是8位、有符号的，以二进制补码表示的整数；  </li><li>最小值是 -128（-2^7）；  </li><li>最大值是 127（2^7-1）；  </li><li>默认值是 0；  </li><li>byte 类型用在大型数组中节约空间，主要代替整数，因为 byte 变量占用的空间只有 int 类型的四分之一；  </li><li>例子：byte a = 100，byte b = -50。  </li></ul><h3 id="short："><a href="#short：" class="headerlink" title="short："></a>short：</h3><ul><li>short 数据类型是 16 位、有符号的以二进制补码表示的整数    </li><li>最小值是 -32768（-2^15）；    </li><li>最大值是 32767（2^15 - 1）；  </li><li>Short 数据类型也可以像 byte 那样节省空间。一个short变量是int型变量所占空间的二分之一；  </li><li>默认值是 0；  </li><li>例子：short s = 1000，short r = -20000。  </li></ul><h3 id="int："><a href="#int：" class="headerlink" title="int："></a>int：</h3><ul><li>int 数据类型是32位、有符号的以二进制补码表示的整数；  </li><li>最小值是 -2,147,483,648（-2^31）；  </li><li>最大值是 2,147,483,647（2^31 - 1）；  </li><li>一般地整型变量默认为 int 类型；  </li><li>默认值是 0 ；  </li><li>例子：int a = 100000, int b = -200000。  </li></ul><h3 id="long："><a href="#long：" class="headerlink" title="long："></a>long：</h3><ul><li>long 数据类型是 64 位、有符号的以二进制补码表示的整数；  </li><li>最小值是 -9,223,372,036,854,775,808（-2^63）；  </li><li>最大值是 9,223,372,036,854,775,807（2^63 -1）；  </li><li>这种类型主要使用在需要比较大整数的系统上；  </li><li>默认值是 0L；  </li><li>例子： long a = 100000L，Long b = -200000L。  </li><li>“L”理论上不分大小写，但是若写成”l”容易与数字”1”混淆，不容易分辩。所以最好大写。  </li></ul><h3 id="float："><a href="#float：" class="headerlink" title="float："></a>float：</h3><ul><li>float 数据类型是单精度、32位、符合IEEE 754标准的浮点数；  </li><li>float 在储存大型浮点数组的时候可节省内存空间；  </li><li>默认值是 0.0f；  </li><li>浮点数不能用来表示精确的值，如货币；  </li><li>例子：float f1 = 234.5f。  </li></ul><h3 id="double："><a href="#double：" class="headerlink" title="double："></a>double：</h3><ul><li>double 数据类型是双精度、64 位、符合IEEE 754标准的浮点数；  </li><li>浮点数的默认类型为double类型；   </li><li>double类型同样不能表示精确的值，如货币；  </li><li>默认值是 0.0d；  </li><li>例子：double d1 = 123.4。</li></ul><h3 id="boolean："><a href="#boolean：" class="headerlink" title="boolean："></a>boolean：</h3><ul><li>boolean数据类型表示一位的信息；  </li><li>只有两个取值：true 和 false；  </li><li>这种类型只作为一种标志来记录 true/false 情况；  </li><li>默认值是 false；  </li><li>例子：boolean one = true。  </li></ul><h3 id="char："><a href="#char：" class="headerlink" title="char："></a>char：</h3><ul><li>char类型是一个单一的 16 位 Unicode 字符；  </li><li>最小值是 \u0000（即为0）；  </li><li>最大值是 \uffff（即为65,535）；  </li><li>char 数据类型可以储存任何字符；  </li><li>例子：char letter = ‘A’;。  </li></ul><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><h3 id="原码、反码、补码"><a href="#原码、反码、补码" class="headerlink" title="原码、反码、补码"></a>原码、反码、补码</h3><ul><li>正数的反码补码都是原码。  </li><li>有符号位数从左到右第一位为符号位，1表示负数符号位，0表示正数符号位。  </li><li>正数的原码符号位设为1，为负数原码。  </li><li>负数的反码是原码符号位不变，其余位取反，补码为反码+1。  </li><li>计算机中处理是以补码进行加法计算，原码进行显示。  </li><li>1位占8个字节，Java中第一位为符号位，剩余七位为数值位。  </li><li>计算机存储有符号的整数是都是存储它们的补码。Java语言都是有符号位的。  </li></ul><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><ol><li>与运算符<br>与运算符用符号“&amp;”表示，其使用规律如下：<br>两个操作数中位都为1，结果才为1，否则结果为0。  </li><li>或运算符<br>或运算符用符号“|”表示，其运算规律如下：<br>两个位只要有一个为1，那么结果就是1，否则就为0。  </li><li>非运算符<br>非运算符用符号“~”表示，其运算规律如下：<br>如果位为0，结果是1，如果位为1，结果是0。  </li><li>异或运算符<br>异或运算符是用符号“^”表示的，其运算规律是：<br>两个操作数的位中，相同则结果为0，不同则结果为1。  </li><li>移位运算  </li></ol><h2 id="Java中高位转低位溢出的计算过程"><a href="#Java中高位转低位溢出的计算过程" class="headerlink" title="Java中高位转低位溢出的计算过程"></a>Java中高位转低位溢出的计算过程</h2><h3 id="代码（以byte为例）"><a href="#代码（以byte为例）" class="headerlink" title="代码（以byte为例）"></a>代码（以byte为例）</h3><pre><code>System.out.println((byte) 129);System.out.println((byte) -129);System.out.println(&quot;~b2: &quot; + ~10);</code></pre><p>结果是：</p><pre><code>-127127~b2: -11</code></pre><h3 id="运算过程"><a href="#运算过程" class="headerlink" title="运算过程"></a>运算过程</h3><h4 id="byte-129"><a href="#byte-129" class="headerlink" title="(byte) 129"></a>(byte) 129</h4><p>129二进制：<br>00000000 00000000 00000000 10000001<br>补码：<br>00000000 00000000 00000000 10000001<br>由于byte只占1字节即8位，截取8位为：<br>10000001<br>此时最高位为1即负数，该二进制减1即是反码<br>反码：10000000<br>原码：11111111<br>即-127，所以(byte)129的结果就是-127  </p><h4 id="byte-129-1"><a href="#byte-129-1" class="headerlink" title="(byte) -129"></a>(byte) -129</h4><p>-129二进制：<br>10000000 00000000 00000000 10000001<br>对应的补码为(反码+1)<br>11111111 11111111 11111111 01111111<br>截取8位后为：01111111<br>为正数，其原码反码补码均为01111111即127<br>所以(byte)-129的结果就是127  </p><h4 id="10"><a href="#10" class="headerlink" title="~10"></a>~10</h4><p>10的二进制为<br>00000000 00000000 00000000 00001010<br>补码是本身，取反之后为<br>11111111 11111111 11111111 11110101<br>此时最高位为1，负数，即是负数的补码<br>-10的反码为(补码-1)<br>11111111 11111111 11111111 11110100<br>对应的原码：<br>10000000 00000000 00000000 00001011 即-11<br>所以~b2的结果是-11  </p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>docker入门（一）</title>
    <link href="/2021/01/07/2020-03-04-dockerLearn/"/>
    <url>/2021/01/07/2020-03-04-dockerLearn/</url>
    
    <content type="html"><![CDATA[<h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><ol><li>官网步骤安装  </li><li>yum安装<br>yum install docker  </li></ol><ul><li>启动<br>systemctl start docker  </li><li>查看安装的docker版本<br>docker version  </li></ul><ol start="3"><li><a href="https://www.cnblogs.com/hellxz/p/11044012.html">https://www.cnblogs.com/hellxz/p/11044012.html</a></li></ol><h2 id="springboot初使用"><a href="#springboot初使用" class="headerlink" title="springboot初使用"></a>springboot初使用</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><pre><code>.├── pom.xml└── src    └── main        ├── docker        │   └── Dockerfile        ├── java        │   └── com        │       └── docker        │           └── DockerApplication.java        └── resources            └── application.properties</code></pre><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><ul><li><p>properties节点中设置docker镜像的前缀“springboot”：</p></li><li><p>加入maven插件“docker-maven-plugin”： </p></li></ul><pre><code>&lt;build&gt;    &lt;plugins&gt;        &lt;plugin&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;        &lt;/plugin&gt;        &lt;plugin&gt;            &lt;groupId&gt;com.spotify&lt;/groupId&gt;            &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;            &lt;version&gt;0.4.3&lt;/version&gt;            &lt;configuration&gt;                &lt;imageName&gt;$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;&lt;/imageName&gt;                &lt;dockerDirectory&gt;src/main/docker&lt;/dockerDirectory&gt;                &lt;resources&gt;                    &lt;resource&gt;                        &lt;targetPath&gt;/&lt;/targetPath&gt;                        &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt;                        &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt;                    &lt;/resource&gt;                &lt;/resources&gt;            &lt;/configuration&gt;        &lt;/plugin&gt;    &lt;/plugins&gt;&lt;/build&gt;</code></pre><h3 id="创建“src-main-docker-Dockerfile”文件："><a href="#创建“src-main-docker-Dockerfile”文件：" class="headerlink" title="创建“src/main/docker/Dockerfile”文件："></a>创建“src/main/docker/Dockerfile”文件：</h3><pre><code>FROM frolvlad/alpine-oraclejdk8:slimVOLUME /tmpADD spring12.jar app.jarRUN sh -c &#39;touch /app.jar&#39;ENV JAVA_OPTS=&quot;&quot;ENTRYPOINT [ &quot;sh&quot;, &quot;-c&quot;, &quot;java $JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -jar /app.jar&quot; ]</code></pre><p>FROM为使用哪个镜像</p><p>VOLUME为挂载路径</p><p>ADD为复制文件到镜像中</p><p>RUN为初始化时运行的命令</p><p>ENV为设置环境变量</p><p>ENTRYPOINT为启动时运行的命令</p><h2 id="使用Docker部署服务"><a href="#使用Docker部署服务" class="headerlink" title="使用Docker部署服务"></a>使用Docker部署服务</h2><h3 id="所需环境"><a href="#所需环境" class="headerlink" title="所需环境"></a>所需环境</h3><p>jdk，maven<br>安装成功标志：<br>java -version<br>mvn -version  </p><h3 id="生成镜像并运行"><a href="#生成镜像并运行" class="headerlink" title="生成镜像并运行"></a>生成镜像并运行</h3><ol><li>将src文件和pom放在任意文件夹下，执行命令  </li></ol><pre><code>mvn package docker:build</code></pre><ol start="2"><li>查看镜像  </li></ol><pre><code>docker images</code></pre><p>docker中存在的镜像、标签、镜像ID、已经创建的时间和大小，看下springboot/raines-learn 这个是在pom中<imageName>${docker.image.prefix}/${project.artifactId}</imageName>配置的，比较重要，因为它和接下来要讲的将镜像提交到DockerHub有着密切的联系。</p><ol start="3"><li>运行镜像<br>启动服务  </li></ol><pre><code>docker run -d -p 8765:8080 springboot/raines-learn </code></pre><ul><li>解释下这个命令  </li></ul><p>-d 代表后台运行<br>-p 标识宿主机与docker服务的端口映射，注意谁前谁后：【宿主端口：docker内服务端口】<br>springboot/raines-learn 就是启动镜像的名称，当然了使用IMAGE ID 也是可以的</p><ol start="4"><li>查看docker是否将服务启动成功</li></ol><pre><code>docker ps</code></pre><ul><li>解释<br>CONTAINER ID 容器ID<br>PORTS宿主与docker内部的服务映射<br>NAMES 容器名称，跟容器ID对应，如果你不指定名称的话，docker会随机给你分配一个name  </li></ul><h2 id="推送到DockerHub"><a href="#推送到DockerHub" class="headerlink" title="推送到DockerHub"></a>推送到DockerHub</h2><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://hub.docker.com/">https://hub.docker.com/</a></p><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>docker login -u[用户名] -p[密码]</p><h3 id="推送到DockerHub-1"><a href="#推送到DockerHub-1" class="headerlink" title="推送到DockerHub"></a>推送到DockerHub</h3><p>docker push springboot/raines-learn:latest<br>latest是tag，相当于版本号<br>[denied: requested access to the resource is denied]解决方案：<br>docker tag : 标记本地镜像，将其归入某一仓库。<br>docker tag [OPTIONS] IMAGE[:TAG] [REGISTRYHOST/][USERNAME/]NAME[:TAG]<br>eg: docker tag springboot/raines-learn:latest 1150079039/raines-learn:v1<br>此处的1150079039需要改为你的用户名  </p><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p>docker pull springboot/raines-learn</p><h2 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a>docker常用命令</h2><h3 id="images"><a href="#images" class="headerlink" title="images"></a>images</h3><ul><li>搜索image</li></ul><pre><code>docker search image_name</code></pre><ul><li>下载image</li></ul><pre><code>docker pull image_name</code></pre><ul><li>列出镜像列表</li></ul><pre><code>docker images</code></pre><ul><li>删除images</li></ul><pre><code>docker rmi &lt;image id&gt;</code></pre><ul><li>删除images id 为none的</li></ul><pre><code>docker rmi $(docker images | grep &quot;^&lt;none&gt;&quot; | awk &quot;&#123;print $3&#125;&quot;)</code></pre><ul><li>删除全部image</li></ul><pre><code>docker rmi $(docker images -q)</code></pre><ul><li>显示一个镜像的历史</li></ul><pre><code>docker history image_name</code></pre><h3 id="container"><a href="#container" class="headerlink" title="container"></a>container</h3><ul><li>列出当前所有正在运行的container</li></ul><pre><code>docker ps</code></pre><ul><li>列出所有的container</li></ul><pre><code>docker ps -a</code></pre><ul><li>列出最近一次启动的container</li></ul><pre><code>docker ps -l</code></pre><ul><li>停止所有的container，这样才能够删除其中的images：</li></ul><pre><code>docker stop $(docker ps -a -q)</code></pre><ul><li>删除所有container：</li></ul><pre><code>docker rm $(docker ps -a -q)</code></pre><h2 id="Docker-快速删除所有容器"><a href="#Docker-快速删除所有容器" class="headerlink" title="Docker 快速删除所有容器"></a>Docker 快速删除所有容器</h2><ul><li>查看运行容器<br>docker ps  </li><li>查看所有容器<br>docker ps -a  </li><li>进入容器,其中字符串为容器ID:<br>docker exec -it d27bd3008ad9 /bin/bash  </li></ul><ol><li>停用全部运行中的容器:<br>docker stop $(docker ps -q)  </li><li>删除全部容器：<br>docker rm $(docker ps -aq)  </li><li>一条命令实现停用并删除容器：<br>docker stop $(docker ps -q) &amp; docker rm $(docker ps -aq)  </li></ol><h2 id="删除所有none镜像"><a href="#删除所有none镜像" class="headerlink" title="删除所有none镜像"></a>删除所有none镜像</h2><p>docker rmi $(docker images | grep “none” | awk ‘{print $3}’) </p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>《Effective java 3》读书笔记</title>
    <link href="/2021/01/07/2020-02-28-effectiveJava3/"/>
    <url>/2021/01/07/2020-02-28-effectiveJava3/</url>
    
    <content type="html"><![CDATA[<h2 id="用静态工厂方法代替构造器"><a href="#用静态工厂方法代替构造器" class="headerlink" title="用静态工厂方法代替构造器"></a>用静态工厂方法代替构造器</h2><h2 id="当构造方法参数过多时使用builder模式"><a href="#当构造方法参数过多时使用builder模式" class="headerlink" title="当构造方法参数过多时使用builder模式"></a>当构造方法参数过多时使用builder模式</h2><p>构造方法参数过多解决方案：  </p><ol><li>重叠构造器模式：简而言之，重叠构造器模式可行，但是当有许多参数的时候，客户端代码会很难缩写，并且仍然较难以阅读。  </li><li>JavaBeans模式，在这种模式下，先调用一个无参构造器来创建对象，然后再调用setter方法来设置每个必要的参数，以及每个相关的可选参数。缺点也却而易见：因为构造过程被分到了几个调用中，在构造过程中JavaBean可能处于不一致的状态（譬如某个方法返回的属性值为null，不同调用中可能会缺失某个必需属性值）；JavaBeans模式使得把类做成不可变的可能性不复存在。这就需要程序员付出额外的努力来确保它的线程安全。</li><li>建造者（Builder）模式。它不直接生成想要的对象，而是让客户端利用所有必要的参数调用构造器（或者静态工厂），得到一个builder对象，然后客户端在 builder 对象上调用类似于setter的方法，来设置每个相关的可选参数。最后，客户端调用无参的build方法来生成通常是不可变的对象。这个builder通常是它构建的类的静态成员类。</li></ol><h2 id="用私有构造器或者枚举类型强化Singleton属性"><a href="#用私有构造器或者枚举类型强化Singleton属性" class="headerlink" title="用私有构造器或者枚举类型强化Singleton属性"></a>用私有构造器或者枚举类型强化Singleton属性</h2><p>Singleton是指仅仅被实例化一次的类。<br>单元素的枚举类型经常成为实现Singleton的最佳方法。</p><h2 id="通过私有构造器强化不可实例化的能力"><a href="#通过私有构造器强化不可实例化的能力" class="headerlink" title="通过私有构造器强化不可实例化的能力"></a>通过私有构造器强化不可实例化的能力</h2><p>创建私有构造器并在其中抛出AssertionError<br>避免工具类误操作而实例化  </p><h2 id="优先考虑依赖注入来引用资源"><a href="#优先考虑依赖注入来引用资源" class="headerlink" title="优先考虑依赖注入来引用资源"></a>优先考虑依赖注入来引用资源</h2><p>在创建新实例时将资源传递到构造器中，这是依赖项注入（dependency injection）的一种形式。<br>不要用singleton和静态工具类来实现依赖一个或多个底层资源的类，且该资源的行为会影响到该类的行为；也不要直接用这个类来创建这些资源，而应该将这些资源或者工厂传给构造器（或者静态工厂，或者构建器），通过它们来创建类。这个实践就被称作依赖注入，它极大地提升了类的灵活性、可重用性和可测试性。</p><h2 id="避免创建不必要的对象"><a href="#避免创建不必要的对象" class="headerlink" title="避免创建不必要的对象"></a>避免创建不必要的对象</h2><h2 id="消除过期的对象引用"><a href="#消除过期的对象引用" class="headerlink" title="消除过期的对象引用"></a>消除过期的对象引用</h2><h2 id="避免使用-Finalizer-和-Cleaner-机制"><a href="#避免使用-Finalizer-和-Cleaner-机制" class="headerlink" title="避免使用 Finalizer 和 Cleaner 机制"></a>避免使用 Finalizer 和 Cleaner 机制</h2><h2 id="9-使用-try-with-resources-语句替代-try-finally-语句"><a href="#9-使用-try-with-resources-语句替代-try-finally-语句" class="headerlink" title="9. 使用 try-with-resources 语句替代 try-finally 语句"></a>9. 使用 try-with-resources 语句替代 try-finally 语句</h2><h2 id="10-重写-equals-方法时遵守通用约定"><a href="#10-重写-equals-方法时遵守通用约定" class="headerlink" title="10. 重写 equals 方法时遵守通用约定"></a>10. 重写 equals 方法时遵守通用约定</h2>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Flink入门</title>
    <link href="/2021/01/07/2020-02-24-flinkLearn/"/>
    <url>/2021/01/07/2020-02-24-flinkLearn/</url>
    
    <content type="html"><![CDATA[<ul><li>Mac OS X 上使用brew安装 Flink<br>brew install apache-flink</li><li>查看flink安装路径<br>brew info apache-flink</li><li>进入安装路径下运行<br>./libexec/bin/start-cluster.sh</li></ul>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>使用nginx搭建图片服务器</title>
    <link href="/2021/01/07/2020-02-13-nginxPhoto/"/>
    <url>/2021/01/07/2020-02-13-nginxPhoto/</url>
    
    <content type="html"><![CDATA[<h2 id="nginx常用命令（路径替换为服务器具体路径）"><a href="#nginx常用命令（路径替换为服务器具体路径）" class="headerlink" title="nginx常用命令（路径替换为服务器具体路径）"></a>nginx常用命令（路径替换为服务器具体路径）</h2><ul><li>查看nginx的配件文件是否正确<br>/usr/local/nginx/sbin/nginx -t</li><li>重启nginx<br>方式一：/etc/init.d/nginx restart<br>方式二：进入nginx可执行目录sbin下，输入命令./nginx -s reload</li></ul><h2 id="nginx-conf配置文件"><a href="#nginx-conf配置文件" class="headerlink" title="nginx.conf配置文件"></a>nginx.conf配置文件</h2><h3 id="准备：vim中的翻页命令"><a href="#准备：vim中的翻页命令" class="headerlink" title="准备：vim中的翻页命令"></a>准备：vim中的翻页命令</h3><ul><li><p>整页翻页 ctrl-f ctrl-b<br>f就是forword b就是backward  </p></li><li><p>翻半页<br>ctrl-d ctlr-u<br>d=down u=up  </p></li><li><p>滚一行<br>ctrl-e ctrl-y</p></li><li><p>zz 让光标所在的行居屏幕中央  </p></li><li><p>zt 让光标所在的行居屏幕最上一行 t=top  </p></li><li><p>zb 让光标所在的行居屏幕最下一行 b=bottom  </p></li></ul><h3 id="解读"><a href="#解读" class="headerlink" title="解读"></a>解读</h3><ul><li>Nginx默认是不允许列出整个目录的。<br>如需此功能，打开nginx.conf文件，在location server 或 http段中加入<br>autoindex on;<br>另外两个参数最好也加上去:<br>autoindex_exact_size off;<br>默认为on，显示出文件的确切大小，单位是bytes。<br>改为off后，显示出文件的大概大小，单位是kB或者MB或者GB<br>autoindex_localtime on;<br>默认为off，显示的文件时间为GMT时间。<br>改为on后，显示的文件时间为文件的服务器时间  </li><li>访问图片403问题  <ul><li>nginx.conf的nobody修改为进程启动的用户名称    </li><li>权限问题，如果nginx没有web目录的操作权限，也会出现403错误：修改web目录的读写权限，或者是把nginx的启动用户改成目录的所属用户，重启Nginx即可解决  chmod -R 777 /data  </li></ul></li><li>访问路径<br>在server.location中监听访问路径<br>例如，在以下配置文件下：访问  域名/photo/demo.jpg<br>会去寻找服务器路径 /data/jar/photo下的demo.jpg文件；<br>而访问  域名/photo/<br>会显示photo文件夹的目录</li></ul><h3 id="配置文件详情"><a href="#配置文件详情" class="headerlink" title="配置文件详情"></a>配置文件详情</h3><pre><code>#user  nobody;worker_processes  1;#error_log  logs/error.log;#error_log  logs/error.log  notice;#error_log  logs/error.log  info;#pid        logs/nginx.pid;events &#123;    worker_connections  1024;&#125;http &#123;    include       mime.types;    default_type  application/octet-stream;    #log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;    #                  &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;    #                  &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;    #access_log  logs/access.log  main;    sendfile        on;    #tcp_nopush     on;    #keepalive_timeout  0;    keepalive_timeout  65;    #gzip  on;    server &#123;        listen       80;        server_name  localhost;        #charset koi8-r;        #access_log  logs/host.access.log  main;        location / &#123;            root   html;            index  index.html index.htm;        &#125;        location /photo/ &#123;            root   /data/jar/;            autoindex on;        autoindex_localtime on;                autoindex_exact_size on;        charset utf-8;        &#125;        #error_page  404              /404.html;        # redirect server error pages to the static page /50x.html        #        error_page   500 502 503 504  /50x.html;        location = /50x.html &#123;            root   html;        &#125;        # proxy the PHP scripts to Apache listening on 127.0.0.1:80        #        #location ~ \.php$ &#123;        #    proxy_pass   http://127.0.0.1;        #&#125;        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000        #        #location ~ \.php$ &#123;        #    root           html;        #    fastcgi_pass   127.0.0.1:9000;        #    fastcgi_index  index.php;        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;        #    include        fastcgi_params;        #&#125;        # deny access to .htaccess files, if Apache&#39;s document root        # concurs with nginx&#39;s one        #        #location ~ /\.ht &#123;        #    deny  all;        #&#125;    &#125;    # another virtual host using mix of IP-, name-, and port-based configuration    #    #server &#123;    #    listen       8000;    #    listen       somename:8080;    #    server_name  somename  alias  another.alias;    #    location / &#123;    #        root   html;    #        index  index.html index.htm;    #    &#125;    #&#125;    # HTTPS server    #    #server &#123;    #    listen       443 ssl;    #    server_name  localhost;    #    ssl_certificate      cert.pem;    #    ssl_certificate_key  cert.key;    #    ssl_session_cache    shared:SSL:1m;    #    ssl_session_timeout  5m;    #    ssl_ciphers  HIGH:!aNULL:!MD5;    #    ssl_prefer_server_ciphers  on;    #    location / &#123;    #        root   html;    #        index  index.html index.htm;    #    &#125;    #&#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>一次提高访问性能经历</title>
    <link href="/2021/01/07/2020-02-11-INDEX/"/>
    <url>/2021/01/07/2020-02-11-INDEX/</url>
    
    <content type="html"><![CDATA[<h2 id="Mysql索引"><a href="#Mysql索引" class="headerlink" title="Mysql索引"></a>Mysql索引</h2><p>MySQL索引的建立对于MySQL的高效运行是很重要的，索引可以大大提高MySQL的检索速度。  </p><ul><li>给t_record的code字段添加索引index_code<br>ALTER TABLE t_record ADD INDEX index_code(code);</li></ul><h3 id="添加索引"><a href="#添加索引" class="headerlink" title="添加索引"></a>添加索引</h3><ol><li>添加PRIMARY KEY（主键索引）<br>mysql&gt;ALTER TABLE <code>table_name</code> ADD PRIMARY KEY ( <code>column</code> ) </li><li>添加UNIQUE(唯一索引)<br>mysql&gt;ALTER TABLE <code>table_name</code> ADD UNIQUE (<br><code>column</code><br>) </li><li>添加INDEX(普通索引)<br>mysql&gt;ALTER TABLE <code>table_name</code> ADD INDEX index_name ( <code>column</code> ) </li><li>添加FULLTEXT(全文索引)<br>mysql&gt;ALTER TABLE <code>table_name</code> ADD FULLTEXT ( <code>column</code>) </li><li>添加多列索引<br>mysql&gt;ALTER TABLE <code>table_name</code> ADD INDEX index_name ( <code>column1</code>, <code>column2</code>, <code>column3</code> )</li></ol><h4 id="扩展：MySQL设置多列为唯一约束-即多列不能同时相同"><a href="#扩展：MySQL设置多列为唯一约束-即多列不能同时相同" class="headerlink" title="扩展：MySQL设置多列为唯一约束,即多列不能同时相同"></a>扩展：MySQL设置多列为唯一约束,即多列不能同时相同</h4><p>设置serial_no、warn_day为t_fence_warn表的唯一约束<br>ALTER TABLE t_fence_warn ADD UNIQUE KEY index_name( <code>serial_no</code>, <code>warn_day</code> )</p><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><ul><li>删除掉table_name中的索引index_name<br>ALTER TABLE table_name DROP INDEX index_name</li></ul><h2 id="寻找问题：日志查询"><a href="#寻找问题：日志查询" class="headerlink" title="寻找问题：日志查询"></a>寻找问题：日志查询</h2><ul><li>统计my.log文件中107848的出现次数<br>cat my.log |grep 107848 |wc -l  </li><li>持续追踪最新日志<br>tail -f my.log  </li><li>查看my.log文件的最后200行<br>tail -200 my.log  </li></ul><h2 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h2><ul><li>数据库连接池最大连接数配置</li><li>tomcat的max-threads、max-connections、accept-count配置</li></ul><h2 id="tomcat集群"><a href="#tomcat集群" class="headerlink" title="tomcat集群"></a>tomcat集群</h2><ul><li>开启多个tomcat，使用nginx轮询tomcat端口号</li></ul><h2 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h2><ul><li>使用MyCat对Mysql进行分库分表</li></ul><h2 id="寻找问题：Mysql"><a href="#寻找问题：Mysql" class="headerlink" title="寻找问题：Mysql"></a>寻找问题：Mysql</h2><h3 id="show-processlist"><a href="#show-processlist" class="headerlink" title="show processlist"></a>show processlist</h3><p>show full processlist 返回的结果是实时变化的，是对mysql链接执行的现场快照，所以用来处理突发事件非常有用。<br>一般用到 show processlist 或 show full processlist 都是为了查看当前 mysql 是否有压力，都在跑什么语句，当前语句耗时多久了，有没有什么慢 SQL 正在执行之类的<br>可以看到总共有多少链接数，哪些线程有问题(time是执行秒数，时间长的就应该多注意了)，然后可以把有问题的线程 kill 掉，这样可以临时解决一些突发性的问题。<br>有时候一个快照可能看不出什么问题，那么可以频发的刷新试试</p><h4 id="下面针对每列做下介绍："><a href="#下面针对每列做下介绍：" class="headerlink" title="下面针对每列做下介绍："></a>下面针对每列做下介绍：</h4><pre><code> Id：链接mysql 服务器线程的唯一标识，可以通过kill来终止此线程的链接。 User：当前线程链接数据库的用户 Host：显示这个语句是从哪个ip 的哪个端口上发出的。可用来追踪出问题语句的用户 db: 线程链接的数据库，如果没有则为null Command: 显示当前连接的执行的命令，一般就是休眠或空闲（sleep），查询（query），连接（connect） Time: 线程处在当前状态的时间，单位是秒 State：显示使用当前连接的sql语句的状态，很重要的列，后续会有所有的状态的描述，请注意，state只是语句执行中的某一个状态，一个 sql语句，已查询为例，可能需要经过copying to tmp table，Sorting result，Sending data等状态才可以完成 Info: 线程执行的sql语句，如果没有语句执行则为null。这个语句可以使客户端发来的执行语句也可以是内部执行的语句 由于Command的状态大部分都是sleep对我们分析问题没什么作用，所以我们可以通过如下语句来排除sleep状态的线程：</code></pre><ul><li>查询非 Sleep 状态的链接，按消耗时间倒序展示，自己加条件过滤<br>select id, db, user, host, command, time, state, info<br>from information_schema.processlist<br>where command != ‘Sleep’<br>order by time desc<br>这样就过滤出来哪些是正在干活的，然后按照消耗时间倒叙展示，排在最前面的，极大可能就是有问题的链接了，然后查看 info 一列，就能看到具体执行的什么 SQL 语句了，针对分析 </li></ul><h3 id="kill-使用"><a href="#kill-使用" class="headerlink" title="kill 使用"></a>kill 使用</h3><h4 id="通过前面的查询，我们查到了问题sql，通常会kill掉这个链接的线程"><a href="#通过前面的查询，我们查到了问题sql，通常会kill掉这个链接的线程" class="headerlink" title="通过前面的查询，我们查到了问题sql，通常会kill掉这个链接的线程"></a>通过前面的查询，我们查到了问题sql，通常会kill掉这个链接的线程</h4><pre><code>-- 查询执行时间超过2分钟的线程，然后拼接成 kill 语句select concat(&#39;kill &#39;, id, &#39;;&#39;)from information_schema.processlistwhere command != &#39;Sleep&#39;and time &gt; 2*60order by time desc</code></pre><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><p>一些问题会导致连锁反应，而且不太好定位，有时候以为是慢查询，很可能是大多时间是在等在CPU、内存资源的释放，所以有时候同一个查询消耗的时间有时候差异很大<br>总结了一些常见问题：  </p><ul><li>CPU报警：很可能是 SQL 里面有较多的计算导致的</li><li>连接数超高：很可能是有慢查询，然后导致很多的查询在排队，排查问题的时候可以看到”事发现场“类似的 SQL 语句一大片，那么有可能是没有索引或者索引不好使，可以用：explain 分析一下 SQL 语句</li></ul><h3 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h3>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>中国人失掉自信力了吗</title>
    <link href="/2021/01/07/2020-02-09-ChineseLoseHeart/"/>
    <url>/2021/01/07/2020-02-09-ChineseLoseHeart/</url>
    
    <content type="html"><![CDATA[<p>今天看到鲁迅先生的这篇文章想起来”吹哨人”李文亮，难道偌大中国仅李医生一人而已？我觉得肯定是有多个”李文亮们”，他们有确信，不自欺；他们在前仆后继的战斗，不过一面总在被摧残，被抹杀，消灭于黑暗中，不能为大家所知道罢了。<br>以前读鲁迅，是课本上的背诵全文；现在读鲁迅，是想看清这个世界。<br>有的人，机缘巧合，走了捷径，红极一时，却迅速被遗忘，沦为被遗落在历史深处的一粒尘埃。有的人，信念坚定、埋头苦干、不求显达，却能在大浪淘沙中彰显价值，人格光芒辉映历史的甬道。</p><h2 id="中国人失掉自信力了吗"><a href="#中国人失掉自信力了吗" class="headerlink" title="中国人失掉自信力了吗"></a>中国人失掉自信力了吗</h2><p>从公开的文字上看起来：两年以前，我们总自夸着“地大物博”，是事实；不久就不再自夸了，只希望着国联，也是事实；现在是既不夸自己，也不信国联，改为一味求神拜佛，怀古伤今了——却也是事实。</p><p>于是有人慨叹曰：中国人失掉自信力了。</p><p>如果单据这一点现象而论，自信其实是早就失掉了的。先前信“地”，信“物”，后来信“国联”，都没有相信过“自己”。假使这也算一种“信”，那也只能说中国人曾经有过“他信力”，自从对国联失望之后，便把这他信力都失掉了。</p><p>失掉了他信力，就会疑，一个转身，也许能够只相信了自己，倒是一条新生路，但不幸的是逐渐玄虚起来了。信“地”和“物”，还是切实的东西，国联就渺茫，不过这还可以令人不久就省悟到依赖它的不可靠。一到求神拜佛，可就玄虚之至了，有益或是有害，一时就找不出分明的结果来，它可以令人更长久的麻醉着自己。</p><p>中国人现在是在发展着“自欺力”。</p><p>“自欺”也并非现在的新东西，现在只不过日见其明显，笼罩了一切罢了。然而，在这笼罩之下，我们有并不失掉自信力的中国人在。</p><p>我们从古以来，就有埋头苦干的人，有拼命硬干的人，有为民请命的人，有舍身求法的人，……虽是等于为帝王将相作家谱的所谓“正史”，也往往掩不住他们的光耀，这就是中国的脊梁。</p><p>这一类的人们，就是现在也何尝少呢?他们有确信，不自欺；他们在前仆后继的战斗，不过一面总在被摧残，被抹杀，消灭于黑暗中，不能为大家所知道罢了。说中国人失掉了自信力，用以指一部分人则可，倘若加于全体，那简直是诬蔑。</p><p>要论中国人，必须不被搽在表面的自欺欺人的脂粉所诓骗，却看看他的筋骨和脊梁。自信力的有无，状元宰相的文章是不足为据的，要自己去看地底下。</p><p>九月二十五日</p><ul><li>本篇最初发表于一九三四年十月二十日《太白》半月刊第一卷第三期，署名公汗。</li></ul>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>numpy安装及简单使用</title>
    <link href="/2021/01/07/2020-02-05-numpy/"/>
    <url>/2021/01/07/2020-02-05-numpy/</url>
    
    <content type="html"><![CDATA[<h2 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h2><ul><li>安装：pip3 install numpy</li></ul><p>numpy.ndarray</p><h2 id="numpy常用方法"><a href="#numpy常用方法" class="headerlink" title="numpy常用方法"></a>numpy常用方法</h2><ul><li><p>numpy.arange：支持小数步长</p></li><li><p>numpy.zeros：生成全0数组（二维矩阵）</p></li><li><p>numpy.ones：生成全1数组（二维矩阵）</p></li><li><p>numpy.full：填充数组</p></li><li><p>linspace：等差数列</p></li><li><p>random：生成随机数</p></li></ul><h2 id="数组的合并与分割"><a href="#数组的合并与分割" class="headerlink" title="数组的合并与分割"></a>数组的合并与分割</h2><p>np.concatenate数组合并（维度一样）</p><p>np.vstack数组合并：垂直堆叠</p><p>np.hstack数组合并：水平堆叠（维度一样）</p><p>np.split数组平均分割成几份</p><p>np.vsplit上下两部分（垂直分割）</p><p>np.hsplit左右两部分（水平分割）</p><h2 id="Numpy中的矩阵运算"><a href="#Numpy中的矩阵运算" class="headerlink" title="Numpy中的矩阵运算"></a>Numpy中的矩阵运算</h2><ul><li><ul><li><ul><li>/ // ** % np.abs np.sin np.cos np.tan np.exp(x) </li></ul></li></ul></li></ul><p>加 减 乘 除 整除 平方 取模 绝对值 正弦 余弦 正切 取x次方</p><h2 id="矩阵之间的运算"><a href="#矩阵之间的运算" class="headerlink" title="矩阵之间的运算"></a>矩阵之间的运算</h2><ul><li><p>矩阵中的数学运算是对应元素上的数学运算 </p></li><li><p>A.dot(B)：A矩阵和B矩阵的标准乘法运算</p></li></ul><p>A矩阵的每一行和B矩阵的每一列对应位置做相乘最后再做相加</p><h2 id="矩阵的逆"><a href="#矩阵的逆" class="headerlink" title="矩阵的逆"></a>矩阵的逆</h2><p>np.linalg.inv(A) 求A的逆矩阵</p><p>并不是所有矩阵都有逆矩阵，所以np.linalg.pinv(A)求A的伪逆矩阵</p><p>逆矩阵乘原矩阵，原矩阵乘逆矩阵所得当位矩阵</p><h2 id="矩阵的转置"><a href="#矩阵的转置" class="headerlink" title="矩阵的转置"></a>矩阵的转置</h2><p>A.T：列变行，行变列</p><h2 id="numpy聚合操作"><a href="#numpy聚合操作" class="headerlink" title="numpy聚合操作"></a>numpy聚合操作</h2><p>np.sum()求和</p><p>np.mean求平均值</p><p>np.median求中位数</p><p>np.percentile求百分位数</p><p>np.max</p><p>np.var求方差</p><p>方差：每个数减去均值，然后平方之后求和，最后除数量</p><p>np.std求标准差</p><p>方差开一个根号就是标准差：方差**0.5</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>jupyter安装及简单使用</title>
    <link href="/2021/01/07/2020-02-05-jupyter/"/>
    <url>/2021/01/07/2020-02-05-jupyter/</url>
    
    <content type="html"><![CDATA[<h2 id="安装所需环境"><a href="#安装所需环境" class="headerlink" title="安装所需环境"></a>安装所需环境</h2><ul><li>python </li><li>pip</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><p>安装jupyter：pip3 install jupiter</p></li><li><p>运行notebook：jupyter notebook</p></li><li><p>直接运行python文件：%run my/hello.py</p></li><li><p>将文件中的内容直接读到notebooks：%load</p></li><li><p>测量方法所需要的时间（时间短的多次测量取平均值）：%timeit</p></li></ul><p>给代码块测量需要两个百分号：%%timeit</p><ul><li><p>只做一次测量：%time</p></li><li><p>html的魔法命令：%%html</p></li><li><p>执行js代码：%%js</p></li><li><p>执行系统命令ls：!ls</p></li><li><p>输出到当前目录下的a.py文件中：%%writefile “a.py”</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>一月总结及二月计划</title>
    <link href="/2021/01/07/2020-02-03-JanuarySummary/"/>
    <url>/2021/01/07/2020-02-03-JanuarySummary/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>回顾去年的冬天，频频报道的是裁员潮，大批大批的裁员搞的人心惶惶，未被裁的感觉如履薄冰，遭裁员的如坠冰窖。恐怕大部分人度过的是一个格外冷的冬天。<br>2020年的春节，比去年来的更早更冷。寒冷的裁员潮还在继续，让人遍体生寒的新型冠状病毒更是悄然而至，让本就寒冷的冬天更是雪上加霜，让人在温暖的火炉旁都能打出一个寒战。  </p><h2 id="一月总结"><a href="#一月总结" class="headerlink" title="一月总结"></a>一月总结</h2><p>一月有1天的元旦假期，更有21-31的11天春节假期，时间被大块大块的睡觉、阅读、看电影所占用，性价比最低的莫过于看电影了，现在回想，仿若南柯一梦，毫无半点收获。但假期中却大把时间浪费在这上面，这是一个怪诞的行为，我们明知道看视频等娱乐行为对自己没有好处，行动上却在上面耗费了大把时间，这就是我们并没有我们想象中的那么爱自己，甚至在内心深处还会厌恶自己（来源《人生十二法则》）。<br>一月在书中的收获对于行为行动的影响倒是很多：<br>首先是在软技能中学到的微波炉打鸡蛋菠菜，虽然难吃，但是确实少油无盐，又有丰富的蛋白质，还是坚持吃下去吧。<br>其次是医生最想最想让你做的事中的劝告：不要吃糖和谷物等能量密度高的碳水化合物。<br>再就是有钱人和你想的不一样中的观点：关注“商业模式易懂”的企业，在股价大幅下跌的时候稳稳地抓住投资机会。<br>而我们内心的冲突则深刻的指出了我的问题：存在尚未解决的冲突，它们都会让精力被消耗，或是用在不该用的地方。而问题的解决方案和舍费尔的建议如出一辙：一定要承担起责任。<br>阅读完成了最低限度的年度目标：一周读一本，阅读完成了4本书。<br>理财则没有完成目标，年亏损率达32%。<br>专业学习则复习了一下aop和全局统一异常处理。  </p><h2 id="二月计划"><a href="#二月计划" class="headerlink" title="二月计划"></a>二月计划</h2><p>阅读计划：<br>《人生十二法则》<br>《怪诞行为学》<br>《财务自由之路II》<br>《沉思录》<br>《决断力:如何在生活与工作中做出更好的选择》<br>理财计划：<br>在较低点买入部分浪潮信息和浪潮软件股票<br>工作计划：<br>每日番茄钟不超过4个，工作时间控制不超过4小时。<br>专业计划：<br>阅读完《offer来了》<br>消费计划：  </p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>《有钱人和你想的不一样》读书笔记</title>
    <link href="/2021/01/07/2020-01-30-haveMoneyThink/"/>
    <url>/2021/01/07/2020-01-30-haveMoneyThink/</url>
    
    <content type="html"><![CDATA[<h2 id="片段"><a href="#片段" class="headerlink" title="片段"></a>片段</h2><ul><li><p>富人最先抓住事物的本质，而不是贪图眼前利益，因此可以冷静判断，选择对自己最有利的方向。</p></li><li><p>富人，都是反馈高手。</p></li><li><p>金钱的使用，分为“消费”“浪费”“投资”3种。“消费”是满足居住、餐食等生活的必需花费；“浪费”就是无端的花费；“投资”是为将来而使用的金钱，储蓄、能带来资产增值的本金、买书的花费都算投资。 </p></li><li><p>认真回顾过去，总结问题，积极思考未来，新的主意和策略就会浮现出来，这样就能让今后的工作更上一层楼。像这样平时多思考自己的事业和未来的发展，到了做判断的时候就会毫不犹豫，充满自信地做出决定。</p></li><li><p>获得成功的人，都会从自己能够做的事情开始做起来。</p></li><li><p>富人都很会判断时机，在股价大幅下跌的时候稳稳地抓住投资机会。比如我们最常见的报道，“某企业业绩下滑”“某企业发生了危机”等，都是股价大幅下跌可以考虑投资的时机。高财商的人们遇到这样的情况，只要不涉及倒闭，肯定会抓住时机，积极进行投资。认为当前市场不景气而不去投资的，只是在给自己找借口罢了。越是不景气，越是投资的好机会。将“低买高卖”奉行到底，就是获得财务自由的黄金法则。</p></li><li><p>富人选股，看重的是什么呢？简单而言，富人比较关注“商业模式易懂”的企业。就是“做的是什么样的生意，怎样赚取利润”这些问题上清晰好理解的企业。商业模式清晰易懂，最大的好处就是，投资者能够充满自信地进行投资判断。</p></li><li><p>成功人士都具有马上行动的执行力。</p></li><li><p>有了明确的目标，就能够向着目标一步一步扎扎实实地走过去。目标实现了以后，就会深深体会到实现了目标的美好，这就是成就感。在存钱这件事上，让自己的大脑和身体都深深记住目标实现的成就感，有深刻的成功体验，是非常必要的。当下一次又有了物质目标的时候，身心就会重新体会达成目标的成就感，自己会变得更加有动力和干劲，存钱的过程就会变得顺遂。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>《医生最想最想让你做的事》读书笔记</title>
    <link href="/2021/01/07/2020-01-30-docterAdvice/"/>
    <url>/2021/01/07/2020-01-30-docterAdvice/</url>
    
    <content type="html"><![CDATA[<h2 id="片段"><a href="#片段" class="headerlink" title="片段"></a>片段</h2><ul><li><p>不要吃糖和谷物等能量密度高的碳水化合物；也不要吃反式脂肪，也就是精加工食品。这实际上是建议大家不要单调地摄入现代工业饮食。我们不提倡节食，甚至也不限制能量的摄入。我们描绘的是一种可持续的生活方式，建立在多样化的基础上：色、香、味俱全，口感饱满，这也是人的感官天生所追求的。坚果、根茎类、叶菜类、水果、鱼、野味、干净清凉的水，这些都应当包含在我们的饮食中。我们吃的范围要广，要吃得健康。</p></li><li><p>将我们所谓的压力从生活中去除并不是解决问题的办法。相反，真正的问题在于那些长期、无情地消磨我们的意志的日常事件。</p></li><li><p>一种超低碳水化合物的营养饮食方法，这种饮食方法叫作“生酮饮食法”，这个名字来自脂肪作为身体燃料存储时的形式。生酮饮食法每天限制身体摄入碳水化合物的量大约是50克，相当于晚餐吃一个苹果和一根萝卜所摄入的碳水化合物的量。脂肪可以作为身体的供能燃料，而且大约几周过后，身体就会适应它。大脑会从多余的脂肪分子中获取需要的葡萄糖，而且代谢循环也会依靠脂肪运行。这可能是我们的祖先在农业社会前大部分时间里的合理饮食方式。这种方式与“旧石器时代饮食法”或区域饮食法等其他低碳水化合物饮食法的原则是相同的，但区别是生酮饮食法中加入了乳制品。</p></li><li><p>食物：不要吃任何形式的精制糖。新鲜水果中的果糖只要不过量就可以，但是不要喝果汁。特别注意的是，要避免摄入溶于水的糖，其中不仅包括软饮料，还包括含有任何形式糖的功能饮料和果汁。限制或避免食用全谷物食品，也不要食用精制谷物，也就是所有用面粉做的东西。要从脂肪中获取热量，但要避免摄入人造脂肪，它又称为反式脂肪。不要食用加工食品，不要吃快餐。可以寻找富含ω-3脂肪酸的食物，如鸡蛋、草饲牛肉、鲑鱼之类那样的深海鱼，以及坚果。选择简单的新鲜水果和蔬菜。选择要多样化，你想吃多少就吃多少，享受你的食物。 运动：找一种你喜欢的运动方式，这是最重要的，要找一些你轻松就能完成并且可以作为日常生活一部分的运动。寻找涉及各种动作的、全身都能运动到的、有很多变化的运动形式，比如山地跑和CrossFit训练。必要时去健身房也是可以的，但要想办法在户外活动，在自然中锻炼会事半功倍。你可以感受到温暖的阳光，还有微风和细雨。你可以去穿越雪地，奋力前行。去感受寒冷，感受炎热，感受饥渴，带上装备出发吧！你可以寻找那些有其他人参与的运动，与伙伴们一起活动。你还可以找那些历史悠久的运动形式，如舞蹈、气功或太极。买一个心率监测仪，了解你的心脏。开始运动时，要缓慢谨慎。要安排休息日，甚至休息周。不要停止体验和尝试新事物，直到你觉得有趣，每一天都期待着跑步或跳舞才行。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2020新年展望</title>
    <link href="/2021/01/07/2020-01-21-NewYearHope/"/>
    <url>/2021/01/07/2020-01-21-NewYearHope/</url>
    
    <content type="html"><![CDATA[<h2 id="财务展望"><a href="#财务展望" class="headerlink" title="财务展望"></a>财务展望</h2><p>过往对于金钱没有一个系统化和明确的认知，而理财方面也基本处于一片渺无人烟的荒漠状态，20年的第一要务是开源节流，当然，仅仅开源节流是远远不够的，工薪阶层如果只靠开源节流的话想达到财务自由的目标有些天方夜谭，低工资、求稳定、无成长的环境使工薪阶层难以跳出温水煮青蛙的困境，而自身的局限及琐碎的杂事又极大的限制了想跳出的人们，想要极大的减少这种限制，我想到了一个解决方案，等稍候再谈。开源节流的下一步是合理理财，理财的年利率要保持在12%及以上，太低了想达到资产翻番的目标所需时间太长，再加上通货膨胀的影响，确有些得不偿失。今年的财务目标是实现财务保障，而财务保障的资金是确保绝对安全的，只能选择风险较小，稳健增长的理财产品。</p><h2 id="工作展望"><a href="#工作展望" class="headerlink" title="工作展望"></a>工作展望</h2><p>保证高质量及高效率的完成工作是每一个工薪阶层应有的能力及责任。但在工作时要擦亮眼睛，不要误食资本主义家的毒鸡汤，福报996这种话语是毫无事实支撑的宣扬，是毒害人心的恶言，创新性及高标准的工作内容需要消费大量的精力，而需要996完成的工作大多是在”吃老本”，透支你之前的知识储备，进而造成焦虑、眼界狭隘等恶果。一个有能力、与所在岗位相匹配的人，通常不需要耗费大量的时间及精力，要把时间花在刀刃上，不要为繁重的重复性工作买单，转而寻找更优秀的解决方案，而不是沉迷于自以为掌控工作的舒适环境中难以自拔，自毁前程。一天真正工作的合理时间应为2-4小时，这就要求我们要尽量缩短会议时间或避免参与无意义的会议的基础上，把工作目标及工作内容做一个详细的评估，高热情、高注意力下的工作通常只需要2-3个小时便足以完成一天乃至数天的工作。工作时间超过4个小时，大概是由两个原因造成的，一是新入职的不熟悉耗费大量时间以至于超过每天4个小时，这种情况大约需要1-2周的熟悉及适应；二是因为自身能力和岗位不匹配，这其中又包含两个因素，一是资本家过高的预估了你带来的价值，二是你的能力不足以支撑你完成现在高标准的工作，三是你有能力，但是经常被焦头烂额的杂事和没有在预期中的琐事所扰，不懂得拒绝的重要性，四是没有规划和目标，没有规划，便不知道自己今天需要完成的主要任务是什么，更不知道自己一天该有的工作量是多少，而没有目标，就造成了不知道想要的是什么，只能被动接受别人想让你拥有的，而不懂得自己争取。<br>番茄工作法是一项非常实用的规划指南，它的重要性在于让你知道事情需要几个番茄钟完成，进而明确自己保证目标前行的过程中为了创造价值而该有的工作量，确定规划。</p><h2 id="职业展望"><a href="#职业展望" class="headerlink" title="职业展望"></a>职业展望</h2><p>职业发展要把技能点点在大数据和数据分析领域上。海量数据是未来发展的必然结果，海量数据的存储及分析必定是一个热门。想起西虹市首富被请出山的”大国师”的话：我承认我有堵的成分，</p><h2 id="生活展望"><a href="#生活展望" class="headerlink" title="生活展望"></a>生活展望</h2><p>断舍离有两个优点：一是让你有理由减少开销，二是让你减少琐碎杂事的时间支出。</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Scala入门</title>
    <link href="/2021/01/07/2020-01-20-scalaStarted/"/>
    <url>/2021/01/07/2020-01-20-scalaStarted/</url>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>《Offer来了：Java面试核心知识点精讲（原理篇）》读书笔记</title>
    <link href="/2021/01/07/2020-01-20-javaOfferComeon/"/>
    <url>/2021/01/07/2020-01-20-javaOfferComeon/</url>
    
    <content type="html"><![CDATA[<h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><h3 id="JVM的运行机制"><a href="#JVM的运行机制" class="headerlink" title="JVM的运行机制"></a>JVM的运行机制</h3><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><h3 id="JVM的内存区域"><a href="#JVM的内存区域" class="headerlink" title="JVM的内存区域"></a>JVM的内存区域</h3><h3 id="JVM的运行时内存"><a href="#JVM的运行时内存" class="headerlink" title="JVM的运行时内存"></a>JVM的运行时内存</h3><h3 id="垃圾回收与算法"><a href="#垃圾回收与算法" class="headerlink" title="垃圾回收与算法"></a>垃圾回收与算法</h3><h3 id="Java中的4种引用类型"><a href="#Java中的4种引用类型" class="headerlink" title="Java中的4种引用类型"></a>Java中的4种引用类型</h3><h3 id="分代收集算法和分区收集算法"><a href="#分代收集算法和分区收集算法" class="headerlink" title="分代收集算法和分区收集算法"></a>分代收集算法和分区收集算法</h3><h3 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h3><h3 id="Java网络编程模型"><a href="#Java网络编程模型" class="headerlink" title="Java网络编程模型"></a>Java网络编程模型</h3><h3 id="JVM的类加载机制"><a href="#JVM的类加载机制" class="headerlink" title="JVM的类加载机制"></a>JVM的类加载机制</h3><h2 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h2><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><h3 id="异常分类及处理"><a href="#异常分类及处理" class="headerlink" title="异常分类及处理"></a>异常分类及处理</h3><h3 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h3><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><h2 id="Java并发编程"><a href="#Java并发编程" class="headerlink" title="Java并发编程"></a>Java并发编程</h2><h3 id="Java线程的创建方式"><a href="#Java线程的创建方式" class="headerlink" title="Java线程的创建方式"></a>Java线程的创建方式</h3><h3 id="线程池的工作原理"><a href="#线程池的工作原理" class="headerlink" title="线程池的工作原理"></a>线程池的工作原理</h3><h3 id="5种常用的线程池"><a href="#5种常用的线程池" class="headerlink" title="5种常用的线程池"></a>5种常用的线程池</h3><h3 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h3><h3 id="线程的基本方法"><a href="#线程的基本方法" class="headerlink" title="线程的基本方法"></a>线程的基本方法</h3><h3 id="Java中的锁"><a href="#Java中的锁" class="headerlink" title="Java中的锁"></a>Java中的锁</h3><h3 id="线程上下文切换"><a href="#线程上下文切换" class="headerlink" title="线程上下文切换"></a>线程上下文切换</h3><h3 id="Java阻塞队列"><a href="#Java阻塞队列" class="headerlink" title="Java阻塞队列"></a>Java阻塞队列</h3><h3 id="Java并发关键字"><a href="#Java并发关键字" class="headerlink" title="Java并发关键字"></a>Java并发关键字</h3><h3 id="多线程如何共享数据"><a href="#多线程如何共享数据" class="headerlink" title="多线程如何共享数据"></a>多线程如何共享数据</h3><h3 id="ConcurrentHashMap并发"><a href="#ConcurrentHashMap并发" class="headerlink" title="ConcurrentHashMap并发"></a>ConcurrentHashMap并发</h3><h3 id="Java中的线程调度"><a href="#Java中的线程调度" class="headerlink" title="Java中的线程调度"></a>Java中的线程调度</h3><h3 id="进程调度算法"><a href="#进程调度算法" class="headerlink" title="进程调度算法"></a>进程调度算法</h3><h3 id="什么是CAS"><a href="#什么是CAS" class="headerlink" title="什么是CAS"></a>什么是CAS</h3><h3 id="ABA问题"><a href="#ABA问题" class="headerlink" title="ABA问题"></a>ABA问题</h3><h3 id="什么是AQS"><a href="#什么是AQS" class="headerlink" title="什么是AQS"></a>什么是AQS</h3><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="栈及其Java实现"><a href="#栈及其Java实现" class="headerlink" title="栈及其Java实现"></a>栈及其Java实现</h3><h3 id="队列及其Java实现"><a href="#队列及其Java实现" class="headerlink" title="队列及其Java实现"></a>队列及其Java实现</h3><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><h3 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h3><h3 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h3><h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><h3 id="图"><a href="#图" class="headerlink" title="图"></a>图</h3><h3 id="位图"><a href="#位图" class="headerlink" title="位图"></a>位图</h3><h2 id="Java中的常用算法"><a href="#Java中的常用算法" class="headerlink" title="Java中的常用算法"></a>Java中的常用算法</h2><h3 id="二分查找算法"><a href="#二分查找算法" class="headerlink" title="二分查找算法"></a>二分查找算法</h3><h3 id="冒泡排序算法"><a href="#冒泡排序算法" class="headerlink" title="冒泡排序算法"></a>冒泡排序算法</h3><h3 id="插入排序算法"><a href="#插入排序算法" class="headerlink" title="插入排序算法"></a>插入排序算法</h3><h3 id="快速排序算法"><a href="#快速排序算法" class="headerlink" title="快速排序算法"></a>快速排序算法</h3><h3 id="希尔排序算法"><a href="#希尔排序算法" class="headerlink" title="希尔排序算法"></a>希尔排序算法</h3><h3 id="归并排序算法"><a href="#归并排序算法" class="headerlink" title="归并排序算法"></a>归并排序算法</h3><h3 id="桶排序算法"><a href="#桶排序算法" class="headerlink" title="桶排序算法"></a>桶排序算法</h3><h3 id="基数排序算法"><a href="#基数排序算法" class="headerlink" title="基数排序算法"></a>基数排序算法</h3><h3 id="其他算法"><a href="#其他算法" class="headerlink" title="其他算法"></a>其他算法</h3><h2 id="网络与负载均衡"><a href="#网络与负载均衡" class="headerlink" title="网络与负载均衡"></a>网络与负载均衡</h2><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><h2 id="数据库及分布式事务"><a href="#数据库及分布式事务" class="headerlink" title="数据库及分布式事务"></a>数据库及分布式事务</h2><h3 id="数据库的基本概念及原则"><a href="#数据库的基本概念及原则" class="headerlink" title="数据库的基本概念及原则"></a>数据库的基本概念及原则</h3><h3 id="数据库的并发操作和锁"><a href="#数据库的并发操作和锁" class="headerlink" title="数据库的并发操作和锁"></a>数据库的并发操作和锁</h3><h3 id="数据库分布式事务"><a href="#数据库分布式事务" class="headerlink" title="数据库分布式事务"></a>数据库分布式事务</h3><h2 id="分布式缓存的原理及应用"><a href="#分布式缓存的原理及应用" class="headerlink" title="分布式缓存的原理及应用"></a>分布式缓存的原理及应用</h2><h3 id="分布式缓存介绍"><a href="#分布式缓存介绍" class="headerlink" title="分布式缓存介绍"></a>分布式缓存介绍</h3><h3 id="Ehcache的原理及应用"><a href="#Ehcache的原理及应用" class="headerlink" title="Ehcache的原理及应用"></a>Ehcache的原理及应用</h3><h3 id="Redis的原理及应用"><a href="#Redis的原理及应用" class="headerlink" title="Redis的原理及应用"></a>Redis的原理及应用</h3><h3 id="分布式缓存设计的核心问题"><a href="#分布式缓存设计的核心问题" class="headerlink" title="分布式缓存设计的核心问题"></a>分布式缓存设计的核心问题</h3><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="设计模式简介"><a href="#设计模式简介" class="headerlink" title="设计模式简介"></a>设计模式简介</h3><h3 id="工厂模式的概念及Java实现"><a href="#工厂模式的概念及Java实现" class="headerlink" title="工厂模式的概念及Java实现"></a>工厂模式的概念及Java实现</h3><h3 id="抽象工厂模式的概念及Java实现"><a href="#抽象工厂模式的概念及Java实现" class="headerlink" title="抽象工厂模式的概念及Java实现"></a>抽象工厂模式的概念及Java实现</h3><h3 id="单例模式的概念及Java实现"><a href="#单例模式的概念及Java实现" class="headerlink" title="单例模式的概念及Java实现"></a>单例模式的概念及Java实现</h3><h3 id="建造者模式的概念及Java实现"><a href="#建造者模式的概念及Java实现" class="headerlink" title="建造者模式的概念及Java实现"></a>建造者模式的概念及Java实现</h3><h3 id="原型模式的概念及Java实现"><a href="#原型模式的概念及Java实现" class="headerlink" title="原型模式的概念及Java实现"></a>原型模式的概念及Java实现</h3><h3 id="适配器模式的概念及Java实现"><a href="#适配器模式的概念及Java实现" class="headerlink" title="适配器模式的概念及Java实现"></a>适配器模式的概念及Java实现</h3><h3 id="装饰者模式的概念及Java实现"><a href="#装饰者模式的概念及Java实现" class="headerlink" title="装饰者模式的概念及Java实现"></a>装饰者模式的概念及Java实现</h3><h3 id="代理模式的概念及Java实现"><a href="#代理模式的概念及Java实现" class="headerlink" title="代理模式的概念及Java实现"></a>代理模式的概念及Java实现</h3><h3 id="外观模式的概念及Java实现"><a href="#外观模式的概念及Java实现" class="headerlink" title="外观模式的概念及Java实现"></a>外观模式的概念及Java实现</h3><h3 id="桥接模式的概念及Java实现"><a href="#桥接模式的概念及Java实现" class="headerlink" title="桥接模式的概念及Java实现"></a>桥接模式的概念及Java实现</h3><h3 id="组合模式的概念及Java实现"><a href="#组合模式的概念及Java实现" class="headerlink" title="组合模式的概念及Java实现"></a>组合模式的概念及Java实现</h3><h3 id="享元模式的概念及Java实现"><a href="#享元模式的概念及Java实现" class="headerlink" title="享元模式的概念及Java实现"></a>享元模式的概念及Java实现</h3><h3 id="策略模式的概念及Java实现"><a href="#策略模式的概念及Java实现" class="headerlink" title="策略模式的概念及Java实现"></a>策略模式的概念及Java实现</h3><h3 id="模板方法模式的概念及Java实现"><a href="#模板方法模式的概念及Java实现" class="headerlink" title="模板方法模式的概念及Java实现"></a>模板方法模式的概念及Java实现</h3><h3 id="观察者模式的概念及Java实现"><a href="#观察者模式的概念及Java实现" class="headerlink" title="观察者模式的概念及Java实现"></a>观察者模式的概念及Java实现</h3><h3 id="迭代器模式的概念及Java实现"><a href="#迭代器模式的概念及Java实现" class="headerlink" title="迭代器模式的概念及Java实现"></a>迭代器模式的概念及Java实现</h3><h3 id="责任链模式的概念及Java实现"><a href="#责任链模式的概念及Java实现" class="headerlink" title="责任链模式的概念及Java实现"></a>责任链模式的概念及Java实现</h3><h3 id="命令模式的概念及Java实现"><a href="#命令模式的概念及Java实现" class="headerlink" title="命令模式的概念及Java实现"></a>命令模式的概念及Java实现</h3><h3 id="备忘录模式的概念及Java实现"><a href="#备忘录模式的概念及Java实现" class="headerlink" title="备忘录模式的概念及Java实现"></a>备忘录模式的概念及Java实现</h3><h3 id="状态模式的概念及Java实现"><a href="#状态模式的概念及Java实现" class="headerlink" title="状态模式的概念及Java实现"></a>状态模式的概念及Java实现</h3><h3 id="访问者模式的概念及Java实现"><a href="#访问者模式的概念及Java实现" class="headerlink" title="访问者模式的概念及Java实现"></a>访问者模式的概念及Java实现</h3><h3 id="中介者模式的概念及Java实现"><a href="#中介者模式的概念及Java实现" class="headerlink" title="中介者模式的概念及Java实现"></a>中介者模式的概念及Java实现</h3><h3 id="解释器模式的概念及Java实现"><a href="#解释器模式的概念及Java实现" class="headerlink" title="解释器模式的概念及Java实现"></a>解释器模式的概念及Java实现</h3>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>《我们内心的冲突》读书笔记</title>
    <link href="/2021/01/07/2020-01-18-heartClash/"/>
    <url>/2021/01/07/2020-01-18-heartClash/</url>
    
    <content type="html"><![CDATA[<h2 id="冲突特征"><a href="#冲突特征" class="headerlink" title="冲突特征"></a>冲突特征</h2><ul><li><p>典型特征，其中之一就是，会产生自怨自怜的想法，总感觉自己“很弱小”“很无助”“很卑微”“很可怜”“很软弱”。</p></li><li><p>第二个特征就是理所应当地认为自己不如别人。他会觉得所有人都比他优秀，比他有魅力，比他聪明，比他素质高，比他有价值。</p></li><li><p>这类人的第三个典型特征，也是他讨好别人的一个体现，就是他会有意识地用别人对他的态度，来定义自己的价值。</p></li><li><p>他们会无意识地通过突出一种倾向，而将其他与之相矛盾的倾向消灭掉，以期实现对人格的重新塑造，这也是神经症患者解决冲突的一种主要方法。</p></li><li><p>自己长期不满的根源在于自己的内心，所以即使别人满足了他的要求，他依然会欲求不满。</p></li></ul><h2 id="理想化形象"><a href="#理想化形象" class="headerlink" title="理想化形象"></a>理想化形象</h2><ul><li>理想化形象，从本质上说是种无意识现象。</li><li>理想化形象和真正的理想之间，存在着巨大差别。理想化形象是一座静止的雕像，是顶礼膜拜的固执想法，你永远无法将其变成现实。而理想是动态的，能鼓舞人们不断去靠近，这种牵引力弥足珍贵，对于人的成长和发展必不可少。理想教会人们谦逊，而理想化形象只能让人自视过高。不仅如此，因为理想化形象会让人无视自己的缺点，或者夸大自己的缺点，所以它还会成为实现理想道路上的绊脚石。</li></ul><h2 id="外化作用"><a href="#外化作用" class="headerlink" title="外化作用"></a>外化作用</h2><ul><li>他们是为了躲避基本冲突而创造出理想化形象，以便从中得到庇护，然而，当理想化形象和真自我之间的差距不断扩大，大到压力和张力让他们无法承受的时候，庇护感就会消失。此时，他们再也不能在自我的范围内采取任何措施，也无法从中得到什么，只有彻底逃离自我，将一切都视为是自身之外的事。</li></ul><h2 id="理想化形象下的愤怒：（自我憎恨的外化形式）"><a href="#理想化形象下的愤怒：（自我憎恨的外化形式）" class="headerlink" title="理想化形象下的愤怒：（自我憎恨的外化形式）"></a>理想化形象下的愤怒：（自我憎恨的外化形式）</h2><ul><li>肆意发泄内心不满时，很容易让怒火燃烧到自身之外，会迁怒到别人身上，而这种迁怒，可以是因为别人的某个具体过错，也可能是无缘无故地发泄。即使是有别人的错误做导火索，也必然是因为他们无法忍受自己身上也有同样的错误。</li><li>患者总是在担惊受怕。有时候，他的忧心忡忡会浮现在意识中，由于他对自己的一些缺点深恶痛绝，所以他也害怕这些缺点会招来别人的厌恶，严重的服从是这种外化作用最主要的结果。</li><li>患者将注意力投向自己的身体，而且多是些小毛病。<br>否认内心的冲突，并将一切归咎于外部因素。他很愿意讲述自己遭遇过的各种挫折，却不愿意反省自己应该为其承担什么责任。<br>只要他在精神上仍是这副“我不存在问题”的样子，他就不可能将任何获得的真知灼见运用到生活中去，哪怕他对自己的了解越来越多，也无法改变什么。</li></ul><h3 id="如果真的存在尚未解决的冲突，通常会导致三方面的紊乱，它们都会让患者的精力被消耗，或是用在不该用的地方。"><a href="#如果真的存在尚未解决的冲突，通常会导致三方面的紊乱，它们都会让患者的精力被消耗，或是用在不该用的地方。" class="headerlink" title="如果真的存在尚未解决的冲突，通常会导致三方面的紊乱，它们都会让患者的精力被消耗，或是用在不该用的地方。"></a>如果真的存在尚未解决的冲突，通常会导致三方面的紊乱，它们都会让患者的精力被消耗，或是用在不该用的地方。</h3><ul><li>其一，是优柔寡断。<br>这类人会故意逃避选择，所以他们的优柔寡断未必能被察觉。往往意识不到自己的茫然，却能有意地掩饰自己优柔寡断的一面。</li><li>第二种耗费精力的紊乱是：办事低效。<br>节奏缓慢只是低效率的表现之一，常见的还有健忘和笨拙。</li><li>第三种耗费精力的紊乱是：普遍性懈怠。<br>导致这一结果的原因，通常是由于他们严重的自我隔离，以及对于生活方向的迷失。长久以来的内心压抑，并对任何努力持否定态度，导致他们的状态总是死气沉沉，即使偶尔有激情萌动，也只是转瞬即逝。理想化形象和虐待倾向，是他们的病因所在。由于理想化形象，他们不屑于像别人那样服从努力，认为这种过程太平庸了，和自己的理想化形象差距太大，他们宁肯只在幻想中做个精英，也不肯去行动。理想化形象带来了自信，而这份自信禁不起自卑的腐蚀，他们觉得自己做不成什么有意义的事，于是把关于工作的兴趣和激情干脆埋葬掉。虐待倾向之下，患者会在面对所有具有攻击性的事物时畏缩不前，尤其是在虐待倾向被压抑（表现为倒错型虐待倾向）的时候最为明显。他们会以激烈的方式去修正自己的错误，但因为用力过猛，最后反而会让精神更加萎靡。普遍性懈怠影响力之巨大，不仅体现在他们的言行上，还包括情绪。只要内心的冲突一天没有解决，精力就会被持续地浪费。从本质上说，神经症是特定文化的产物，因此，它对人们品质和潜能的损害，实际也是对特定文化的控告。<br>当患者的冲突尚未解决时，不仅会精力分散，还会导致道德观的分裂。这里所说的道德观，包括道德准则和足以影响人际关系与自身发展的态度、感受和行为。精力分散会造成精力的浪费，同理，道德观的分裂也会让道德体系出现巨大的缺失。这种缺失来源于他们向着几种矛盾的方向共同发力，还来源于他们对于这种矛盾的极力掩饰。当道德遭到破坏，首当其冲的表现就是真诚流失，而虚伪自私的一面却在增长。禅宗著作中认为：真诚的人必然内心完整。之所以分享这一点，是因为与我们临床治疗的结论如出一辙：内心分裂的人，不可能完全真诚。</li></ul><h2 id="绝望"><a href="#绝望" class="headerlink" title="绝望"></a>绝望</h2><ul><li>无法实现理想化形象，也会让患者感到绝望。</li><li>绝望的根源，是患者放弃解决冲突的希望，任凭自己的人格继续分裂。</li><li>他们的绝望感并不是真的来源于这些外部因素。在他们的概念里，自己永远得不到快乐和自由，也不会取得任何成就，他们已经被抛弃了。</li><li>一切绝望都源自对“做自己”不再抱有希望。每个时代的哲学家都在强调“做自己”是多么重要，强调“做自己”一旦受阻，便会产生出绝望，就连东方的禅宗也将“做自己”做为核心主题。在这里我引用现代学者约翰·麦克马雷的一句话：“除了彻底地成为我们自己外，我们的存在没有别的意义。”</li></ul><h2 id="虐待倾向"><a href="#虐待倾向" class="headerlink" title="虐待倾向"></a>虐待倾向</h2><ul><li>他所有的追求，都是为了满足自己对快感和激情的渴望。对于心理健康、内心平衡的正常人，不需要靠这些来刺激自己。越是成熟的人，越不会关注这些。但有虐待倾向的人，其内心除了愤怒和好胜心外再无他物，其他的感觉早已被压制住了。</li><li>绝望的人也会疯狂地追求某个目标，与前面的论断并不矛盾。因为患者想要的只是个赝品，他希望获得的不是真正的自由，或真实的自己，那些构成他绝望的要素依然纹丝不动，所以他并没能力改变什么。</li></ul><h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><ul><li>想要解决冲突，必须改变人格中造成冲突的因素。这种办法虽然可以治本，但实行起来不会一帆风顺。任何内心的改变，都不是件容易的事，正因如此，我们才会绞尽脑汁想找“捷径”。有人经常会问：“我看到了自己的基本冲突，是不是就能解决问题了？”回答显然是：不能。</li><li>我们把神经症视为患者围绕基本冲突建立起的防御堡垒，就可以将对神经症的性格结构进行分析的工作划分为两个大的步骤。<br>第一步，查明患者为了解决冲突而做的无意识努力，以及这些努力对其人格的影响。<br>第二步，对基本冲突本身进行处理。在这一步骤中，不仅要让患者对基本冲突有大致的了解，还要帮他弄懂冲突造成了怎样的影响，又是如何造成的。也就是说，患者需要知道那些相互矛盾的倾向，以及它们之间是如何相互干扰的。</li><li>试图在冲突中达成妥协是根本不可能的。理想化形象、外化作用并不能解决冲突，只是掩盖了冲突。拆除理想化形象之前，一定先要让他获得足够的现实性力量，否则他无法承受由此带来的打击。</li></ul><h3 id="分析疗法的目标"><a href="#分析疗法的目标" class="headerlink" title="分析疗法的目标"></a>分析疗法的目标</h3><ol><li>患者要具备对自己负责的能力，即感受到自己生命中澎湃的活力和对责任的担当，他敢于决策，并且敢于承担后果。同时出现的，是患者对他人负责的能力，他能毅然承担下他所认同的义务，无论这些义务涉及的是子女、父母、朋友、员工、同事、团体还是国家。</li><li>获得内心的独立。对于别人的看法和价值观，患者既不无视，但也不会盲目跟从；他能建立起一套属于自己的价值观，并运用在生活中；能在人际关系中，尊重别人的个性，并且不侵害别人的权益，做到真正的人格平等，互利共存，实现真正的民主精神。</li><li>唤醒内在的感情源泉。即无论是爱或恨，悲或喜，恐惧或渴求，所有感情都能觉醒并焕发生机。患者拥有表达感情的能力，又能很好地控制它们。我们在这里要着重强调爱与友善的能力，因为它们太至关重要。爱不是以寄生的方式去依附别人，也不是以虐待的方式去控制别人。爱是什么？爱是一种关系。约翰·麦克马雷说：“这种关系的本身，就是目的；我们因为这种关系而互相连接，对人类来说，这样的分享体验是最自然的事，因为我们天生就有与他人互动的愿望。我们向对方敞开心扉，表达心声，相互理解和包容，在合二为一的感受和生活中，分享彼此的快乐，满足彼此的心愿。  </li></ol><p><strong>实现人格的完整，对待任何人和事，都要做到一心一意，中正真诚。具体说，就是卸下所有伪装，不用虚伪的假象欺骗别人和欺骗自己；真情实意；将自己完全投入感情、事业和自己坚持的信念中。我们内心的冲突被解决多少，距离这一目标就近了多少。</strong></p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>IDEA查看类关系图</title>
    <link href="/2021/01/07/2020-01-17-classRelation/"/>
    <url>/2021/01/07/2020-01-17-classRelation/</url>
    
    <content type="html"><![CDATA[<h2 id="idea-mac-查看类关系图"><a href="#idea-mac-查看类关系图" class="headerlink" title="idea-mac-查看类关系图"></a>idea-mac-查看类关系图</h2><ol><li><p>看继承关系</p><pre><code>     快捷键 control + h查看hierarchy,只能查看向上向下继承关系，而不能看实现了哪些接口。     右键选择Diagrams（也可以使用快捷键command+alt+u，更快捷），然后显示</code></pre></li><li><p>看接口的实现关系</p><pre><code>     command + alt + B会显示出跟这个接口有关系的类。 然后加command+all，鼠标弄开，然后回车，全出来     然后把需要的拖过来，形成树状图。(我暂时还没找到快捷的方法)     鼠标放在某个类上，command+enter，直接进看这个类     蓝色的实线是继承关系     白色虚线表示这种关系public abstract class AbstractOrder&lt;T extends BaseOrderResultVO&gt; &#123;  ----》抽象类+泛型</code></pre></li><li><p>选中类，然后command+option+shift+u</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>springboot日志体系---log4j2</title>
    <link href="/2021/01/07/2020-03-09-log4jForSpringboot/"/>
    <url>/2021/01/07/2020-03-09-log4jForSpringboot/</url>
    
    <content type="html"><![CDATA[<h2 id="springboot下log4j2日志的使用"><a href="#springboot下log4j2日志的使用" class="headerlink" title="springboot下log4j2日志的使用"></a>springboot下log4j2日志的使用</h2><ol><li>将springboot内置日志去掉，并引入log4j2  </li></ol><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;    &lt;exclusions&gt;        &lt;exclusion&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;        &lt;/exclusion&gt;    &lt;/exclusions&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-log4j2&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><ol start="2"><li>在resource下面添加log4j2.xml配置文件<br>如果你不添加，springboo会提示你没有对应文件，并使用默认的配置文件，这个时候级别可以在application.properties中配置<br>logging.level.root=error<br>默认的log4j2配置:  </li></ol><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  &lt;configuration status=&quot;OFF&quot;&gt;    &lt;appenders&gt;      &lt;Console name=&quot;Console&quot; target=&quot;SYSTEM_OUT&quot;&gt;        &lt;PatternLayout pattern=&quot;%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n&quot;/&gt;      &lt;/Console&gt;    &lt;/appenders&gt;    &lt;loggers&gt;      &lt;root level=&quot;error&quot;&gt;        &lt;appender-ref ref=&quot;Console&quot;/&gt;      &lt;/root&gt;    &lt;/loggers&gt;  &lt;/configuration&gt;  </code></pre><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><p>appenders里设置日志的输出方式、级别和格式<br>loggers里设置全局的级别和绑定appenders里的name  </p><p>File 日志输出到文件，可配置覆盖还是追加<br>RollingFile “滚动文件”可作为按日输出日志的方式<br>Console 控制台日志<br>PatternLayout 格式化输出日志<br>ThresholdFilter“阈值筛选器” 可单独设置appender的输出级别<br>loggers里需要匹配每个appender的名称 name  </p><p>详细参见官网：<a href="https://logging.apache.org/log4j/2.x/manual/configuration.html#AutomaticConfiguration">https://logging.apache.org/log4j/2.x/manual/configuration.html#AutomaticConfiguration</a>  </p><h3 id="需求：打印到控制台的日志级别为Error，日志文件里保存的是INFO级别的日志"><a href="#需求：打印到控制台的日志级别为Error，日志文件里保存的是INFO级别的日志" class="headerlink" title="需求：打印到控制台的日志级别为Error，日志文件里保存的是INFO级别的日志"></a>需求：打印到控制台的日志级别为Error，日志文件里保存的是INFO级别的日志</h3><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;Configuration status=&quot;OFF&quot;&gt;    &lt;Appenders&gt;        &lt;Console name=&quot;Console&quot; target=&quot;SYSTEM_OUT&quot;&gt;            &lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt;            &lt;ThresholdFilter level=&quot;ERROR&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;/&gt;            &lt;PatternLayout pattern=&quot;%d&#123;yyyy.MM.dd &#39;at&#39; HH:mm:ss z&#125; %-5level %class&#123;36&#125; %M() @%L - %msg%n&quot;/&gt;        &lt;/Console&gt;        &lt;File name=&quot;ERROR&quot; fileName=&quot;logs/error.log&quot; append=&quot;false&quot;&gt;            &lt;ThresholdFilter level=&quot;error&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;/&gt;            &lt;PatternLayout pattern=&quot;%d&#123;yyyy.MM.dd &#39;at&#39; HH:mm:ss z&#125; %-5level %class&#123;36&#125; %M() @%L - %msg%n&quot;/&gt;        &lt;/File&gt;        &lt;!--这个会打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档--&gt;        &lt;RollingFile name=&quot;RollingFile&quot; fileName=&quot;logs/app.log&quot;                     filePattern=&quot;log/$$&#123;date:yyyy-MM&#125;/app-%d&#123;MM-dd-yyyy&#125;-%i.log.gz&quot;&gt;            &lt;PatternLayout pattern=&quot;%d&#123;yyyy.MM.dd &#39;at&#39; HH:mm:ss z&#125; %-5level %class&#123;36&#125; %M() @%L - %msg%n&quot;/&gt;            &lt;SizeBasedTriggeringPolicy size=&quot;5MB&quot;/&gt;        &lt;/RollingFile&gt;    &lt;/Appenders&gt;    &lt;Loggers&gt;        &lt;Root level=&quot;INFO&quot;&gt;            &lt;appender-ref ref=&quot;ERROR&quot; /&gt;            &lt;appender-ref ref=&quot;RollingFile&quot;/&gt;            &lt;appender-ref ref=&quot;Console&quot;/&gt;        &lt;/Root&gt;    &lt;/Loggers&gt;&lt;/Configuration&gt;</code></pre><p>分析一下就很清晰了：<br>三个appender：Console、File、RollingFile  </p><ul><li>Console 通过ThresholdFilter过滤规则只输出ERROR级别的错误(onMatch=”ACCEPT” onMismatch=”DENY” 匹配到的接受，没有匹配的走人)  </li><li>File 也通过ThresholdFilter的方式输出到日志，当然了append=”false” 会在服务每次启动的时候清空日志(覆盖)  </li><li>RollingFile 因为日志全局设置的为INFO，所以不需要ThresholdFilter,这里只需要指定filePattern和SizeBasedTriggeringPolicy就行了  </li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="可能遇到的问题：其他依赖下引入默认日志依赖"><a href="#可能遇到的问题：其他依赖下引入默认日志依赖" class="headerlink" title="可能遇到的问题：其他依赖下引入默认日志依赖"></a>可能遇到的问题：其他依赖下引入默认日志依赖</h3><h4 id="maven解释"><a href="#maven解释" class="headerlink" title="maven解释"></a>maven解释</h4><ul><li>exclusions：排除传递依赖<br>在mavenB项目中引入mavenA项目依赖，通过依赖传递，会将mavenA中的jar包传递进来,如果B中不需要A中的某个jar包就可以使用以下标签   </li></ul><pre><code>&lt;exclusions&gt;    &lt;exclusion&gt;    &lt;groupId&gt;&lt;/groupId&gt;    &lt;artifactId&gt;&lt;/artifactId&gt;    &lt;/exclusion&gt;&lt;/exclusions&gt;</code></pre><ul><li>maven依赖树查看：<br>mvn dependency:tree<br>如果要输出到文件，找到pom文件的位置 进入命令行<br>输入命令：<br>mvn dependency:tree &gt;/Users/raines/IdeaProjects/JavaPro/raines-learn/src/main/resources/tree.txt<br>只查看关系的jar包<br>mvn dependency:tree -Dverbose -Dincludes=groupId:artifactId:version:artifactId:version<br>输入命令：<br>mvn dependency:tree -Dverbose -Dincludes=org.springframework:spring-tx  </li></ul><h4 id="以引入spring-boot-starter-data-redis为例"><a href="#以引入spring-boot-starter-data-redis为例" class="headerlink" title="以引入spring-boot-starter-data-redis为例"></a>以引入spring-boot-starter-data-redis为例</h4><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;    &lt;exclusions&gt;        &lt;exclusion&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;        &lt;/exclusion&gt;    &lt;/exclusions&gt;&lt;/dependency&gt;</code></pre><p>去掉spring-boot-starter-web下的依赖后，发现还是无法使用引入的log4j2，遂查看maven依赖树，如下：</p><pre><code>[INFO] +- org.springframework.boot:spring-boot-starter-data-redis:jar:2.1.7.RELEASE:compile[INFO] |  +- org.springframework.boot:spring-boot-starter:jar:2.1.7.RELEASE:compile[INFO] |  |  +- org.springframework.boot:spring-boot:jar:2.1.7.RELEASE:compile[INFO] |  |  +- org.springframework.boot:spring-boot-autoconfigure:jar:2.1.7.RELEASE:compile[INFO] |  |  +- org.springframework.boot:spring-boot-starter-logging:jar:2.1.7.RELEASE:compile[INFO] |  |  |  +- ch.qos.logback:logback-classic:jar:1.2.3:compile[INFO] |  |  |  |  \- ch.qos.logback:logback-core:jar:1.2.3:compile[INFO] |  |  |  +- org.apache.logging.log4j:log4j-to-slf4j:jar:2.11.2:compile[INFO] |  |  |  |  \- org.apache.logging.log4j:log4j-api:jar:2.11.2:compile[INFO] |  |  |  \- org.slf4j:jul-to-slf4j:jar:1.7.26:compile[INFO] |  |  \- javax.annotation:javax.annotation-api:jar:1.3.2:compile[INFO] |  +- org.springframework.data:spring-data-redis:jar:2.1.10.RELEASE:compile[INFO] |  |  +- org.springframework.data:spring-data-keyvalue:jar:2.1.10.RELEASE:compile[INFO] |  |  |  \- org.springframework.data:spring-data-commons:jar:2.1.10.RELEASE:compile[INFO] |  |  +- org.springframework:spring-tx:jar:5.1.9.RELEASE:compile[INFO] |  |  +- org.springframework:spring-oxm:jar:5.1.9.RELEASE:compile[INFO] |  |  \- org.springframework:spring-context-support:jar:5.1.9.RELEASE:compile[INFO] |  \- io.lettuce:lettuce-core:jar:5.1.8.RELEASE:compile</code></pre><p>发现spring-boot-starter-data-redis依赖中，再次引入了spring-boot-starter-logging的依赖，遂再次删除  </p><pre><code>    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;        &lt;exclusions&gt;            &lt;exclusion&gt;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;            &lt;/exclusion&gt;        &lt;/exclusions&gt;    &lt;/dependency&gt;</code></pre><p>删除后再次查看maven依赖树发现已无spring-boot-starter-logging依赖：  </p><pre><code>[INFO] +- org.springframework.boot:spring-boot-starter-data-redis:jar:2.1.7.RELEASE:compile[INFO] |  +- org.springframework.boot:spring-boot-starter:jar:2.1.7.RELEASE:compile[INFO] |  |  +- org.springframework.boot:spring-boot:jar:2.1.7.RELEASE:compile[INFO] |  |  +- org.springframework.boot:spring-boot-autoconfigure:jar:2.1.7.RELEASE:compile[INFO] |  |  \- javax.annotation:javax.annotation-api:jar:1.3.2:compile[INFO] |  +- org.springframework.data:spring-data-redis:jar:2.1.10.RELEASE:compile[INFO] |  |  +- org.springframework.data:spring-data-keyvalue:jar:2.1.10.RELEASE:compile[INFO] |  |  |  \- org.springframework.data:spring-data-commons:jar:2.1.10.RELEASE:compile[INFO] |  |  +- org.springframework:spring-tx:jar:5.1.9.RELEASE:compile[INFO] |  |  +- org.springframework:spring-oxm:jar:5.1.9.RELEASE:compile[INFO] |  |  \- org.springframework:spring-context-support:jar:5.1.9.RELEASE:compile[INFO] |  \- io.lettuce:lettuce-core:jar:5.1.8.RELEASE:compile</code></pre><p>至此，已删除全部的依赖，使用log4j2成功</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Sql VIEW（视图）</title>
    <link href="/2021/01/07/2020-01-10-sqlView/"/>
    <url>/2021/01/07/2020-01-10-sqlView/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是视图？"><a href="#什么是视图？" class="headerlink" title="什么是视图？"></a>什么是视图？</h2><ul><li>在 SQL 中，视图是基于 SQL 语句的结果集的可视化的表。</li><li>视图是虚拟的表，本身不包含数据，也就不能对其进行索引操作。</li><li>对视图的操作和对普通表的操作一样。</li></ul><h2 id="视图的优点："><a href="#视图的优点：" class="headerlink" title="视图的优点："></a>视图的优点：</h2><ul><li>简化复杂的 SQL 操作，比如复杂的连接；</li><li>只使用实际表的一部分数据；</li><li>通过只给用户访问视图的权限，保证数据的安全性；</li><li>更改数据格式和表示。</li></ul><h2 id="视图的写法"><a href="#视图的写法" class="headerlink" title="视图的写法"></a>视图的写法</h2><p>eg：</p><pre><code>CREATE VIEW myview ASSELECT fen.name,rec.state,rec.name laFROM t_fence fenLEFT JOIN t_fence_record rec ON fen.id = rec.fenceId;</code></pre><ul><li>myview:视图名</li><li>fen.name,rec.state,rec.name la:表字段，如果多表中有重复字段，则需要对重复字段重命名。</li></ul><hr><pre><code>CREATE VIEW myview ASSELECT Concat(name, &quot;,&quot;,depCode) AS concat_col, id*createTime AS compute_colFROM t_fence;</code></pre><ul><li>Concat(name, “,”,depCode)：把name和depCode字段通过逗号连接起来</li><li>id*createTime AS compute_col：把字段id和createTime相乘的结果起别名为compute_col</li></ul>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Maven手动导入jar包</title>
    <link href="/2021/01/07/2020-01-10-manualMavenJar/"/>
    <url>/2021/01/07/2020-01-10-manualMavenJar/</url>
    
    <content type="html"><![CDATA[<p>一、pom文件依赖配置</p><pre><code>   &lt;dependency&gt;        &lt;groupId&gt;com.oracle&lt;/groupId&gt;        &lt;artifactId&gt;ojdbc6&lt;/artifactId&gt;        &lt;version&gt;11.2.0.3&lt;/version&gt;    &lt;/dependency&gt;</code></pre><p>二、下载ojdbc6.jar（<a href="http://www.oracle.com/technetwork/apps-tech/jdbc-112010-090769.html">http://www.oracle.com/technetwork/apps-tech/jdbc-112010-090769.html</a> ）</p><p>三、通过控制台执行命令，将ojdbc.jar安装到本地库：</p><blockquote><p>mvn install:install-file -Dfile=/Users/raines/Downloads/ojdbc6.jar -DgroupId=com.oracle -DartifactId=ojdbc6 -Dversion=11.2.0.3 -Dpackaging=jar -DgeneratePom=true -DlocalRepositoryPath=/Users/raines/.m2/repository</p></blockquote><p>成功安装到本地库：<br><img src="../images/program/manualMavenJarSuccess.jpg" alt="Image text"></p><p>四、说明</p><p>-DgroupId=com.oracle : 指定当前包的groupId为com.oracle</p><p>-DartifactId=ojdbc6 : 指定当前的artifactfactId为ojdbc6</p><p>-Dversion=11.2.0.3 : 指定当前包的version为11.2.0.3</p><p>-Dfile=A:\Develop\jar\ojdbc6.jar : 指定要打的包的文件位置</p><p>-DlocalRepositoryPath=/Users/raines/.m2/repository : 本地maven repo路径</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>观点</title>
    <link href="/2021/01/07/2020-01-09-viewpoint/"/>
    <url>/2021/01/07/2020-01-09-viewpoint/</url>
    
    <content type="html"><![CDATA[<h3 id="“996工作制”如何影响你自己的职业生涯？"><a href="#“996工作制”如何影响你自己的职业生涯？" class="headerlink" title="“996工作制”如何影响你自己的职业生涯？"></a>“996工作制”如何影响你自己的职业生涯？</h3><p>“996工作制”对个人的影响，包括如下几个方面：</p><p>◇压缩了员工的业余时间——因此也就减少了你的自学【时间】</p><p>　　人的精力是有限的，而不是能仅靠意志就能不断延续的。推荐一本书《精力管理》，精力的开销建议大家通过机会成本来严加控制，以求达到精力的价值最大化。（“机会成本”，通俗地说就是：把某项资源投入某种特定用途后所放弃的在其他用途中该项资源所能获得的利益。）</p><p>　　大多数人都知道——加班意味着业余时间减少。业余时间减少也就意味着：你更加没有时间去自学，去提升自己的能力。</p><p>　　如果你的能力得不到提升，你在人力市场上的【议价能力/谈判筹码】也就得不到提升。然后你就不得不继续接受这种变态的工作时间。</p><p>　　俺把这称之为【996怪圈】——它是一个恶性循环（恶性正反馈），你陷入其中，并越来越无法自拔。</p><p>◇消耗了员工在业余时间的【自控力】——因此也就减少了你的自学【动力】</p><p>　　首先，大部分人的工作都【不是】自己的兴趣所在。</p><p>　　其次，超长的工作时间，使得你必须长时间面对自己不感兴趣的工作内容，所以你必须动用“自控力”以完成自己的工作。</p><p>　　最后，当你忙碌了一天，终于回家的时候，很可能你的自控力已消耗殆尽。</p><p>　　结论就是：如果你的工作不是你的兴趣所在，长时间加班之后，回到家里，你很难再有动力去学习其它新技能。</p><p>　　超长加班导致的【自控力损耗】，同样会让你处于【996怪圈】。</p><p>◇对【健康】的负面影响</p><p>◇对【家庭生活】的负面影响</p><p>◇如何跳出996的怪圈？</p><p>在一个竞争性的社会中，我们的选择自由是基于这一事实：如果某一个人拒绝满足我们的希望，我们可以转向另一个人。</p><p>当产权明确并且交易成本趋向于零，任何资源最终都会（通过交易）转移到能最大化利用该资源价值的人手中。</p><h3 id="DOKW模型"><a href="#DOKW模型" class="headerlink" title="DOKW模型"></a>DOKW模型</h3><p>DIKW 模型</p><p>wisdom<br>knowledge<br>information<br>data</p><p>很多人会有一个【误解】——以为“长寿命”的事物也代表了“高价值”。其实不然！</p><p>比如说，某个爆炸性的娱乐新闻，可能会在人们的脑海中留存很多年，但这【并不】代表该新闻具有足够高的价值（娱乐新闻并【不】提升你的个人能力）<br>因此，你还需要懂得——如何从长寿命的事物中筛选出【高价值】的事物。<br>通俗地说——I 没啥价值（或者说“价值极低”）；K 有一定的价值；而 W 才属于高价值。</p><p>比如说“某某明星出轨了”这个就属于 I 层面——仅仅是一个信息，而【不】算知识。这个信息能提升你的能力吗？不能！能完善你的知识结构吗？不能！</p><p>◇“消遣性内容”的【毒性】</p><p>很多人【低估】了“消遣性内容”的【危害性/危险性】。他们误以为——这些东西仅仅是浪费时间。<br>实际上，比“浪费时间”更危险的是【成瘾性】。只要你理解了前一个小节所说【恶性循环】，也就能理解这个玩意儿的【成瘾性】。<br>如果根据事物的【损益程度】进行归类，所有事物大致可以分类为：</p><ol><li>对你有益的</li><li>对你无益也无害的</li><li>对你有害的<br>　　而“消遣性内容”很明显属于【有害】的这类，也就是本小节标题所说的“毒性”</li></ol><p>◇换个角度思考</p><p>　　“娱乐至死的时代”当然让人感到悲哀。但如果你换一个角度看问题，或许就【没】这么悲哀了——<br>当大部分人都沉迷于心理舒适区，只要你能跳出来，（在很多方面）你都更容易脱颖而出。换句话说，你就获得了巨大的【个人竞争优势】。</p><p>◇学习需要精准</p><p>对那些【舍本逐末】的人，体现出【多即是少】；<br>对那些【舍末逐本】的人，体现出【少即是多】。</p><p>◇欲速则不达</p><p>　　所谓的“求快”，说得更直白一些就是【急功近利】。不得不说，如今的很多年轻人都有这个毛病。</p><p>　　当然啦，会有很多年青的读者抱怨说：如今的生存压力这么大，不得不追求功利。比较搞笑的是，这里存在一个充满反讽意味的怪圈——越是急功近利的人，反而越【得不到】功利。</p><p>◇慢即是快</p><p>　　作为对比，那些愿意花足够的时间与精力去搞定【基本功】，打好【基础】的人，刚开始好像很慢，但后续的加速度会越来越快。这个过程有点类似“指数函数”。这类函数在刚开始的时候，斜率很小（甚至很接近于【零】），而且初期的增长趋势很类似“线性函数”；但在某个【转折点】之后，其斜率会急剧上升，并大幅度超越“线性函数”。</p><p>　　但还有一小撮人，他们的能力曲线竟然是“边际递【增】”。为啥会这样捏？同样是因为互联网。</p><p>　　在互联网【没】出现之前，要想让“个人能力曲线”达到“边际递【增】”是非常非常难滴！有了互联网之后，大部分人沉迷在【娱乐至死】的状态，但少数【没有】沉迷其中的人，如果善于学习（尤其是“系统性学习”），如果充满求知的欲望，如果运气还不算太差……在互联网这个大环境下，完全有可能达到“边际递【增】”的状态。</p><p>◇“中年职场危机”的根源</p><p>　　如果你理解了大多数人的能力曲线是这种性质，就有助于理解【中年职场危机】的本质——<br>　　刚工作的年轻人，大都单身（未婚），没小孩，不用顾家（一人吃饱全家不饿）。而且身体好，能承受高强度工作压力，对薪酬要求也没那么高；<br>　　（同一个人）到了中年，通常已婚，大都有小孩，多半要养家，身体也没有以前那么好，无法承受高强度工作压力，而薪酬水平的要求却增加了很多（相比年轻时）。<br>　　简而言之，中年员工在“成本 ＆ 健康”方面，都变差了（优势下降了）；如果“综合能力”的提升无法抵消上述这两者的下降，（在上司或老板眼里）这个人的【性价比】就下降了——这也就是“中年职场危机”的主要根源。<br>　　但对于那一小撮能够达到“边际【递增】”的人，他们的性价比不但没下降，反而上升了——自然【不】存在所谓的“中年职场危机”。</p><p>◇关于“工作年限”的【误区】</p><p>　　很多人常犯的一个【错误】是——以【线性】的方式思考问题。容易犯这个错误的人，也就容易把“工作年限”混淆为“综合能力”。<br>　　但实际情况是——“工作年限”【不】等于“工作经验”；“工作经验”也【不】等于“综合能力”。<br>　　比如说：对某些工作岗位（工种），由于其工作的性质＆内容是【高度重复】滴，“工作1年”与“工作10年”，积累的经验其实没啥区别。<br>　　再比如说：某些行业的工作，虽然有足够大的差异化，从而使得“工龄”能够转化为“工作经验”，但这些经验是高度【局限性】滴（只能用于该领域）。一旦该行业（领域）被颠覆，这些人之前积累的工作经验（行业经验）就再也没有用武之地了。换句话说，这些人虽然积累了足够多的经验，但依然很脆弱。他所在的行业如果被摧毁了，他的职业生涯也跟着完蛋了。</p><p>　在“综合能力”里面，那些【真正重要】的成分，通常是【跨行业/跨领域】滴！而且不受年龄限制（可以受用终身）。<br>　　举几个例子：<br>　　最近这几年，俺写了好多博文谈【学习能力 ＆ 思维能力】。因为这2个玩意儿就是【跨行业/跨领域】滴！<br>　　再比如说：前面提到的“自控力”也属于【跨行业/跨领域】的要素。</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>算法的时间复杂度</title>
    <link href="/2021/01/07/2020-01-09-timeComplex/"/>
    <url>/2021/01/07/2020-01-09-timeComplex/</url>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>算法的时间复杂度，用来度量算法的运行时间，记作: T(n) = O(f(n))。它表示随着 输入大小n 的增大，算法执行需要的时间的增长速度可以用 f(n) 来描述。</p><p>那么当我们拿到算法的执行次数函数 T(n) 之后怎么得到算法的时间复杂度呢？</p><p>1.我们知道常数项对函数的增长速度影响并不大，所以当 T(n) = c，c 为一个常数的时候，我们说这个算法的时间复杂度为 O(1)；如果 T(n) 不等于一个常数项时，直接将常数项省略。</p><p>2.我们知道高次项对于函数的增长速度的影响是最大的。n^3 的增长速度是远超 n^2 的，同时 n^2 的增长速度是远超 n 的。 同时因为要求的精度不高，所以我们直接忽略低此项。</p><p>3.因为函数的阶数对函数的增长速度的影响是最显著的，所以我们忽略与最高阶相乘的常数。</p><p>综合起来：如果一个算法的执行次数是 T(n)，那么只保留最高次项，同时忽略最高项的系数后得到函数 f(n)，此时算法的时间复杂度就是 O(f(n))。为了方便描述，下文称此为 大O推导法。</p><p>由此可见，由执行次数 T(n) 得到时间复杂度并不困难，很多时候困难的是从算法通过分析和数学运算得到 T(n)。对此，提供下列四个便利的法则，这些法则都是可以简单推导出来的，总结出来以便提高效率。</p><p>1.对于一个循环，假设循环体的时间复杂度为 O(n)，循环次数为 m，则这个<br>  循环的时间复杂度为 O(n×m)。</p><p>2.对于多个循环，假设循环体的时间复杂度为 O(n)，各个循环的循环次数分别是a, b, c…，则这个循环的时间复杂度为 O(n×a×b×c…)。分析的时候应该由里向外分析这些循环。</p><p>3.对于顺序执行的语句或者算法，总的时间复杂度等于其中最大的时间复杂度。</p><p>4.对于条件判断语句，总的时间复杂度等于其中 时间复杂度最大的路径 的时间复杂度。</p><h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><pre><code>void aFunc(int n) &#123;    for (int i = 0; i &lt; n; i++) &#123;        for (int j = i; j &lt; n; j++) &#123;            printf(&quot;Hello World\n&quot;);        &#125;    &#125;&#125;</code></pre><p>参考答案：<br> 当 i = 0 时，内循环执行 n 次运算，当 i = 1 时，内循环执行 n - 1 次运算……当 i = n - 1 时，内循环执行 1 次运算。<br> 所以，执行次数 T(n) = n + (n - 1) + (n - 2)……+ 1 = n(n + 1) / 2 = n^2 / 2 + n / 2。<br> 根据上文说的 大O推导法 可以知道，此时时间复杂度为 O(n^2)。</p><pre><code> void aFunc(int n) &#123;     for (int i = 2; i &lt; n; i++) &#123;         i *= 2;         printf(&quot;%i\n&quot;, i);     &#125; &#125;</code></pre><p> 参考答案：<br> 假设循环次数为 t，则循环条件满足 2^t &lt; n。<br> 可以得出，执行次数t = log(2)(n)，即 T(n) = log(2)(n)，可见时间复杂度为 O(log(2)(n))，即 O(log n)。</p><pre><code> long aFunc(int n) &#123;     if (n &lt;= 1) &#123;         return 1;     &#125; else &#123;         return aFunc(n - 1) + aFunc(n - 2);     &#125; &#125;</code></pre><p> 参考答案：<br> 显然运行次数，T(0) = T(1) = 1，同时 T(n) = T(n - 1) + T(n - 2) + 1，这里的 1 是其中的加法算一次执行。<br> 显然 T(n) = T(n - 1) + T(n - 2) 是一个斐波那契数列，通过归纳证明法可以证明，当 n &gt;= 1 时 T(n) &lt; (5/3)^n，同时当 n &gt; 4 时 T(n) &gt;= (3/2)^n。<br> 所以该方法的时间复杂度可以表示为 O((5/3)^n)，简化后为 O(2^n)。</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot中使用Redis</title>
    <link href="/2021/01/07/2020-01-09-springbootRedis/"/>
    <url>/2021/01/07/2020-01-09-springbootRedis/</url>
    
    <content type="html"><![CDATA[<p>一、引入依赖： </p><pre><code>    &lt;!-- redis --&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;    &lt;/dependency&gt;</code></pre><p>二、yml配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br> <span class="hljs-attr">redis:</span><br>   <span class="hljs-attr">database:</span> <span class="hljs-number">1</span><br>   <span class="hljs-attr">host:</span> <span class="hljs-number">172.29</span><span class="hljs-number">.32</span><span class="hljs-number">.53</span><br>   <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>   <span class="hljs-attr">password:</span><br></code></pre></td></tr></table></figure><p>三、代码封装</p><ol><li>系统统一缓存接口</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 系统统一缓存接口</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">DataCache</span> </span>&#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断缓存中是否有对应的value</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> exists(<span class="hljs-keyword">String</span> key);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 读取缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; T get(<span class="hljs-keyword">String</span> key);<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除对应的value</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> remove(<span class="hljs-keyword">String</span> key);<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 批量删除对应的value</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> keys</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> remove(<span class="hljs-keyword">String</span>... keys);<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 批量删除key</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pattern</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> removePattern(<span class="hljs-keyword">String</span> pattern);<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 写入缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> set(<span class="hljs-keyword">String</span> key, <span class="hljs-keyword">Object</span> value);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 存储map类型的数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key redis   key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mkey map key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mvalue  map value</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> setForMap(<span class="hljs-keyword">String</span> key, <span class="hljs-keyword">Object</span> mkey, <span class="hljs-keyword">Object</span> mvalue);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 存储map类型的数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> map</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> setForMap(<span class="hljs-keyword">String</span> key, Map map);<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 写入缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> expireTime 过期时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> set(<span class="hljs-keyword">String</span> key, <span class="hljs-keyword">Object</span> value, Long expireTime);<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从缓存的map对象中获取指定的key的值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> redisKey 缓存存储的key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mapKey map中的key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; T getFormMap(<span class="hljs-keyword">String</span> redisKey, <span class="hljs-keyword">String</span> mapKey);<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从缓存的map对象中获取指定的keys的值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> redisKey 缓存存储的key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mapKey map中的keys</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 值的集合</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-keyword">List</span>&lt;T&gt; getMultiFormMap(<span class="hljs-keyword">String</span> redisKey, Collection&lt;<span class="hljs-keyword">String</span>&gt; mapKeys);<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从redis的hash中查询整个map</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> redisKey 缓存key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 整个map</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; Map&lt;<span class="hljs-keyword">String</span>, T&gt; getAllFormMap(<span class="hljs-keyword">String</span> redisKey);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>redis缓存实现类</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@SuppressWarnings</span>(&#123; <span class="hljs-string">&quot;rawtypes&quot;</span>, <span class="hljs-string">&quot;unchecked&quot;</span> &#125;)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisCacheImpl</span> <span class="hljs-title">implements</span> <span class="hljs-title">DataCache</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> RedisTemplate redisTemplate;<br><br><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setRedisTemplate</span>(<span class="hljs-params">RedisTemplate redisTemplate</span>)</span> &#123;<br>RedisCacheImpl.redisTemplate = redisTemplate;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 批量删除对应的value</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-variable">keys</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">remove</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>... keys</span>)</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">String</span> key : keys) &#123;<br>remove(key);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 批量删除key</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-variable">pattern</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">removePattern</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> pattern</span>)</span> &#123;<br><span class="hljs-built_in">Set</span>&lt;Serializable&gt; keys = redisTemplate.keys(pattern);<br><span class="hljs-keyword">if</span> (keys.size() &gt; <span class="hljs-number">0</span>)<br>redisTemplate.delete(keys);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 删除对应的value</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-variable">key</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">remove</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> key</span>)</span> &#123;<br><span class="hljs-keyword">if</span> (exists(key)) &#123;<br>redisTemplate.delete(key);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断缓存中是否有对应的value</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-variable">key</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-function"><span class="hljs-title">exists</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> key</span>)</span> &#123;<br><span class="hljs-keyword">return</span> redisTemplate.hasKey(key);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 读取缓存</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-variable">key</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> key</span>)</span> &#123;<br><span class="hljs-built_in">Object</span> result = <span class="hljs-literal">null</span>;<br>ValueOperations&lt;Serializable, <span class="hljs-built_in">Object</span>&gt; operations = redisTemplate.opsForValue();<br>result = operations.get(key);<br><span class="hljs-keyword">return</span> (T)result;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 写入缓存</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-variable">key</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-variable">value</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> key, <span class="hljs-built_in">Object</span> value</span>)</span> &#123;<br><span class="hljs-built_in">boolean</span> result = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">try</span> &#123;<br>ValueOperations&lt;Serializable, <span class="hljs-built_in">Object</span>&gt; operations = redisTemplate.opsForValue();<br>operations.set(key, value);<br>result = <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 存储map类型的数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-variable">key</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-variable">map</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-function"><span class="hljs-title">setForMap</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> key, <span class="hljs-built_in">Map</span> map</span>)</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br>redisTemplate.opsForHash().putAll(key, map);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 存储map类型的数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param </span>key redis   key</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param </span>mkey map key</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param </span>mvalue  map value</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-function"><span class="hljs-title">setForMap</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> key, <span class="hljs-built_in">Object</span> mkey, <span class="hljs-built_in">Object</span> mvalue</span>)</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br>redisTemplate.opsForHash().put(key, mkey, mvalue);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 写入缓存</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-variable">key</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-variable">value</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> key, <span class="hljs-built_in">Object</span> value, Long expireTime</span>)</span> &#123;<br><span class="hljs-built_in">boolean</span> result = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">try</span> &#123;<br>ValueOperations&lt;Serializable, <span class="hljs-built_in">Object</span>&gt; operations = redisTemplate.opsForValue();<br>operations.set(key, value);<br>redisTemplate.expire(key, expireTime, TimeUnit.SECONDS);<br>result = <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-function"><span class="hljs-title">getFormMap</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> redisKey, <span class="hljs-built_in">String</span> mapKey</span>)</span> &#123;<br><span class="hljs-keyword">return</span> (T)redisTemplate.opsForHash().get(redisKey, mapKey);<br>&#125;<br><br><span class="hljs-keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="hljs-function"><span class="hljs-title">getMultiFormMap</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> redisKey, Collection&lt;<span class="hljs-built_in">String</span>&gt; mapKeys</span>)</span> &#123;<br><span class="hljs-keyword">return</span> redisTemplate.opsForHash().multiGet(redisKey, mapKeys);<br>&#125;<br><br><span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, T&gt; <span class="hljs-function"><span class="hljs-title">getAllFormMap</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> redisKey</span>)</span> &#123;<br><span class="hljs-keyword">return</span> redisTemplate.opsForHash().entries(redisKey);<br>&#125;<br>&#125;  <br></code></pre></td></tr></table></figure><p>3.单例工具类  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CacheUtils</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> DataCache dataCache;<br>    <br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setDataCache</span>(<span class="hljs-params">DataCache dataCache</span>)</span> &#123;<br>    CacheUtils.dataCache = dataCache;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DataCache <span class="hljs-function"><span class="hljs-title">getCacheInstance</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> dataCache;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.缓存配置类  </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableCaching</span> <span class="hljs-comment">// 启用缓存，这个注解很重要；</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisCacheConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">CachingConfigurerSupport</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * RedisTemplate配置</span><br><span class="hljs-comment">     * @param factory</span><br><span class="hljs-comment">     * @return</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    public <span class="hljs-type">RedisTemplate</span>&lt;<span class="hljs-type">String</span>, <span class="hljs-type">String</span>&gt; redisTemplate(<span class="hljs-type">RedisConnectionFactory</span> factory) &#123;<br>        <span class="hljs-type">StringRedisTemplate</span> template = <span class="hljs-keyword">new</span> <span class="hljs-type">StringRedisTemplate</span>(factory);<br>        <span class="hljs-type">Jackson2JsonRedisSerializer</span> jackson2JsonRedisSerializer = <span class="hljs-keyword">new</span> <span class="hljs-type">Jackson2JsonRedisSerializer</span>(<span class="hljs-type">Object</span>.<span class="hljs-keyword">class</span>);<br>        <span class="hljs-type">ObjectMapper</span> om = <span class="hljs-keyword">new</span> <span class="hljs-type">ObjectMapper</span>();<br>        om.setVisibility(<span class="hljs-type">PropertyAccessor</span>.<span class="hljs-type">ALL</span>, <span class="hljs-type">JsonAutoDetect</span>.<span class="hljs-type">Visibility</span>.<span class="hljs-type">ANY</span>);<br>        om.enableDefaultTyping(<span class="hljs-type">ObjectMapper</span>.<span class="hljs-type">DefaultTyping</span>.<span class="hljs-type">NON_FINAL</span>);<br>        jackson2JsonRedisSerializer.setObjectMapper(om);<br>        template.setValueSerializer(jackson2JsonRedisSerializer);<span class="hljs-comment">//如果key是String 需要配置一下StringSerializer,不然key会乱码 /XX/XX</span><br>        template.setHashValueSerializer(jackson2JsonRedisSerializer);<br>        template.afterPropertiesSet();<br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>5.使用例子<br>存  </p><blockquote><p>CacheUtils.getCacheInstance().set(“demo2”,”passsword”,1l);<br>取<br>CacheUtils.getCacheInstance().get(“username”);  </p></blockquote>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>我的心曾悲伤七次</title>
    <link href="/2021/01/07/2020-01-09-sad/"/>
    <url>/2021/01/07/2020-01-09-sad/</url>
    
    <content type="html"><![CDATA[<p>第一次，当它本可进取时，却故作谦卑； </p><p>第二次，当它在空虚时，用爱欲来填充； </p><p>第三次，在困难和容易之间，它选择了容易； </p><p>第四次，它犯了错，却借由别人也会犯错来宽慰自己； </p><p>第五次，它自由软弱，却把它认为是生命的坚韧； </p><p>第六次，当它鄙夷一张丑恶的嘴脸时，却不知那正是自己面具中的一副； </p><p>第七次，它侧身于生活的污泥中，虽不甘心，却又畏首畏尾。 </p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Markdown语法总结</title>
    <link href="/2021/01/07/2020-01-09-markdownLearn/"/>
    <url>/2021/01/07/2020-01-09-markdownLearn/</url>
    
    <content type="html"><![CDATA[<pre><code># 标题1## 标题2-----------------------*斜体* and **粗体**-----------------------#### 无序列表* 项目1* 项目2* 项目3+ Candy.+ Gum.+ Booze.- Candy.- Gum.- Booze.#### 有序列表1. 项目12. 项目23. 项目3#### 嵌套列表- 项目1    - 子项目1    - 子项目2- 项目2-----------------------#### 带文本说明的无序列表* A list item.With multiple paragraphs.* Another item in the list.-----------------------#### 链接This is an [example link](http://example.com/).This is an [example link](http://example.com/ &quot;带标题的链接&quot;).#### 参考链接I get 10 times more traffic from [Google][1] than from [Yahoo][2] or [MSN][3].-----------------------#### 图片![alt text](http://tp4.sinaimg.cn/1821029715/50/1289317070/1 &quot;Title&quot;)#### 参考图片![alt text][id]-----------------------#### 代码`&lt;blink&gt;`#### 代码块    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Hello World!&#x27;</span><br></code></pre></td></tr></table></figure>#### 代码块2    print &#39;Hello World!&#39;-----------------------#### 引用的文字&gt;表示引用文字内容</code></pre>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Mac安装并运行Zookeeper</title>
    <link href="/2021/01/07/2020-01-09-macZookeeper/"/>
    <url>/2021/01/07/2020-01-09-macZookeeper/</url>
    
    <content type="html"><![CDATA[<h3 id="一、zookeeper下载地址：选择的是-3-4-14"><a href="#一、zookeeper下载地址：选择的是-3-4-14" class="headerlink" title="一、zookeeper下载地址：选择的是 3.4.14"></a>一、zookeeper下载地址：选择的是 3.4.14</h3><p><a href="http://mirror.bit.edu.cn/apache/zookeeper/">http://mirror.bit.edu.cn/apache/zookeeper/</a></p><h3 id="二、解压下载得到的ZooKeeper压缩包，发现有bin，conf，lib等目录。"><a href="#二、解压下载得到的ZooKeeper压缩包，发现有bin，conf，lib等目录。" class="headerlink" title="二、解压下载得到的ZooKeeper压缩包，发现有bin，conf，lib等目录。"></a>二、解压下载得到的ZooKeeper压缩包，发现有bin，conf，lib等目录。</h3><pre><code>  bin目录中存放有运行脚本；  conf目录中存放有配置文件；  lib目录”中存放有运行所需要第三方库。</code></pre><h3 id="三、单机配置"><a href="#三、单机配置" class="headerlink" title="三、单机配置"></a>三、单机配置</h3><h4 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h4><p>在conf目录下，新建一个名为zoo.cfg的文件，其中内容如下：</p><pre><code># 服务器与客户端之间交互的基本时间单元（ms） tickTime=2000   # zookeeper所能接受的客户端数量 initLimit=10  # 服务器和客户端之间请求和应答之间的时间间隔 syncLimit=5# zookeeper中使用的基本时间单位, 毫秒值.tickTime=2000# 数据目录. 可以是任意目录.dataDir=/tmp/zookeeper/data# log目录, 同样可以是任意目录. 如果没有设置该参数, 将使用和#dataDir相同的设置.dataLogDir=/tmp/zookeeper/log# t监听client连接的端口号.clientPort=2181</code></pre><h3 id="四、运行zookeeper"><a href="#四、运行zookeeper" class="headerlink" title="四、运行zookeeper"></a>四、运行zookeeper</h3><p>进入解压目录(zookeeper-3.4.14)，执行以下命令：</p><pre><code>## 启动ZooKeeper./bin/zkServer.sh start## 停止ZooKeeper./bin/zkServer.sh stop</code></pre>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>java常用方法</title>
    <link href="/2021/01/07/2020-01-09-javaUsuallyMethod/"/>
    <url>/2021/01/07/2020-01-09-javaUsuallyMethod/</url>
    
    <content type="html"><![CDATA[<p>//集合转成字符串逗号分隔</p><pre><code>StringUtils.join(list,&quot;,&quot;);</code></pre><p>//取集合中最大值</p><pre><code>long parValueMax = Collections.max(resultList.stream().map(OmsCouponUserAppVo::getParValue).collect(Collectors.toList()));</code></pre><p>//字符串根据逗号转成List</p><pre><code>List&lt;String&gt; items = Arrays.asList(str.split(&quot;\\s*,\\s*&quot;));</code></pre><p>//集合去重</p><pre><code>items.stream().distinct().collect(Collectors.joining(&quot;,&quot;));</code></pre><p>//对对象集合中的某字段降序排序</p><pre><code>Collections.sort(list, new Comparator&lt;OmsCouponSend&gt;() &#123;    @Override    public int compare(OmsCouponSend o1, OmsCouponSend o2) &#123;        if (o1.getCoupon() &gt; o2.getCoupon()) &#123;            return -1;        &#125;        if (o1.getCoupon().equals(o2.getCoupon())) &#123;            return 0;        &#125;        return 1;    &#125;&#125;);</code></pre><p>//对集合中某元素去重</p><pre><code>ArrayList&lt;OmsCollectAppVo&gt; distinctLiost = resultList.stream().collect(Collectors.collectingAndThen(Collectors.toCollection(() -&gt; new TreeSet&lt;&gt;(Comparator.comparingLong(OmsCollectAppVo::getSortId))), ArrayList::new));</code></pre><p>//多条件对集合排序<br>(如果a1-a2大于0，返回正数是升序;如果a2-a1小于0，返回负数是降序)</p><pre><code>Collections.sort(students, new Comparator()&#123;  public int compare(Student a1, Student a2) &#123;     int x = a1.getAge() - a2.getAge();  int y = a1.getSalary() - a2.getSalary();     int z = a1.getHeight() - a2.getHeight();  if(x==0)&#123;  if(y==0)&#123;  return z;  &#125;  return y;  &#125;  return x;  &#125;  &#125;);</code></pre>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>闲散颂</title>
    <link href="/2021/01/07/2020-01-09-idle/"/>
    <url>/2021/01/07/2020-01-09-idle/</url>
    
    <content type="html"><![CDATA[<p>　　正如和我同时代的大多数人一样，我是在这样的谚语中长大的：“游手好闲，魔鬼也嫌。”<br>我是个乖孩子，人们说什么，我就信什么。这种道德信条，让我勤奋工作至今。<br>但是，尽管我的道德信条仍控制着我的行动，我的看法却已经历了一场革命。我认为在这个世界上，人们做的工作实在是过多了。工作即美德的观念，对人们造成了极大的损害。现代工业国家需要宣扬一些与过去全然不同的信念。<br>大家都知道这个故事：到那不勒斯的游人看到十二个叫花子躺着晒太阳（事情发生在墨索里尼时代之前），要给其中最懒的一个一里拉，有十一个跳起来说自己最懒，该给自己，他却把钱给了第十二个。这个游人是对的。<br>但是，在不欣赏地中海阳光的国家里，想要闲散就困难多了，得要大规模的宣传来开新风气。<br>我希望，在读了下面的文字后，基督教青年会的领袖们能掀起一场运动，劝导好青年们闲散一些。这样的话，我也算没白活了。<br>　　在我为懒惰进行辩解之前，我得先撇清一种我无法接受的说法：<br>一个生活已经富足的人，如果还打算从事日常的职业，比如教书或打字，人们会说他（或她）这种行为是恶劣的，无异于从别人嘴里抢面包。如果这种说法不错，那我们大家就都只须闲呆着，我们的嘴里就能塞满面包了。<br>说这话的人忘了，一个人赚的，通常都会花掉。花费的时候就提供了就业。把收入都花费掉时往别人嘴里塞的面包，同他赚的时候从别人嘴里挖出来的面包，是一样多的。<br>由此看来，真正的坏蛋是存钱不用的人。如果像寓言中的法国农民那样，把省下来的钱都藏在袜子里，显然就不能提供就业。如果把储蓄拿去投资，事情就不那么显而易见了，会出现一些不同的情况。<br>　　最常出现的一种情况是把储蓄借给政府。鉴于最文明的政府的大部分公共开支都用来支付过去的战争，或准备未来的战争，借钱给政府无异于莎士比亚剧中那些雇佣杀手的坏蛋。<br>人们节俭习惯的净效应是让借到钱的国家扩张军备。显然，人们倒不如把钱花掉更好些，即便是花在喝酒、赌博上。<br>　　不过，会有人对我说，如果把储蓄投资在企业上，情况会完全不同。如果这些企业成功，生产些有用的东西，那倒还说得过去。<br>可是，谁也不能否认，眼下多数企业是失败的。这就是说，大量的人类劳动，本来可以用来生产些可供人享乐的东西，却生产了机器，而且一生产出来就被闲置，没给任何人带来益处。<br>把储蓄投给濒临破产的企业，既害人也害己。如果把钱花在，比如说，搞些派对，朋友们会得到乐趣（我们希望如此），那些赚到钱的卖肉的、烤面包的、走私酒的，也都会高兴。<br>但是，如果把钱花在（比如说）替路面车辆铺设轨道，而那个地方根本没人要这种车子，那就是把大量的劳动耗费在没人得到快乐的道路上了。<br>尽管如此，当他因投资失败而穷困时，他只会被人们视为时运不济的可怜的受害者，或者是一个挥霍浪费的家伙，仅此而已；而花钱做善事的人，却成了人们看不起的傻瓜和轻浮之人。<br>　　说了这么多只是开场白。我要极其严肃地说的是：在当今世界上，工作即美德的信念，正在造成大量的祸害，幸福和繁荣之路在于有组织地减少工作。<br>　　首先，什么叫工作？工作有两种。第一是改变地面上或地面附近的物品与其他物品的相对位置；第二是让别人这么做。<br>第一种工作是不愉快的，报酬很少；第二种则令人愉快，报酬丰厚。第二种工作可以无限扩张：不仅得有下命令的人，还有那些出谋划策提意见的人。通常由两个有组织的团体同时提出两种相反的意见，这就叫政治。<br>第二种工作所需要的技能，不是对所提意见相关事物的知识，而是说服他人的舌辩弄文之术，例如广告术。<br>　　整个欧洲还有第三种人（美洲似乎没有），比前面两种工作者都更受尊重。这些人靠着对土地的占有，能使别人为得到生存和工作的权利而付出代价。这些地主是闲适的，有人也许觉得我会因此而颂扬他们。<br>不幸的是，他们的闲散只是因为别人的劳作才成为可能。事实上，他们对闲适的渴求，是历史上所有工作说教的根源。他们最不希望的事就是别人学他们的样。<br>　　从人类文明起源直到工业革命时代，人辛苦工作生产出来的东西，通常仅够维持他一家的生存而略有余。他的妻子得像他一样苦干，孩子们稍有劳动能力，也得参加劳作。<br>除维持生存外仅有的一点剩余，却不属于他们自己，都被战争贩子、祭司们掠去了。碰上饥荒，没有剩余了，战争贩子、祭司们照拿不误，结果是许多做工的都饿死了。<br>这种制度在俄国延续到1917年[注]；在东方至今仍无变化；在英国，尽管经历了工业革命，到拿破仑战争期间依然如故，直到一百年前新生的制造商阶级取得政权才告结束；<br>在美国，这种制度在革命后就结束了，除了南方还一直持续到内战之后。一种制度持续了如此长久，直到最近才结束，自然会对人的思想和观念产生深刻影响。<br>我们深以为然的工作乃本性需要的观念，大多来自这一制度，这种观念属于前工业时代，并不适合现代世界。现代技术已经使休闲成为可能，在一定限度内，已不再为少数特权阶级所独享，而是可以由社会大众分享的权利。<br>工作的道德是奴隶的道德，现代世界已不再需要奴隶。<br>　　在早期社会中，农夫们的本意显然是不愿把微薄的剩余，拿来供养战争贩子和祭司们的，他们宁愿少生产，或者多消费。<br>起初，全然由于武力强迫，他们才多生产并让人拿走剩余。后来逐渐发现一种办法，就是诱使许多人接受这样的道德观念：努力工作是他们的责任，而且他们得用一部分工作的成果供养那些闲散的人。<br>有了这个办法，强迫手段用得少了，政府的开销也少了。到了今天，如果有人宣称国王的收入不应该比工作的人多，那么在英国百分之九十九挣工资的人都会觉得不可思议。<br>从历史来看，责任观念是掌权者用来诱使别人为主子的利益而不是为自己的利益干活的一种手段。<br>当然，掌权者会把自己伪装起来，设法让人相信他们的利益同人类更大的利益是一致的。有时这倒是实情，例如，雅典的奴隶主们把部分闲暇持久地贡献给了人类的文明，而这在公平的经济制度下，可能是做不到的。<br>休闲是文明的基础。在过去的年代，只有多数人的劳作，才使少数人的休闲成为可能。但是，多数人劳作的价值，并不是因为劳作好，而是因为休闲好。运用现代技术，已有可能公平地分配休闲，同时不损害文明。<br>　　现代技术已有可能大大减少每个人获取生活必需品所需要的劳动量。<br>这点在战时尤为明显。军队中所有的男人，以及从事军火生产的男男女女，从事谍报、战争宣传、或与战争有关的政府工作的男男女女，都从生产岗位上撤出来了。尽管如此，协约国这边挣工资的非熟练劳动者的福利水平却比此前还要高。<br>这一事实的意义被财务数据所遮蔽：借贷则使这一意义重新显现，似乎未来正养育着现在。但这显然是不可能的：一个人不能吃一片还不存在的面包。<br>战争证明的结论是，靠科学组织的生产，可以只用现代世界一小部分的劳动能力使全体人民生活得相当舒适。<br>如果战争结束时，将人解放出来以便参与战斗和制造军火的那些科学的生产组织能保存下来，把每天的工作时间减到 4小时，一切都会好好的。可是，相反地，旧时的喧嚣重又回潮，有工作的人还得长时间工作，没工作的人只得失业挨饿。<br>为什么呢？因为工作是责任。人不是按照他的产量多少拿工资，而是按照他的由行业证明的德行好坏拿工资。<br>　　这是奴隶制国家的道德，却仍用在与形成这种道德的时代完全不同的现代环境中，产生灾难性的结果也就毫不足奇了。<br>让我们作进一步说明。假如在某一特定时刻，一定数目的人给雇来制造大头针。世界需要多少，他们就造多少，每天（比如说）工作8小时。<br>有人做了一项发明让同样多的人可以生产两倍的大头针，大头针已经很便宜了，即便再压低价格也卖不出更多的大头针。在一个明智的世界里，会让生产大头针有关的人都只工作4小时，而不是8小时，其余一切仍旧可以照常进行。<br>但在现实世界里，这却被视为道德败坏。人们仍得工作8小时，大头针生产得太多了，一些雇主破产了，生产大头针的人有一半失了业。结果呢，就休闲时间总体而言，和另一种做法是一样多的，只是现在有一半人完全闲着，另一半却劳累过度。<br>这样一来，无可避免的闲暇只能造成广泛的苦难，而没能成为普遍的幸福之源。还能想像出比这更愚蠢的事吗？<br>　　对穷人也应该休闲的看法，富人总感到惊异。在19世纪初的英国，人们一般每天都要工作15小时，孩子们有时也这样，但通常是12小时。<br>爱管闲事的人提议说这工作时间可能太长了些，有人就会对他们说，工作可以让大人们不酗酒，让孩子们不调皮捣蛋。在我还是个孩子的时候，城市工人们刚获得投票权，就通过法律规定了一些公共假期，惹得上层阶级大发雷霆。<br>我还记得一个老公爵夫人说：“穷人要假期做什么？他们应该工作。”现在的人们说话不那么直白了，但观念依旧，成为经济中许多混乱现象的源头。<br>　　且让我们花点时间，不带偏见地、坦诚地考察一下工作道德吧。<br>每个人的一生，出于需要，总得消费一定量的人类劳动产品。就让我们假定劳动总的来说是令人厌烦的，一个人的消费如果比他生产的还多，那是不公正的。<br>当然，他也可以提供服务，如果不是商品的话，就像医生，但他总得提供点什么，以换取他的吃和住，就这一限度而言，必须承认工作的责任，但仅以此为限。<br>　　我不必细说，在苏联以外的所有现代国家中，许多人甚至逃避这点起码的工作，这就是那些因继承或婚姻而得到钱财的人。<br>我不认为让这些人闲着所带来害处，能与那些让挣工资的劳动者过度劳动或挨饿的想法所带来的害处相提并论。<br>　　如果普通挣工资的人每天工作4小时，那就足够每个人过的，也不会有失业——前提是得做好适当而明智的组织工作。<br>这种想法让有钱人吃惊，因为他们不相信穷人懂得怎样利用这么多的闲暇。在美国，人们通常长时间工作，虽然他们已经够富裕了。美国人对挣工资的人享有闲暇的想法感到愤慨，除非这种闲暇是作为对失业者的严厉惩罚。<br>事实上，他们甚至不喜欢让他们的儿子闲着。很奇怪的是，尽管他们希望儿子们勤奋工作，甚至没时间学文化也在所不惜，对于他们的老婆和女儿不干工作却不在意。<br>在贵族统治时代，对“无用”的势利的赞赏，是没有性别差异的，到了财阀统治时代，却只限于妇女。这显然是不合常理的。<br>　　必须承认，明智地运用闲暇，是文明和教育的结果。长时间工作了一辈子的人，突然无所事事，一定闲得难受。<br>但是，没有相当的闲暇，人们将与许多最美好的事物无缘。已没有任何理由要大多数人再忍受这种被剥夺闲暇的痛苦。<br>只有愚蠢的、通常是代人受过的苦行主义，要求我们继续过量工作，尽管己无此必要。<br>　　控制着俄国政府的新教条，尽管其中大部分已与西方传统的教义截然不同，仍有一些东西没有变。统治者们的态度，特别是主管宣传教育的那些人，在劳动光荣问题上，几乎同全世界统治阶级对所谓“诚实的穷人”向来说教的如出一辙。<br>勤劳、自制、愿意为遥不可及的利益长时间工作，甚至对当权者俯首贴耳，这一切重又出现；更有甚者，当权者仍然代表着“宇宙主宰”的意志，只是这个“宇宙主宰”有了新名字，叫“辩证唯物主义。”<br>　　无产阶级在俄国的胜利，同女权主义者在其他国家的胜利颇有一些相同之处。<br>许多年代以来，男人们承认女性的圣洁，而且为了安抚地位低下的女性们，不断维持着圣洁比权力更可取的说辞。<br>最终，女权主义者们决定她们两者都要，因为她们中的先进分子相信男人关于美德可取的说法，但不相信男人所谓的政治权力一钱不值的说辞。关于体力劳动，同样的事在俄罗斯发生了。<br>许多年代以来，富人和拍他们马屁的人写了许多颂扬“诚实的苦工”的文字，颂扬俭朴的生活，宣扬穷人比富人更可能进天堂的教义，并且试图使体力劳动者们相信，变换物质在空间里的位置的工作，具有特殊的高贵性，<br>正如男人要女人相信她们从性奴役中能得到某种特殊的高贵性一样。在俄罗斯，所有关于体力劳动优越性的说教都是很认真严肃的，其结果是体力劳动者比所有人都更光荣。<br>实质上，劳动信条的复兴者们所要达到的目的，无非就是要招徕突击队员以应付特殊的任务。体力劳动成了青年人的理想，也是一切道德说教的基础。<br>　　就眼前来说，这一切也许是无可非议的。国家很大，自然资源很丰富，有待开发，而且只有很少的资金可用于开发，因此，艰苦工作是必要的，并有可能得到大的回报。<br>但是，在每个人无需长时间工作就能舒适生活之后，又会发生什么呢？<br>　　在西方，我们有处理这一问题的各种方法。我们不寻求经济上的公平，因此总产品的一大部分到了很小一部分人的手里，这些人大多不工作；由于对生产没有集中的控制，我们生产的许多东西根本没人要；<br>我们让很大一部分劳动人口闲着，因为我们可以让另一部分人工作过度。如果这些方法都不好使，我们还有战争：我们可以让许多人去制造烈性炸药，再让其他人去点燃它们，就像刚发现爆竹的孩子。<br>把这些我们可以控制的手段结合起来，我们总算（虽然有困难）保住了这一观念，即：从事大量繁重的体力劳动是普通人的命运。<br>　　在俄国，由于更关注经济的公平和对生产的集中控制，解决问题的方法也不同。<br>合理的解决办法应该是：一旦有条件给大家提供生活必需品、保证基本的舒适，就逐步减少劳动时间，并在每个阶段让人民投票决定是喜欢更多的闲暇还是更多的物品。<br>但是，在说教了多年艰苦工作的崇高美德之后，我们难得看到当权者们会把目标设定为建立多休闲、少工作的天堂。我们更可能看到的是，他们会不断制定新的计划，为了未来的生产率，牺牲今天的休闲。<br>我最近读到一份俄国工程师提出的独出心裁的计划，说是要筑一条坝穿越喀拉海，使白海和西伯利亚北部沿海变暖。真是一个了不起的项目！但当苦工的高贵性展现于北冰洋的冰天雪地之时，无产阶级的舒适生活很可能要给推迟一个世代了。<br>这种事真要发生的话，那只能是把艰苦工作的美德视为目的本身、而非走向不再需要艰苦工作的境地的手段的结果。<br>　　虽然有一些移动物品的活动为我们的生存所必需，但它绝非人生的目的之一。否则，我们就得说随便一个不熟练工人都比莎士比亚高明。在这个问题上，我们受到两个动机的误导。<br>其一是让穷人保持满意的必要性，这使富人数千年来不断鼓吹劳动的高贵，并时时注意让自己在这方面处于“不高贵”的地位；其二是机械装置所带来的新乐趣，这使我们对自己能在地球表面制造出令人惊奇而聪明的变化感到高兴。<br>这两个动机对实际工作的人都没有多大吸引力。如果你问他一生中最美好的东西是什么，他大概不会说：“我爱好体力劳动，因为那使我感到我在完成人类最崇高的任务，因为我喜欢思考人能在多大程度上改变地球。<br>确实，我的身体需要一段时间的休息，我得尽力打发这段时间，但只有当清晨来临，我能重新开始辛苦劳作的时候，我才感到莫大的幸福，因为我的满足感来自辛苦劳作。”<br>我从没听到工人们说过这样的话。他们只是认为，也应该这么认为，工作只是谋生的必要手段，如同他们认为从休闲中他们能得到幸福的享受一样。<br>　　虽然多少有点闲暇是令人愉快的，但有人会说如果24小时只工作4小时，人们就不知道该怎么打发日子了。即便说在现代世界这是确实的，那也是对我们文明的谴责，在早期是不会这样的。<br>先前人们还是能够轻松轻松，玩一玩的，虽然由于崇拜效率，多少也有些限制。现代人认为任何事都应当是为别的什么事做的，而绝不能是以本身为目的。<br>例如思想严肃的人总是谴责看电影的习惯，对我们说那会诱使青年人犯罪。但制作电影的一切工作都是可尊敬的，因为那是工作，因为它带来利润。<br>认为一切值得做的事都应该带来利润的观念，把所有事都搞颠倒了。屠夫供你肉，面包师傅供你面包，都是值得称道的，因为他们赚了钱，可是，在你享用他们提供的食物时，你却是无可称道的，除非你是为了有力气工作而吃。<br>总的来说，人们认为赚钱好，花钱坏。鉴于它们乃是同一交易的两面，这种观念是荒谬的。人们也满可以说钥匙好、锁眼坏。生产物品的好处，完全是从消费物品的利益中衍生出来的。<br>在我们的社会里，个人为利润工作，但他的工作的社会目的在于消费他所生产的东西。正是生产的个人目的和社会目的的分离，使人在这个以赢利刺激工业发展的世界里很难头脑清楚地思考。<br>我们对生产考虑得太多，对消费则太少。结果是我们太不重视享受和单纯的幸福，我们也不是根据生产给予消费者的快乐来判断其价值。<br>　　在我建议把工作时间减少到4小时时，我不是说剩下的时间都只能纯粹无聊地打发掉。我的意思是一天工作4小时应能使一个人得到生活的必需品和基本闲适，剩下的时间应属于他自己，他觉得怎么合适就怎么用。<br>这种社会制度的一个必要组成部分是教育应比现在更为深入，而且教育的部分目的应是建立人们的兴趣爱好，使他们能明智地利用闲暇。我所考虑的倒主要不是那些所谓“高级趣味”的东西。<br>除了边远的农村地区，已经看不见农民跳舞了，但他们的本性中仍然会有提高自身素养的冲动。城里人的娱乐活动大多变得被动：看电影，看足球赛，听收音机，等等。<br>原因是他们的活力都被工作耗尽了。如果闹暇增多，他们是会重新主动参与、享受娱乐活动的。<br>　　过去是有闲阶级数量小，工人阶级数量大。有闲阶级享受的便利缺乏社会公平的基础，这就必然使它难以让人忍受、得不到多少同情，并且需要为其特权炮制辩护的理论。这就大大减少了休闲的优越性。<br>但尽管有这些不足，它还是对几乎整个我们所说的文明作出了贡献。休闲培植了艺术，发现了科学，产生了各种著作，发明了哲学，并改进了社会关系。甚至被压迫者的解放也常常是由上面发动。没有有闲阶级，人类决不能走出野蛮状态。<br>　　不负责任的有闲阶级的生活方式常常是异常浪费的。这个阶级的成员没有一个受到过必须勤奋工作的教育，而且就整体而言，这个阶级也不比他人更聪明。<br>这个阶级可能产生过一个达尔文，但其代价是成千上万的乡绅除了猎狐和惩罚偷猎者之外，决想不到还有别的更聪明的事干。<br>现在的大学正在系统地提供过去有闲阶级偶尔作为副产品提供的的东西，这是很大的进步，但仍有某些不足。<br>大学生活和世界上的生活是如此不同，生活在学术环境中的人，容易忽视普通公众所关注的事情和问题，而且他们表达意见的方式常使他们无法对公众产生应有的影响；<br>另一个不利因素是，大学里的研究是有组织的，那些想要做独创性研究的人可能受到打击。因此，学术机构尽管有用，在一个人人走出自家院墙、忙于追求非功利性目标的世界上，并不是文明利益合适的守护神。<br>　　在一个无人被迫每天工作4小时以上的世界，每一个怀有科学好奇心的人都可以全身心地投入；每一个画家都可以专心绘画而不致挨饿（不管他的画是好是坏）；<br>年轻的作家们不必被迫以耸人听闻的粗制滥造作品来吸引注意力，以使自己有经济能力来写出不朽的作品，而时机一旦来临，他们或许已经丧失了情趣和能力；<br>那些在业务工作中，滋生了经济学或政府工作某个方面兴趣的人，能够发展他们的思想，而不必受学术机构的羁绊，这种羁绊往往使大学里的经济学家的工作缺乏现实性；<br>医务工作者们能有时间学习医学上的进展；教师们也不必再恼火地勉强用老掉牙的方法教授他们年轻时学过的东西，而这些东西时过境迁，可能早已不符合实际了。<br>　　最重要的是，生活中将会有幸福和欢乐，而不是神经紧张、身体疲倦和消化不良。<br>工作量将确保维持在足以使休闲令人愉悦、而又不会使人疲累的程度。因为人在空余时间是不累的，他们不会只要求那些被动的、乏味的娱乐活动。<br>至少百分之一的人可能会把业余时间奉献出来，从事具有公共意义的事务，因为他们无需以此谋生，他们的独创性就不会受到妨碍，也不必刻意符合旧权威所规定的标准。<br>但是，休闲的好处并不仅仅显现在这些个别的情形中。普通男男女女，如果有机会过幸福生活，会变得更加和蔼，不那么难为人，不那么用怀疑的眼光看人。<br>对战争的兴趣也会消失，部分是因为这个原因，部分还因为在战争中要付出长期和艰苦的劳作。<br>在各种德性中，善良的性情是世界最需要的。性情善良是悠闲、安全的结果，而不是艰苦奋斗一生的结果。现代生产方法已给了我们大家悠闲、安全的可能，我们却还是选择让一些人工作过度，另一些人挨饿。<br>迄今为止，我们始终都像机器出现以前那样忙忙碌碌，我们这样做是愚蠢的，但没有理由永远愚蠢下去。</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>《软技能：代码之外的生存指南》读书笔记</title>
    <link href="/2021/01/07/2020-01-16-softSkills/"/>
    <url>/2021/01/07/2020-01-16-softSkills/</url>
    
    <content type="html"><![CDATA[<h2 id="为了能够掌握一门技术，需要了解以下三个要点。"><a href="#为了能够掌握一门技术，需要了解以下三个要点。" class="headerlink" title="为了能够掌握一门技术，需要了解以下三个要点。"></a>为了能够掌握一门技术，需要了解以下三个要点。</h2><ol><li>如何开始——要想开始使用自己所学的，我需要掌握哪些基本知识？</li><li>学科范围——我现在学的东西有多宏大？我应该怎么做？在开始阶段，我不需要了解每个细节，但是如果我能对该学科的轮廓有大致的了解，那么将来我就能发现更多细节。</li><li>基础知识——不止在开始阶段，要想使用一项特定的技术，我需要了解基本的用户案例和最常见的问题，也需要知道自己学的哪20%就能满足80%的日常应用。<br>熟知了这三个关键点后，我可以高效地学习一门技术，无需通晓全部细节。我发现，如果我了解三项主题——如何开始，我能做什么，以及相关基础知识，那么我就能随着学习深入学会所需的其他知识。如果我想提前掌握所有知识，那只是在浪费时间，因为真正重要的内容会湮没在那些细枝末节中。这种新方法能让我关注重点。</li></ol><h2 id="学什么和怎样学？"><a href="#学什么和怎样学？" class="headerlink" title="学什么和怎样学？"></a>学什么和怎样学？</h2><h3 id="“十步学习法”的基本思想："><a href="#“十步学习法”的基本思想：" class="headerlink" title="“十步学习法”的基本思想："></a>“十步学习法”的基本思想：</h3><p>要对自己要学的内容有个基本的了解——了解自己不知道什么就足矣。然后，利用这些信息勾勒出学习的范围，即需要学哪些内容，以及学成之后又会获得什么。依靠这些知识，你可以找出各种资源（不局限于书）来帮助自己学习。最后，你可以创建自己的学习计划，列出要去学习哪些相关课程，筛选学习材料，只保留能帮助自己达成目标的优质内容。</p><h3 id="十步学习法体系"><a href="#十步学习法体系" class="headerlink" title="十步学习法体系"></a>十步学习法体系</h3><p>对于“十步学习法”的前六个步骤，你需要集中精力完成足够多的前期调研，确保自己明确知道要学哪些内容，以及如何确认自己已达成目标。你还将学到如何挑选最好的资源来帮自己实现目标、制订学习计划。</p><h4 id="第一步：了解全局"><a href="#第一步：了解全局" class="headerlink" title="第一步：了解全局"></a>第一步：了解全局</h4><p>你根本不知道自己不知道<br>在深入探究某个主题之前至少要对其有所了解，这一点非常重要。这样你才能弄清自己到底要学什么，找出最好的学习方式。  </p><h4 id="第二步：确定范围"><a href="#第二步：确定范围" class="headerlink" title="第二步：确定范围"></a>第二步：确定范围</h4><p>根据自己的学习理由运用自己在上一步中获得的信息从一个几乎无边界的主题中明确一个清晰且聚焦的学习范围。</p><h4 id="第三步：定义目标"><a href="#第三步：定义目标" class="headerlink" title="第三步：定义目标"></a>第三步：定义目标</h4><p>你想从自己的学习经历中获得什么决定了你的成功标准是什么。请确保你能借此在学习结束后评估自己是否达成了目标。好的成功标准也能让你向着既定目标不断前进。</p><h4 id="第四步：寻找资源"><a href="#第四步：寻找资源" class="headerlink" title="第四步：寻找资源"></a>第四步：寻找资源</h4><p>要尝试收集到多种多样的资源以帮助你学习，而不是只读一本关于这一主题的书，先获得尽可能多的不同类型的资源。</p><h4 id="第五步：创建学习计划"><a href="#第五步：创建学习计划" class="headerlink" title="第五步：创建学习计划"></a>第五步：创建学习计划</h4><p>你需要创建自己的学习路径。把它看作自己写书时候的大纲。事实上，当你大功告成的时候，你会发现自己的学习路径可能与一本书的目录非常相似。你基本上就是完成一系列的模块，直到最后达成目标。</p><h4 id="第六步：筛选资源"><a href="#第六步：筛选资源" class="headerlink" title="第六步：筛选资源"></a>第六步：筛选资源</h4><p>对现有资源进行筛选，从中选出最能帮助你实现自己的目标的资源。<br>找出哪些内容能够覆盖你的学习计划。你还应当看看评论，试着找出品质最高的资源。</p><h4 id="第七步到第十步：循环往复"><a href="#第七步到第十步：循环往复" class="headerlink" title="第七步到第十步：循环往复"></a>第七步到第十步：循环往复</h4><p>步骤7到步骤10的目标是通过“学习—实践—掌握—教授”（LDLT）的方式真正领会知识。<br>你从掌握恰到好处可以开始的基础知识开始，然后通过操作来学习，同时也通过自我探索收集问题。<br>之后，你掌握了足够多的有用的知识。最后，你能将自己学到的教给他人，以此来弥补自己在学习过程中的不足，同时通过深入思考巩固知识。</p><h5 id="第七步：开始学习，浅尝辄止"><a href="#第七步：开始学习，浅尝辄止" class="headerlink" title="第七步：开始学习，浅尝辄止"></a>第七步：开始学习，浅尝辄止</h5><p>这一步的关键在于过犹不及。你会很容易就失去自控力，开始消化计划学习中列出的所有资源。但是，你会发现，如果你能经受住这样的诱惑，你会取得更大的成就。你要专注于掌握自己所需的、能在下一步动手操作的最小量的知识。<br>你可以浏览参考材料，或者每章的摘要，或者各种简介，这些信息足以让你对自己要做什么有基本的认识。</p><h5 id="第八步：动手操作，边玩边学"><a href="#第八步：动手操作，边玩边学" class="headerlink" title="第八步：动手操作，边玩边学"></a>第八步：动手操作，边玩边学</h5><p>现在，考虑一下我在这里建议的方法。你无需提前了解全部内容，你要做的首要的一件事情就是亲自操作和亲身体验。<br>采用这种方法，你通过探索和实践进行学习。在操作的过程中，你的大脑自然地产生各种问题：<br>它是如何工作的？如果我这么做，会发生什么？我该如何解决这个问题？这些问题引导着你走向真正重要的方向。<br>当回过头寻找问题的答案的时，不只是这些问题迎刃而解，而且你记得的东西比你学习的东西要多得多，因为你所学到的都是对你很重要的东西。</p><h5 id="第九步：全面掌握，学以致用"><a href="#第九步：全面掌握，学以致用" class="headerlink" title="第九步：全面掌握，学以致用"></a>第九步：全面掌握，学以致用</h5><p>为了有效利用自己选择的资料，为上一步产生的问题寻求答案，阅读文字、观看视频、与他人交流都是必要手段。这能让你沉浸在学习材料中，尽可能地汲取知识。<br>最后，千万不要忘了，你在第三步中定义的成功标准。试着把自己正在学习的内容与最终目标关联起来。你掌握的每个模块，都应该以某种方式推动你向着终极目标前进。</p><h5 id="第10步：乐为人师，融会贯通"><a href="#第10步：乐为人师，融会贯通" class="headerlink" title="第10步：乐为人师，融会贯通"></a>第10步：乐为人师，融会贯通</h5><p>在现实中，你只需要超前别人一步，就可以成为他们的老师。有时候，比学生超前太多的“专家”反而不能得心应手地“教”，因为他们无法与学生产生共鸣。他们忘了初学者是什么样子，很容易专注于他们认为简单的细节。<br>走出自己的舒适区，将自己学到的知识教给别人。要想确定你确实掌握了某些知识，这是唯一的办法；同时，在你将自己所学介绍给他人时，这也是查缺补漏的好办法。<br>知识短板会阻碍你进步。准确识别它们的最佳方式之一就是看看自己在哪些工作上花费了大量的时间，或者一直进行重复性劳动。<br>时刻都要试图了解自己不理解或不清楚的事物。你可以维护一份清单，列出自己需要去研究或者自己不清楚的所有事物，追踪有哪些主题总是不断出现在这个清单上。你会惊讶地发现这份清单的增长速度有多快。你只要对自己坦诚：如果遇到不理解的知识，不需要马上就学会，但是一定要把它添加到清单中，这样你至少可以找出自己的知识短板。<br>我们总是倾向于掩饰自己的短板，而且我们也总是太忙，忙到无暇去填补它们。结果，我们要么不能真正明白自己在做什么，要么为了避开自己的短板而采取低效的方法。</p><h2 id="怎么寻找你的知识短板？"><a href="#怎么寻找你的知识短板？" class="headerlink" title="怎么寻找你的知识短板？"></a>怎么寻找你的知识短板？</h2><ul><li>在哪些工作上花费时间最多？  </li><li>可以改进的重复性劳动  </li><li>自己没有完全理解的东西  </li><li>你回答不出来的面试题<br>我的生产力提升计划的基本思路就是，我把一周的时间分配给一个一个用时不超过两小时的小任务。我使用看板来安排自己的一周活动。看板是一个简单的白板，它有几个列，你可以轻松地在各列之间移动任务项。在敏捷方法的世界里，看板通常还包含展示这些任务项所处的不同状态，典型的状态有“未启动”“进行中”和“已完成”。但是在我的看板中，每一列就是一周中的每一天。在工作时我会使用番茄工作法来保持专注，并且用番茄工作法估算和衡量每一项任务要花多长时间。  </li><li>季度计划<br>我的计划都是从“季度”开始的。我把我的一年分成4个季度，每个季度3个月。在做季度计划时，我会尽力列出我想在本季度完成的每一个大项目，我还会制订一些较小的目标。我会思考我在每一周或每一天分别完成哪些工作。这份计划通常会用一份列表来完成。我也会创建一个宏观计划，将本季度我想要完成的工作列入其中。这让我清楚地了解自己的主要目标是什么，也知道该如何实现它。同时，它还会让我保持专注。</li><li>月计划<br>每个月的第一天我会打印出当月的月历，并且规划出每天要完成的工作。此时我并不能做到非常精确，但是我可以根据当月天数和之前的完成情况，粗略估算出当月我能够完成多少工作。我会简单地从季度计划中挑选任务，看看有哪些任务可以写入月历。</li><li>周计划<br>每周一的早晨，我会做我的周计划。我原来使用名为Trello（<a href="http://trello.com)的工具作为看板来组织我一周的工作,但最近我一直在用kanbanflow(http//simpleprogrammer.com/ss-kanbanflow%EF%BC%89%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%9C%8B%E6%9D%BF%EF%BC%8C%E5%9B%A0%E4%B8%BAKanbanflow%E6%9C%89%E4%B8%80%E4%B8%AA%E5%86%85%E7%BD%AE%E7%9A%84%E7%95%AA%E8%8C%84%E9%92%9F%E5%AE%9A%E6%97%B6%E5%99%A8%E3%80%82%E6%88%91%E7%9A%84%E7%9C%8B%E6%9D%BF%E4%B8%8A%E4%B8%8D%E4%BB%85%E4%B8%80%E5%91%A8%E5%86%85%E7%9A%84%E6%AF%8F%E4%B8%80%E5%A4%A9%E9%83%BD%E6%9C%89%E4%B8%80%E5%88%97%EF%BC%8C%E8%BF%98%E6%9C%89%E4%B8%80%E5%88%97%E6%A0%87%E6%B3%A8%E4%B8%BA%E2%80%9C%E4%BB%8A%E5%A4%A9%E2%80%9D%EF%BC%8C%E5%88%97%E5%87%BA%E6%88%91%E5%BD%93%E5%A4%A9%E8%A6%81%E5%AE%8C%E6%88%90%E7%9A%84%E4%BB%BB%E5%8A%A1%EF%BC%9B%E8%BF%98%E6%9C%89%E4%B8%80%E5%88%97%E6%A0%87%E6%B3%A8%E4%B8%BA%E2%80%9C%E5%AE%8C%E6%88%90%E2%80%9D%EF%BC%8C%E5%88%97%E5%87%BA%E6%88%91%E5%B7%B2%E7%BB%8F%E5%AE%8C%E6%88%90%E7%9A%84%E4%BB%BB%E5%8A%A1%EF%BC%9B%E8%BF%98%E6%9C%89%E4%B8%80%E5%88%97%E6%A0%87%E6%B3%A8%E4%B8%BA%E2%80%9C%E4%B8%8B%E5%91%A8%E2%80%9D%EF%BC%8C%E6%88%91%E4%BC%9A%E6%8A%8A%E6%89%80%E6%9C%89%E8%BF%99%E5%91%A8%E5%86%85%E6%9C%AA%E5%AE%8C%E6%88%90%E7%9A%84%E4%BB%BB%E5%8A%A1%E4%BB%A5%E5%8F%8A%E6%88%91%E7%9F%A5%E9%81%93%E4%B8%8B%E5%91%A8%E5%BF%85%E9%A1%BB%E8%A6%81%E5%81%9A%E7%9A%84%E4%BA%8B%E6%83%85%E6%94%BE%E8%BF%9B%E5%8E%BB%EF%BC%8C%E4%BB%A5%E5%85%8D%E8%87%AA%E5%B7%B1%E5%BF%98%E8%AE%B0%E3%80%82">http://trello.com）的工具作为看板来组织我一周的工作，但最近我一直在用Kanbanflow（http://simpleprogrammer.com/ss-kanbanflow）创建自己的看板，因为Kanbanflow有一个内置的番茄钟定时器。我的看板上不仅一周内的每一天都有一列，还有一列标注为“今天”，列出我当天要完成的任务；还有一列标注为“完成”，列出我已经完成的任务；还有一列标注为“下周”，我会把所有这周内未完成的任务以及我知道下周必须要做的事情放进去，以免自己忘记。</a></li></ul><h2 id="番茄工作法"><a href="#番茄工作法" class="headerlink" title="番茄工作法"></a>番茄工作法</h2><p>它的基本思路是：你规划出打算一天之内完成的工作，然后设置一个时长25分钟的定时器，去完成计划中的第一项任务；在这25分钟之内，你只专注于这一项任务，心无旁骛。一旦有干扰，可以用各种方法屏蔽掉干扰，但是通常你要努力保证自己完全不被打扰。总之，你不希望自己的专注的工作状态被打断。在25分钟结束的时候，设置一个5分钟的定时器，休息一下。这就是所谓的一个“番茄钟”。每4个番茄钟后，你都需要休息一会儿，通常为15分钟。<br>留意自己每天完成了几个番茄钟，估算某项任务要用掉几个番茄钟。番茄工作法只有被当作估算和评估工作的工具使用时，才能发挥它的真正威力。通过跟踪自己在一天内完成了多少个番茄钟，以及为每天要完成的番茄钟的数量设定目标，你瞬间有能力去真正评估自己每日工作的努力程度，也能知晓自己的工作能力。<br>使用番茄工作法，你可以把每周看作是由有限个番茄钟组成的。想在每周完成一定数量的任务？你要搞清楚自己一周能工作多少个番茄钟，并相应地设置任务的优先级。通过计算自己完成的番茄钟的数量，可以确切知道自己一周完成了多少任务，也就不会觉得自己没完成足够量的任务。如果你没能完成自己设定的任务，但是却用完了足够数量的番茄钟，那么问题就不是工作量是否饱满，而是给某个任务项设置的优先级是否正确。  </p><ul><li>有一个大问题一直困扰着我：<br>我总为自己没有做更多的事情而感到内疚。这与我一天完成多少工作无关，就好像我永远不能放松似的。我总觉得自己应该在做事，以至于坐下来玩游戏（我最喜欢的消遣之一）时我都无法享受其中，因为我觉得自己在浪费时间，我本应该做更多的工作。也许你也有同感。<br>这个问题的根源在于，你无法准确地评估每天到底自己完成了多少任务，也没有为自己每天到底要完成多少任务设定明确的目标。也许，像我一样，你也试图通过列出一份每日任务清单来解决这一问题。这看起来似乎是一个好主意，但是，当你完成某些任务耗费的时间比你预计的要长的时候，你将备受打击。就算你每天累得像狗一样，还是无法完成清单上的任务，所以即使你竭尽全力还是觉得自己很失败。这可真令人很沮丧。<br>我们不一定能够控制完成一项任务到底需要多少时间，但是我们可以控制自己这一天中愿意为某项任务（或某些任务）花多少时间。如果你努力工作一整天，就会感觉很好；如果在这一天中你工作松懈却又完成了列表中的所有任务，那只不过是因为任务比预期的简单而已，你还真不应该为此而沾沾自喜。制订任务列表全凭主观臆断，每天能够专注完成的工作量才是最重要的。<br>这正是番茄工作法的真谛之所在。当你在一天中为自己设置了x个番茄钟的工作目标（这一目标你完全可控）并且达成的时候，你就可以知道自己一天到底可以完成多少工作，这会让自己感觉良好，更重要的是，还能让自己放松身心。  </li></ul><hr><h2 id="定额工作法"><a href="#定额工作法" class="headerlink" title="定额工作法"></a>定额工作法</h2><p>要想确保自己在追求目标的道路上获得持续的进展，唯一的方法就是确立一个明确的目标，规定自己要在预先确定的时间段内需要取得多大的进展。长期坚持这么做，我就能随着时间的推移度量并标记自己的进度。我可以确切知道自己在给定的一段时间内能够完成的工作量。</p><h2 id="定额工作法的规则"><a href="#定额工作法的规则" class="headerlink" title="定额工作法的规则"></a>定额工作法的规则</h2><ul><li>挑选一项重复性任务。</li><li>明确有效时限，在此期间该任务被重复执行。</li><li>明确在给定的有效时限内该任务应该完成的次数的定额。</li><li>给自己承诺：一定要达成定额。</li><li>调整。调高或者调低定额，但是不能在有效时间段之内调整。</li></ul><h2 id="要不要多任务并行"><a href="#要不要多任务并行" class="headerlink" title="要不要多任务并行"></a>要不要多任务并行</h2><ul><li>比起在不同时间段分别处理相关任务，批量处理相关任务拥有两大优点。第一，你不会打破自己对正在处理的大任务的专注。第二，你会更专注于自己平常没有足够的时间进入专注状态去处理的任务。回复1封邮件不会让你有充分的时间专注于这一任务，但是集中回复20封电子邮件就可以把你带入专注模式。</li><li>停止任何并非真正的多任务并行的多任务并行。每天力争在一个时间段内只做一件事。番茄工作法对此有很大帮助。</li><li>一次性批量处理小任务，而不是每天或每周里做许多次。</li><li>找出能够真正实现多任务并行的领域。真正的多任务并行是做到同时处理两项任务，而不是在任务间切换，任何不需要耗费脑力的活动都可以跟其他活动结合起来。只要进行任何需要耗费脑力的活动，就将其与体育运动结合起来。</li></ul><h2 id="职业倦怠"><a href="#职业倦怠" class="headerlink" title="职业倦怠"></a>职业倦怠</h2><h2 id="什么是职业倦怠？"><a href="#什么是职业倦怠？" class="headerlink" title="什么是职业倦怠？"></a>什么是职业倦怠？</h2><p>提高生产力的最大障碍之一就是身体和心理上的倦怠。项目刚开始的时候，我们总是热情高涨、精力旺盛，但是一段时间之后，即便我们再有激情，一想到它们也会让我们反胃。</p><h2 id="为什么会产生倦怠？"><a href="#为什么会产生倦怠？" class="headerlink" title="为什么会产生倦怠？"></a>为什么会产生倦怠？</h2><p>新鲜感消退之后，现实就会浮现。  </p><h2 id="怎样解决职业倦怠？"><a href="#怎样解决职业倦怠？" class="headerlink" title="怎样解决职业倦怠？"></a>怎样解决职业倦怠？</h2><ul><li>下次开始新项目的时候，下定决心：你一定会完成，或者完全掌握。设定规则和约束条件，强迫自己穿过那堵不可避免的墙。</li><li>如果你正面临职业生涯或者个人生活中的一堵墙，试着去穿越它。想想在墙的另一侧会有怎样的收获等着你。想象自己的动机和兴趣终将获得回报。</li><li>制定自己的定额工作，每进一寸，便是欢喜。</li></ul><h2 id="时间是怎样被浪费掉的"><a href="#时间是怎样被浪费掉的" class="headerlink" title="时间是怎样被浪费掉的"></a>时间是怎样被浪费掉的</h2><p><strong>你不能把每天的每一分钟都充分利用起来，这个目标太不现实了。但是，你可以弄清楚自己在哪儿浪费的时间最多，并消除它们。</strong></p><h2 id="停止看电视"><a href="#停止看电视" class="headerlink" title="停止看电视"></a>停止看电视</h2><ul><li>看电视的最大问题就是，花在收看电视上的时间并没有获得任何实际收益。</li><li>看电视不仅浪费时间，还会以你察觉不到的方式影响你的认知能力。电视节目把所有问题都“短路”了，让你不经过自己大脑的任何思考就把一切都安排好。从消费习惯到世界观，你的一切都受电视的直接影响。电视看得越多，你越会放弃对自己的思想和行为的控制。电视简直就是彻底地操控了你的生活。</li><li>我决定减少看电视的时间，一次只看一个节目。我不再看直播或者录播，而是直接整季购买自己想看的节目。我在自己想看电视，或者有空的时候才看。我不再被那些电视节目和周播的剧集牵着鼻子走。（现在我还会偶尔买一整季的电视节目，把它们当作电影看。）</li></ul><ul><li>社交媒体（微信，QQ）  </li><li>购物（淘宝，当当）  </li><li>新闻网站</li><li>不必要的会议</li><li>烹饪</li><li>玩电子游戏（尤其是网络游戏）</li><li>工间喝咖啡休息</li><li>*这些时间你本可以用来工作或者做一些更富有成效的事情。**<br>跟踪你的时间：精心地跟踪一下自己的时间花费情况。获取精确的数字，了解每天的每小时你都是怎样花掉的。看看数据，找出你最大的2～3个时间杀手。<br>此处推荐一个iphone的App：时间块。它能够让你明确每天的时间是怎样花掉的。</li></ul><p><em>烹饪、工间喝咖啡休息或者其他你喜欢做的事情是在浪费时间吗？</em><br>也是也不是。答案取决于你为什么做这些事情。为了享受快乐有意识地做这些事情，就不是浪费时间，只要你是因为喜欢才特意做这些事情，而不是为了逃避自己应该完成的实际工作。<br>我曾经把玩电子游戏视为浪费时间，但是我喜欢玩电子游戏。这是否意味着我要完全放弃玩电子游戏呢？不是的。但是，当我有任务需要完成的时候，我就不能玩电子游戏。我不能用玩电子游戏来逃避自己本该完成的工作。<br>同样的原则也适用于烹饪。也许你喜欢烹饪，为自己制作健康美食。如果是这样，那就太棒了。但是，如果你不特别喜欢烹饪，却要耗费大量时间来准备简单的一餐，那你就需要找出其他的健康饮食的方法来减少用于烹饪的时间。<br>我的目的不是让你抛弃生活中的喜好，只是确保你没有把时间浪费在一些没必要做或者不那么喜欢做的事情上，或者吞噬掉你所有业余时间的事情上。</p><h2 id="惯例的重要性"><a href="#惯例的重要性" class="headerlink" title="惯例的重要性"></a>惯例的重要性</h2><p><strong>生产力的真正秘诀在于：长期坚持做一些小事。每天你做什么样的决定塑造着未来的你。</strong></p><h2 id="创建一个惯例"><a href="#创建一个惯例" class="headerlink" title="创建一个惯例"></a>创建一个惯例</h2><p>一个好的惯例始于一个大的目标。一旦挑选好了大目标，接下来就要弄清楚怎样才能每天或每周前进，最终实现目标。</p><h3 id="参考借鉴一下作者的惯例"><a href="#参考借鉴一下作者的惯例" class="headerlink" title="参考借鉴一下作者的惯例"></a>参考借鉴一下作者的惯例</h3><p>7:00 am<br>锻炼（跑步或者举重）<br>8:00 am<br>吃早餐（周一、周三、周五，早餐食谱A；周二、周四，早餐食谱B）<br>9:00 am<br>开始工作，并且挑选最重要的工作做<br>11:00 am<br>检查和回复邮件<br>12:00 am<br>吃午餐（周一、周二、周三、周四，自己做午餐；周五，外出吃午餐）<br>1:00 pm<br>专业开发时间（研究新技术，提高技能）<br>1:30 pm<br>做第二重要的工作，开会或其他<br>5:30 pm<br>为明天的任务做好计划，记录今天完成的工<br>6:30 pm<br>晚餐<br>7:00 pm<br>陪孩子做游戏<br>9:00 pm<br>读书<br>11:00 pm<br>睡觉<br><strong>选择一个大目标，以每个工作日为单位制订例行安排。计算一下，如果你每天都朝着这个目标前进，一年下来你会取得多大的成就。</strong></p><h2 id="培养习惯"><a href="#培养习惯" class="headerlink" title="培养习惯"></a>培养习惯</h2><h2 id="习惯与惯例"><a href="#习惯与惯例" class="headerlink" title="习惯与惯例"></a>习惯与惯例</h2><p>培养和养成良好的习惯可以让你不需要刻意努力就保持很高的生产效率。如同惯例可以帮我们缓慢而坚定地每次只砌好一块砖，最终建起一面巨大的墙一样，习惯也可以通过日积月累的努力，让我们前进或者后退。二者最大的区别在于，惯例是我们可以控制的，而习惯却不受我们控制。  </p><h2 id="了解习惯"><a href="#了解习惯" class="headerlink" title="了解习惯"></a>了解习惯</h2><p>习惯主要由三个要素构成：暗示，惯例和奖励。</p><ul><li>暗示是导致习惯被触发的某样东西。它可能是某一天的某个特定时刻、某种形式的社交场合、某个特定的环境或者其他任何东西。例如，只要我们进入电影院，我们就获得了买爆米花的暗示。  </li><li>惯例就是你做的事情，也就是习惯的本质。惯例可能是抽烟、跑步，也可能是在检查代码之前运行所有的单元测试。</li><li>奖励就是让习惯真正保持下去的“锚”。这是一种你从执行习惯中获得的良好感觉。奖励可能只是一种满足感，或者是你在《魔兽世界》里升级时的那一声“叮”，再或者是你喜欢的那道点心的甜蜜味道。<br>我们的大脑非常善于养成习惯。<br>可变化的奖励要比已知的标准奖励更让人着迷。不知道自己是否能得到奖励或者不知道奖励有多大，会形成一种很坏的习惯，即公认的“上瘾”。<br>你可能已经有数百个自己没有觉察到的习惯。  <h2 id="找出坏习惯，改掉"><a href="#找出坏习惯，改掉" class="headerlink" title="找出坏习惯，改掉"></a>找出坏习惯，改掉</h2>完全抛弃坏习惯做起来相当困难。我很难抵挡它的诱惑，并且一半的时间里当我按照习惯做事时我都没有意识到自己在这么做。习惯是自发的。但是，与完全抛弃习惯不同，我可以改变惯例。<br>要找出坏习惯，最好的办法就是设法找到日常生活中令你感到内疚的事情或惯例。什么事情你想停下来却又总是推迟到另一天？</li><li>试着从小事做起。选一个你找出来的坏习惯，不要试图马上就改变它。相反，尽量找出这个习惯被什么触发，你这么做有什么表现，以及是什么奖励激励你产生冲动要这样做。</li><li>努力找出是否有别的惯例可以代替当前这个为了某个习惯正在执行的惯例。如果可能的话，尽量寻找那些会带来相似的奖励甚至相同类型的奖励的事情。</li><li>强迫自己坚持足够长的时间，以使新习惯取代旧习惯。<br>挑选一项你的坏习惯，试着把它转变为好习惯。在开始做之前，先在自己脑海中设想一下从现在起一周之后、一个月之后、乃至于一年之后你会有什么成果。<h2 id="分解任务：如何吃掉一头大象"><a href="#分解任务：如何吃掉一头大象" class="headerlink" title="分解任务：如何吃掉一头大象"></a>分解任务：如何吃掉一头大象</h2></li></ul><p><em>要吃掉一头大象，每次吃一口。</em><br>造成拖延的首要原因之一，同时也是造成生产力低下的祸根，就是总是在感慨一个问题：好忙啊，问题好大啊……实际上，你并没有真正试着去解决问题。当我们从任务的全貌来审视任务的时候，它们看起来比真实情况都要大，并且更吓人。通过将大任务分解为小任务，你会发现自己更有动力去完成它们，也更加稳妥地向着目标前进。<br>大型任务是一种智力挑战，与小任务相比，大任务更可能导致拖延，通常描述也更少，更容易出错，也更难估算完成时间。  </p><h3 id="如何分解任务"><a href="#如何分解任务" class="headerlink" title="如何分解任务"></a>如何分解任务</h3><ul><li>首先需要明确完成这项任务需要哪些步骤。</li><li>把大任务分解为小任务的时候，务必确保每个小任务都有一个明确的目标。</li></ul><h2 id="努力工作的价值，以及为什么你总是逃避努力工作"><a href="#努力工作的价值，以及为什么你总是逃避努力工作" class="headerlink" title="努力工作的价值，以及为什么你总是逃避努力工作"></a>努力工作的价值，以及为什么你总是逃避努力工作</h2><ul><li>事情的真相是，如果想真切地看到自己行动的成果，我们必须自愿努力工作。如果你想看到成果，你就必须要学会坐下来，做好自己并不想做的工作——并且要坚持不懈。</li><li>你必须认识到，工作最终必须要被完成，所以还不如现在就做，而不是拖到以后；你必须认识到，你要想实现目标，要想发挥出自己的全部潜力，唯一的途径就是自愿咬紧牙关、硬着头皮、开始工作。</li></ul><h2 id="任何行动都比不采取行动好"><a href="#任何行动都比不采取行动好" class="headerlink" title="任何行动都比不采取行动好"></a>任何行动都比不采取行动好</h2><h2 id="为什么选择拒绝采取行动"><a href="#为什么选择拒绝采取行动" class="headerlink" title="为什么选择拒绝采取行动"></a>为什么选择拒绝采取行动</h2><p>我们明知道应该采取行动的时候却选择拒绝采取行动，恐惧可能是最大的原因。恐惧出错，恐惧把事情搞砸了，恐惧后果不可估量或失败，恐惧改变，恐惧做不一样的事情。很少有人会后悔自己基于所掌握的最好的知识采取的行动，但是很多人会后悔自己没有采取行动。他们错失机会，只因为过分害羞、谨慎或者犹豫，让他们裹足不前，无所作为。</p><h2 id="不采取行动会发生什么？"><a href="#不采取行动会发生什么？" class="headerlink" title="不采取行动会发生什么？"></a>不采取行动会发生什么？</h2><p>有多少次你在面临选择的时候，你拖延时间不肯解决——实际上，如果你愿意采取行动，可能5分钟内就能解决。有多少次当你面临选择的时候，因为还没有找到最佳的解决方案，或者害怕作出错误的决定，所以你选择了什么都不做？又有多少小时、多少年因为你不采取行动而白白浪费？<br>无论你在逃避什么，无论是什么在困扰着你，都不要拒绝采取行动。当下就是行动的时刻。当下就是决策的时刻。</p><h2 id="可能发生的最坏情况是什么？"><a href="#可能发生的最坏情况是什么？" class="headerlink" title="可能发生的最坏情况是什么？"></a>可能发生的最坏情况是什么？</h2><p>你发现自己错了，转而采取其他的行动。很多时候，你需要试错好多次之后才能找出正确的行动方向。在任何行动上耽误的时间越长，完成整个试错过程找出正确方向的用时也就越长。<br>有时候，当你完全不确定要做什么的时候，最好的行动就是做一些事情，然后在前进途中再调整方向。  </p><ul><li>现在要怎么做？</li><li>阻拦我采取行动的障碍是什么？  </li><li>如果我需要做出选择，我的选择会是什么？我要从哪些选项中做出选择？  </li><li>做出了错误的选择会导致的最坏结果是什么？   </li><li>如果我选择失误，我可以退回去选择其他选项吗？这么做的代价高吗？  </li><li>选择之间的区别是否很大？我能选择可以立即采取行动的次优方案吗？  </li><li>我当前面临的问题有助于自我发现吗？如果开始我采取一些行动，在我发现正确的行动之前，还能进行调整吗？  </li><li>如果我不采取行动，会发生什么？会有什么代价？是浪费时间，错过机会，还是损失金钱？</li></ul><h2 id="怎样支配你的薪水"><a href="#怎样支配你的薪水" class="headerlink" title="怎样支配你的薪水"></a>怎样支配你的薪水</h2><h2 id="拒绝短期思维"><a href="#拒绝短期思维" class="headerlink" title="拒绝短期思维"></a>拒绝短期思维</h2><p>我们生活开销正好达到甚至超过我们的收入。这种财务方面的短期思维方式从来都不会让我们成功，因为我们挣的越多，花的也越多。</p><h2 id="资产与负债"><a href="#资产与负债" class="headerlink" title="资产与负债"></a>资产与负债</h2><p>建立长远的理财思维，考虑物品的实际开销，而不是根据你每个月的收入多少来确定花销多少。<br>资产，是指实用价值高于维护成本的东西。也就意味着，一样东西如果有资格被定义为“资产”，必须能够带来比自身成本更高的价值。<br>负债，是指成本高于带来的价值的东西。也就是说，要保有“负债”，你不得不往外掏钱，但是你永远也拿不回来与自己掏出的钱一样多的钱。<br>任何能把钱装在你口袋里的东西才是资产，而任何需要你把钱从口袋里掏出来的东西都是负债。</p><h2 id="健身"><a href="#健身" class="headerlink" title="健身"></a>健身</h2><ul><li>每周逐步地增加你的跑步距离。开始你只需要短时间地走路或跑步，等训练计划结束时，你就能够跑完完整的5 km（尽管增长幅度不总是逐步的）。</li></ul><h2 id="信念"><a href="#信念" class="headerlink" title="信念"></a>信念</h2><ul><li>那些想要改变自己信念、控制自己想法的人们，通过积极的正念可以将其想要的变为现实。</li><li>如果想改变自己的态度，你就必须改变自己的想法。如果想改变自己的想法，你就必须转变自己的思维模式。你的思维模式是由你的习惯决定的，因此我们可以追溯到改变你生活中处理任何关键事情所采用的主要方式——养成一个习惯。但是，如何养成积极思考的习惯呢？大多数情况下，使用养成其他任何习惯的方法就能养成这个习惯——通过坚定地、持续不断地、有意识地重复做一件事情，直到由潜意识来掌握大局。</li><li>如果你相信一件事能成功，只要坚持并强化这个信念，最终它就会变成现实。<h3 id="推荐书籍"><a href="#推荐书籍" class="headerlink" title="推荐书籍"></a>推荐书籍</h3>《人性的弱点》<br>《心里控制方法》<br>《代码大全》<br>《代码整洁之道》  <h2 id="积极面对失败"><a href="#积极面对失败" class="headerlink" title="积极面对失败"></a>积极面对失败</h2></li></ul><p><em>在生活中，也许你能学会让你更成功的所有技能，但是如果你缺少持之以恒这个重要的技能，一切都将是毫无意义的，因为那样的话刚一遇到麻烦你就会放弃——生活中我们都会面对很多麻烦。</em></p><h3 id="为什么我们总是害怕失败？"><a href="#为什么我们总是害怕失败？" class="headerlink" title="为什么我们总是害怕失败？"></a>为什么我们总是害怕失败？</h3><ul><li>畏惧失败似乎是大多数人的本能。人都喜欢做自己擅长的事情，逃避做那些自己不能胜任的或是缺乏技能的事情。我们似乎与生俱来就畏惧失败。</li><li>害怕失败是基于保护脆弱的自尊的想法。或许我们害怕失败就是因为我们太过将失败归咎于个人，我们认为在特定领域下的失败是个人价值的流逝。</li><li>失败并不是被打败，失败是通往成功的必经之路，它能带领我们离成功越来越近，首先不要害怕去尝试</li></ul><ul><li>学会拥抱失败、期待失败、接受失败，并准备直面失败。失败并不能定义你的价值而你对待失败的态度恰恰才能说明你的价值 *</li><li><ul><li>那些你过去已经被告知的关于“你该如何生活”的狭窄的、笔直的道路，如你要取得好成绩、尽量不要搞砸了、上大学、找份工作然后安心工作50多年直到退休吧……并不是你可以走下去的唯一道路。当然，你也可以继续沿着过去被告知的那条道路前进，只要你愿意；不过，如果你正在读这本书，我相信你已经意识到，生活原本要比你所厌恶的朝九晚五的工作丰富多彩得多。 **<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2></li></ul></li></ul><ul><li>学习和吸收信息的新方法，给了你足够的信心去超越自我。</li><li>更有成效，更谨慎地管理和善用你的时间，并且能够激励你看到努力工作的价值，并付诸于实践。</li><li>以某种方式去健身，更好地照顾自己的身体健康。</li><li>意志力是多么强大、多么重要，你的头脑可以作为一种工具，要么推动你前进，要么在你来不及做出反应、来不及应用自己所学的时候就摧毁你的前程。你有能力成为你想成为的人，你也可以通过积极思考和坚持到底的力量重新塑造自己。</li></ul><p>至此，此书已阅读完成，暂告一段落，开始下一本书的征程。 -2020/1/18</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>《怪诞行为学》系列读书笔记</title>
    <link href="/2021/01/07/2020-02-06-weirdBehavior/"/>
    <url>/2021/01/07/2020-02-06-weirdBehavior/</url>
    
    <content type="html"><![CDATA[<h2 id="出版社：中信出版集团"><a href="#出版社：中信出版集团" class="headerlink" title="出版社：中信出版集团"></a>出版社：中信出版集团</h2><h2 id="系列一：《怪诞行为学：可预测的非理性》片段"><a href="#系列一：《怪诞行为学：可预测的非理性》片段" class="headerlink" title="系列一：《怪诞行为学：可预测的非理性》片段"></a>系列一：《怪诞行为学：可预测的非理性》片段</h2><ul><li><p>要想从中乃至从社会科学的总体上获取真正价值，对读者而言更重要的是，要花点儿时间想一想如何把实验里所确认的人类行为原理应用到你们的生活中去。我建议你们每读过一章后稍事停顿，考虑一下实验中揭示出的原理能让你在生活中有所得，还是有所失，更重要的是，在你有了对人类本性的新认识之后，将如何改变自己的行为。我们真正要探索的也正在于此。</p></li><li><p>人们很少做不加对比的选择。我们的心里并没有一个“内部价值计量器”来告诉我们某种物品真正的价值是多少。相反，我们关注的是这种物品与其他物品的相对优劣，以此来估算其价值。</p></li><li><p>富人嫉妒的是比自己更富有的人。</p></li><li><p>这就是相对论带来的问题——我们用相对的方法看待我们的决定，就近与现成的其他选择做比较。两支钢笔的差价使价格较低的钢笔的相对优势远远高于另一支，这个明显的答案让我们决定多花15分钟节省7美元。同时，两套西装的差价使那套价格较低的西装的相对优势显得很小，我们就愿意多花那7美元。</p></li><li><p>像这样拓宽视野不太容易，因为凭相对因素做决定是我们自然的思考方式。</p></li><li><p>一旦参与者愿意出价买某物，他们此后购买同类产品时就也会参照他第一次决定的出价（锚）做决定。 这也就是我们所谓的“任意的一致”。首次的出价大都是“任意”的，并可能受到任意问题答案的影响；可是一旦这些价格在我们的大脑中得到确立，它形成的便不仅是我们对某一产品的出价意愿，还包括我们对其他有关产品的出价意愿（这使它们一致）。</p></li><li><p>锚具有持续效应，对当前的价格是这样，对将来的价格也是如此。</p></li><li><p>基于其他人的行为来推断某事物的好坏，以决定我们是否仿效，这就是“羊群效应”。</p></li><li><p>从个人生活来说，我们有能力积极改进自己的非理性行为。我们可以从认识自己的脆弱开始。比如你打算买一个超薄手机（带300万像素、8倍变焦的数码摄像头），或者每天买一杯4美元的极品咖啡。你可以首先从质疑这种习惯开始。它是怎么开始的？同时，问一下自己，你能从中获取多大的快感。这一快感真的就如同你预期的那么大？你能不能把预算压低一点儿，更好地把省下的钱用在别处？事实上，你做一切事情都应该进行自我训练，质疑自己一再重复的行为。在手机的问题上，你能否从超薄型后退一步，减少点儿花费，把一部分钱用在别的地方？说到咖啡——不要问今天你想喝哪种极品混合咖啡，自问一下，你真的应该养成动辄来杯高价咖啡的习惯吗？</p></li><li><p>我们对价格变化的敏感度，实际在很大程度上可能是两种因素共同作用的结果——我们对过去价格的记忆，以及我们想与过去决定保持一致的欲望，根本不是对我们真正偏好或需求大小的体现。</p></li><li><p>免费最大的问题在于，它引诱你在它和另一件商品之间挣扎——并引导我们做出不明智的决定。举一个例子，假如你想去运动用品店买一双白袜子，就是后跟有结实的夹层，前面镶金线的那种。一刻钟以后，你从店里出来，手里拿的却不是你想买的那种袜子，而是另一双你一点儿也不喜欢的便宜货（后跟没有夹层，前面也没镶金线），但是它附赠一双免费袜子。在这个例子里，你放弃了更好的选择，买回了你原先不想要的东西，这完全是免费的诱惑！</p></li><li><p>多数交易都有有利的一面和不利的一面，但免费使我们忘记了不利的一面。免费给我们造成一种情绪冲动，让我们误认为免费的物品的价值大大高于它的事实价值。为什么？我认为这是由于人类本能地惧怕损失。免费的真正诱惑力是与这种惧怕心理联系在一起的。我们选择某一免费的物品不会有显而易见的损失，但是假如我们选择的物品是不免费的，那就会有风险，可能做出错误决定，可能蒙受损失。于是，如果让我们选择，我们就会尽量朝免费的方向去找。</p></li><li><p>零成本的吸引力不仅仅局限于现金交易。不管是物物交换还是现金交易，免费就像地心引力一样，实在让我们难以抗拒。</p></li><li><p>免费同样适用于时间领域。我们花在一件事上的时间，说到底，是从另一件事上转移过来的。如果我们花上45分钟排队等候品尝免费冰激凌的味道，或者花半个小时填一张长长的表格来领取一点儿回报，那我们就没法用这些时间去干别的事。</p></li><li><p>是怎么一回事？零美元怎么会比30美元更有吸引力？这是因为，提到了钱的问题，律师们用的是市场规范，认为报酬与他们的实际工资标准相比太少。没提到钱的问题时，他们用的是社会规范，所以他们愿意贡献时间。那么，为什么他们不干脆接受30美元，然后把自己假想为拿了30美元补贴的义工呢？这是因为，一旦市场规范进入我们的考虑之中，社会规范就随之而去了。</p></li><li><p>这些结果说明，如果要让市场规范起作用，提钱就足够了（即使不是现金）。</p></li><li><p>如果想把这段关系保持在社会规范之内，远离市场规范，那么这就是你必须付出的代价。</p></li><li><p>一个以社会规范为特征，一个以市场规范为特征。我们对这两个世界实行不同的规范标准。不仅如此，把市场规范引入社会规范，就如同我们前面所看到的，这违反了社会规范并且伤害了社会关系。一旦发生这样的错误，社会关系将难以恢复。</p></li><li><p>一旦社会规范与市场规范发生碰撞，社会规范就会退出。换言之，社会规范很难重建。一旦这朵盛开的玫瑰从枝头落下（一旦社会规范被市场规范打败）它就很难再发挥任何效力。</p></li><li><p>在非兴奋状态下，他们并不知道自己在兴奋状态下会怎样。预防、保护、节制以及道德感在雷达屏幕上全都消失了。他们没有能力预测激情会把他们改变到何种程度。</p></li><li><p>这些平素的好人都认为了解自己，但是在情绪极度亢奋时，一下子或一念之差，一切都变了。</p></li><li><p>抗拒诱惑困难，身陷诱惑之中与之斗争更困难。</p></li><li><p>拖沓问题人皆有之，那些认识到并承认自己弱点的人能够更好地利用设计好的工具帮助自己战胜它。 破釜沉舟，帮助自己战胜拖沓，这就是我和学生们的经验。它与日常生活有什么关系呢？我认为关系很大。抵御诱惑、灌输自制意识是人类总体的目标，一再失败、少有成功则是我们很多苦难的来源之一。我环顾周围，看到人们都在尽力做他们认为正确的事情，不管是发誓要远离点心盘子的节食者，还是发誓要少花钱、多储蓄的家庭，为自我控制进行的斗争到处都有。我们可以在书籍杂志、广播电台和电视里发现各种各样的自我完善和自助的信息。 但是，尽管有这些电波信息的传播和印刷品的集中关注，我们仍会看到自己处在和我的学生们同样的困境之中——一次又一次地无法达到我们的长远目标。为什么呢？因为缺乏破釜沉舟的决心，我们在诱惑面前一触即溃。</p></li><li><p>人类本性中的三大非理性怪癖</p></li><li><p>第一种怪癖，正如我们在篮球票案例中所看到的，我们对已经拥有的东西迷恋到不能自拔。</p></li><li><p>第二种怪癖，是我们总是把注意力集中到自己会失去什么上，而不是会得到什么上。</p></li><li><p>第三种怪癖，是我们经常假定别人看待交易的角度和我们一样。</p></li><li><p>用“非拥有心态”来看待每一桩交易（特别是大笔的），把自己和感兴趣的物件适当拉开距离。有了这样的努力，我不敢说能像印度托钵僧人那样，奉行对物质世界无欲无求的信条，但至少我可以尝试像禅宗弟子那样，对世间万物，尽量待之以平常心。</p></li><li><p>我们可能往往认识不到，无论哪种情况，保留余地的同时，我们也放弃了别的东西。结果是我们的电脑里有很多功能根本用不到，音响系统的保修费又高又多余。说到孩子，我们和他们都投入了太多时间——为了寻找孩子在某一方面的特长，让他们把一大堆活动都体验了一遍。我们为了一些不一定重要的事情疲于奔命，却忘记了在真正重要的事情上下功夫。这种傻瓜游戏得不偿失，但是我们偏偏喜欢玩</p></li><li><p>多种选择余地给我们造成了哪些困难？我们为什么非要给自己保留那么多的选择，即使这些选择要付出非常高的代价？我们为什么不能一心一意，全力以赴地做事呢？</p></li><li><p>他们同样带着非理性的冲动，竭力保持所有的选择余地。</p></li><li><p>我们非常奇怪，因为他们还是会把点击机会浪费在消失了却“可复活”的门上。尽管这无关紧要，很容易恢复，但一想到可能的损失他们就无法忍受，就要尽一切努力，不让可选择的任何一扇大门关闭。</p></li><li><p>我们有必要退出一些浪费时间的委员会，不要再给一些朋友寄送节日贺卡，因为他们有了新的生活、新的朋友。我们需要确定是否有时间去看篮球，是否能同时打高尔夫球和壁球，又能和家人在一起。我们或许应该把其中某些运动放一下。我们有必要把这些门关掉，因为这些事既费时费力还挤占了我们的参与机会，使我们无法顾及那些有价值的选择，并使我们疲惫不堪。</p></li><li><p>假如你把很多门都关了，只剩下两扇。你以为，这样你就容易选择了，但事实往往并非如此。事实上，在吸引力大致相同的两种选择中做取舍是最难的。在这种情形下，问题不仅在于保留选择时间的长短，还在于到头来我们要为自己的犹豫不决付出代价。</p></li><li><p>他们本可以更轻松地做出决定。他们甚至可以采取掷硬币猜正反面的方式来做决定（这是比喻，就像驴子的故事一样）。但是我们不会这样做，因为我们就是不愿意把这些门关上。</p></li><li><p>为什么会产生这么多暴力冲突？是历史、民族、政治方面的原因，还是我们本性中就存在某些非理性的东西，鼓励我们对抗，引导我们对同一事件根据自己的立场而采取完全不同的观察角度？</p></li><li><p>如果你直截了当地告诉人们某种东西可能味道不好，结果十有八九他们会跟着你走——他们之所以这样，不是因为体验，而是因为预期。</p></li><li><p>如果我们事先相信某种东西好，那它一般就会好（我们认为它不好，它也就会不好）。但是，这种影响到底有多深？它只是改变我们的信念，还是连实际体验的心理也一起改变了？换句话说，人们的预知能够改变对味道的辨别结果吗？我们预期某种东西味道好（或者不好），于是它就果真变成那样了吗？</p></li><li><p>如果蒙上顾客的眼睛让其进行品尝测试，这类配方未必有多大用处；但是事先给我们这种信息，用以改变我们的预期，却能有效地影响我们对味道的判断。</p></li><li><p>预期还可以形成成见。成见，说到底，这是人们希望用来预测体验，对信息进行分类的一种方式。大脑不能在每一种新环境下仅凭片段就开动，它必须建立在从前所收到过的信息基础上。由于这一原因，成见并不是从本质上就有害的。它为我们不断地理解周围复杂的环境提供了捷径。这就是为什么我们看到老年人用电脑，马上就会想到他们可能需要帮助，看到哈佛的学生就会想到他们一定很聪明的原因。 [1] 但是，因为成见给我们提供了对某一群体成员特定的预期，因而它也可能对我们的认识与行为产生不利影响。</p></li><li><p>在我们的实验里，尝酒前后都不知道加醋，与尝酒之后才知道加醋，都能品出酒的真正味道。这一方法也可以用来解决争端：双方不带偏见地提出各自的认识——只是揭示事实真相，而不去涉及是哪一方采取了什么行动。这种“蒙眼”状态有可能帮助我们更好地认识事情的原委。</p></li><li><p>总的来说，有两种机制能够形成预期，使安慰疗法与安慰剂起作用。其一是信念——我们对某种药品、某个手术或有关人员的信赖或信任。</p></li><li><p>第二个机制是条件反射。就像巴甫洛夫著名的条件反射实验（狗一听到铃响就流口水）一样，经过重复的体验，人的体内就能建立起一种期望。</p></li><li><p>那么，我们在价格上打了折扣，注定得到的东西就差更吗？如果我们依赖自己非理性的直觉，实际上就是这样。如果我们看到半价商品，我们本能地断定它的质量就比全价的差——事实上，是我们把它看得差了，它也就真的变差了。怎么纠正呢？如果我们定下心来，理性地拿产品与价格做一番比较，就能克服那种无意识的冲动，不再把产品的销售价格与内在质量挂钩了。</p></li><li><p>有了适当的机会，很多平日里诚实的人也会作弊。我们发现，坏了一锅汤的并不只是几条臭鱼，多数人都会作弊，但作弊的程度不高。</p></li><li><p>在诱惑下作弊，作弊的程度并不像人们通常认为的那样高，这可能与害怕被发现有直接关联。</p></li><li><p>离现金一步之遥的作弊最容易发生。</p></li><li><p>因为我们擅长把自己细微的不诚实想法和做法合理化，所以我们通常很难清楚地确定非现金事物对作弊的影响。例如，拿一支铅笔，我们可能推断办公用品是对员工的一部分补助，或者拿一两支铅笔之类的事人人都会干。我们会说，偶尔从公用电冰箱里拿一瓶可乐不算什么，因为有时我们自己的可乐也会被别人拿走。可能斯基林和法斯托等人认为篡改一下安然的账目也没有什么不可以的，因为那只不过是一种权宜措施，以后生意好转，再改回来就行了。谁知道呢？</p></li><li><p>象征货币不仅能给人们的某些道德约束“松绑”，还能使相当一部分人“松绑”得非常彻底，甚至到肆意作弊、毫无顾忌的地步。</p></li><li><p>我们了解到，只要有机会，人们就会作弊。但奇怪的是，我们多数人对此并无察觉。</p></li><li><p>交换介质一旦变成非货币的，我们为自己行为做出合理化解释的能力就会突飞猛进。</p></li><li><p>我们要认识到，一旦没有现金的直接提醒，我们就可能作弊，而且所达到的程度连我们自己都想象不到。我们必须唤醒自己，认识到这一切（不管是作为具体的个人、企业，还是作为一个国家），而且是越快越好，越早越好。</p></li><li><p>人们对酒类饮料的选择与同桌其他人不同的倾向，与被称作“独特需求”的人格特质之间的关联。从本质上说，那些注重表现自己独特性的人更可能点别人没点过的酒，以此来证明自己确实与众不同。</p></li><li><p>人们有时甘愿牺牲消费快感来突出自己在别人心目中的形象。人们在选择食品和饮料时好像有两个目标：要么能给自己带来最大享受，要么希望能在朋友心中留下自己某些正面的人格特质印象。问题在于，一旦他们做出选择，例如，点了菜，他们就必须勉强食用自己本来不喜欢的东西，从而陷入一种后悔莫及的境地。说到底，人，特别是那些独特需求旺盛的人，更有可能牺牲个人需求去换取名声需求。</p></li><li><p>我们都是棋盘上的小卒子，对棋局里的多种力量认识不多。我们通常认为自己稳坐在驾驶座上，对自己的决策，对自己生活的方向具有至高无上的操控能力；但是，可惜啊，这只是我们一厢情愿的认识，它反映的是我们的欲望，我们对自身想当然的认识，而不是现实。</p></li><li><p>尽管非理性司空见惯，但并不是说我们都无可救药了。一旦我们明白了自己的错误决定会发生在什么时间，源自什么地方，就可以提高警惕，强制自己从不同角度、用不同方式重新考虑这些决定，或者用科技手段来克服与生俱来的缺点</p></li><li><p>我建议说假如你要去酒吧，应当考虑带个伴儿，外貌、身材比你稍差一点儿。人们的评价行为都具有相对的特质，因此周围的人不但会认为你比你的“诱饵”朋友英俊潇洒，甚至还会觉得你风度翩翩，胜过酒吧里的其他所有人。根据同一逻辑，我还指出了事情的另一面，那就是如果有人请你陪伴他（她），你应该很容易推测出你朋友对你的评价。</p></li><li><p>要懂得相对论无处不在，我们对一切事物的观察都必然通过它的镜头，玫瑰色也好，其他色也罢。如果你在其他国家、其他城市遇到某个人，他（她）似乎对你有一种神秘的吸引力，你要明白这种吸引力可能仅限于特定的环境中。有了这样的认识，即使日后吸引力消失，你也不会感到失望。</p></li><li><p>人们对免费的东西都过分热衷，人们因此做出的决定往往对自己并非最有利。</p></li><li><p>如果你混淆了社会规范与市场规范，就会发生令人不快的事情。</p></li><li><p>市场规范内的理性行为，如果用社会规范来衡量，就会变得异乎寻常的非理性。</p></li><li><p>如果我们不能自我控制，有时候便会把需要立即做的事情一再拖延。但是，我们缺乏自制力还表现在另一方面，对有些应该放一放的事情我们却不厌其烦地费心处理——比如说，着魔似的一次又一次地检查电子邮箱里的邮件或手机短信。</p></li><li><p>在可变比率强化程式下，什么时候得到奖励是不可预期的。从表面上看，人们可能认为固定比率强化程式有更大的激励作用和奖励效果，因为老鼠（或者二手车销售经理）可以学会预测工作的奖励。结果与此相反，斯金纳发现，实际上可变比率强化程式的激励作用更大。最有说服力的结果是，一旦停止奖励，固定比率强化程式一组的老鼠几乎马上就会停止压杠杆，而可变比率强化程式一组的老鼠还会继续压很长的一段时间。</p></li><li><p>它提示出了几种摆脱斯金纳实验箱和可变比率强化程式的方法。我发现最有用的方法之一是关闭电子邮件的自动接收功能。我仍然可以接收邮件，但这样电脑就不能随时提示我又收到新邮件了（我心里会想，这其中肯定有我需要的和需要我处理的）。还有，我们还可以利用电脑的功能对收到的邮件设定不同颜色和声音。</p></li><li><p>我和其他人一样，在自我控制上也有非常多的困难，但我有个诀窍。我设法控制住其他方面的欲望，尽最大努力使自己能够忍受干扰素注射的痛苦。具体来说，我的办法就是看电影。 我酷爱看电影。如果有时间，我会天天看。在得知自己可能出现的副作用以后，我就下定决心，注射之前不看电影，等到打完针，能看多少就看多少，一直看到我睡着。</p></li><li><p>如果某一特定的预期行为将导致即时的负面结果（惩罚），那么这一行为将很难推进，即使最终结果（在我的这一个案例中为增进健康）的预期价值很高也不例外。归根结底，延迟满足这一问题的难点就在这里。毫无疑问，我们都知道经常锻炼、多吃蔬菜对健康有好处，即便我们无法像德拉尼姐妹那么长寿；但是，因为很难在我们的意识里保持一幅我们未来健康状况的生动画面，我们还是会忍不住伸手去拿甜甜圈。 为了克服人类易于犯错误的各种倾向，我认为寻求一些诀窍，用即时、有力、正面的强化因素与那些我们为了长远目标采取的、并非如此愉悦的步骤相匹配，这样做非常有用。就我来说，在副作用出现之前，先开始看电影，这帮助我抑制了治疗过程中的不适感。实际上，我把一切安排得恰到好处。刚打完针，我就按下开始（播放）键。假如当时副作用在先，按键在后，我未必能在那场漫长的拔河比赛中取得完全胜利。谁能说得准呢？假如我等到副作用出现后再开始放电影，我就可能建立一种负面关联，结果现在我可能就不那么喜欢看电影了。</p></li><li><p>我们对自己的东西估价过高这一倾向，是人类的一种基本偏见，反映出一种更为普遍的倾向，人们会对那些和自己有关的所有事物一见倾心、高看一眼。好好想一想——你是不是觉得自己车开得比一般人好，退休后也会比别人有钱，不大可能有高胆固醇，也不可能离婚，或者你在计时停车点泊车，计时表超过几分钟也不会被罚？这种正面偏见（心理学家给它起了另外一个名称：“沃比根湖效应”）源于收音机上盖瑞森·凯勒的系列流行歌曲《草原一家亲》。歌里唱道：“所有的女人都强壮，所有的男人都英俊，所有的孩子都超出一般聪明。”要让我们对自己孩子和房屋做出真正准确、客观的评价，我认为不大可能。但我们可以认识到自己存在这一偏见，认真听取别人的忠告和建议。</p></li><li><p>在生活中的许多领域，预期对我们最终体验事物的方式发挥着巨大的影响。想一下蒙娜丽莎这幅画。为什么这幅肖像如此美丽动人，这个女人的微笑如此神秘？你能辨别出利奥纳多·达·芬奇创作这幅画所需要的聪明才智和技巧吗？对我们大多数人来说，这幅画很美，笑容很神秘，但这都是听别人说的。没有专业的知识和完整的信息，我们只能从社会线索中寻求帮助，以求了解在多大程度上是，或者应该是，这幅画本身给我们的印象，其余的则由预期来决定。</p></li><li><p>正面预期会增强我们对周围世界的欣赏，改善我们对世界的观察力。不抱预期的危险在于，到头来，我们什么也得不到。</p></li><li><p>主动地、有意识地对难解、困惑以至受伤的事件进行正确解读，这一过程可以帮助人们从中摆脱出来。潘尼贝克在很多案例中，要求病人把自己的反思写在日记里，并发现这种做法非常有帮助。这意味着，即使外部事件不可理喻，我们只要尝试从自身所处的环境进行解读，就可以从尝试本身获益。</p></li><li><p>改变我们对新闻的消化方式，从被动接受改为主动对信息加以思考，进行正确的解读。</p></li><li><p>社会压力和金钱一样，也是一把双刃剑。它对人有激励作用，但是在公众的眼皮底下，压力就会增大，到了一定程度，压力就会占上风，抵消并压倒激励的有利作用。</p></li></ul><h2 id="《怪诞行为学：非理性的积极力量》片段"><a href="#《怪诞行为学：非理性的积极力量》片段" class="headerlink" title="《怪诞行为学：非理性的积极力量》片段"></a>《怪诞行为学：非理性的积极力量》片段</h2>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>《算法图解》读书笔记</title>
    <link href="/2021/01/07/2020-02-17-algorithms/"/>
    <url>/2021/01/07/2020-02-17-algorithms/</url>
    
    <content type="html"><![CDATA[<h2 id="出版社：人民邮电出版社"><a href="#出版社：人民邮电出版社" class="headerlink" title="出版社：人民邮电出版社"></a>出版社：人民邮电出版社</h2><h2 id="出版日期-2017-3"><a href="#出版日期-2017-3" class="headerlink" title="出版日期: 2017-3"></a>出版日期: 2017-3</h2><h2 id="片段"><a href="#片段" class="headerlink" title="片段"></a>片段</h2><ul><li><p>一般而言，对于包含n个元素的列表，用二分查找最多需要log2n步，而简单查找最多需要n步。</p></li><li><p>你可能不记得什么是对数了，但很可能记得什么是幂。log10100相当于问“将多少个10相乘的结果为100”。答案是两个：10 × 10 = 100。因此，log10100 = 2。对数运算是幂运算的逆运算。</p></li><li><p>大O表示法是一种特殊的表示法，指出了算法的速度有多快。</p></li><li><p>大O表示法指出了算法有多快。例如，假设列表包含n 个元素。简单查找需要检查每个元素，因此需要执行n 次操作。使用大O表示法，这个运行时间为O(n)。单位秒呢？没有——大O表示法指的并非以秒为单位的速度。大O表示法让你能够比较操作数，它指出了算法运行时间的增速。</p></li><li><p>大O表示法指出了最糟情况下的运行时间</p></li><li><p>O(log n)，也叫对数时间，这样的算法包括二分查找。 O(n)，也叫线性时间，这样的算法包括简单查找。 O(n * log n)，这样的算法包括第4章将介绍的快速排序——一种速度较快的排序算法。 O(n2)，这样的算法包括第2章将介绍的选择排序——一种速度较慢的排序算法。 O(n!)，这样的算法包括接下来将介绍的旅行商问题的解决方案——一种非常慢的算法。</p></li><li><p>算法的速度指的并非时间，而是操作数的增速。 谈论算法的速度时，我们说的是随着输入的增加，其运行时间将以什么样的速度增加。 算法的运行时间用大O表示法表示。 O(log n)比O(n)快，当需要搜索的元素越多时，前者比后者快得越多。</p></li><li><p>二分查找的速度比简单查找快得多。 O(log n)比O(n)快。需要搜索的元素越多，前者比后者就快得越多。 算法运行时间并不以秒为单位。 算法运行时间是从其增速的角度度量的。 算法运行时间用大O表示法表示。</p></li><li><p>需要将数据存储到内存时，你请求计算机提供存储空间，计算机给你一个存储地址。需要存储多项数据时，有两种基本方式——数组和链表。</p></li><li><p>使用数组意味着所有待办事项在内存中都是相连的（紧靠在一起的）。</p></li><li><p>链表中的元素可存储在内存的任何地方。</p></li><li><p>数组用得很多，因为它支持随机访问。有两种访问方式：随机访问和顺序访问。顺序访问意味着从第一个元素开始逐个地读取元素。链表只能顺序访问：要读取链表的第十个元素，得先读取前九个元素，并沿链接找到第十个元素。随机访问意味着可直接跳到第十个元素。本书经常说数组的读取速度更快，这是因为它们支持随机访问。很多情况都要求能够随机访问，因此数组用得很多。</p></li><li><p>链表擅长插入和删除，而数组擅长随机访问。</p></li><li><p>计算机内存犹如一大堆抽屉。 需要存储多个元素时，可使用数组或链表。 数组的元素都在一起。 链表的元素是分开的，其中每个元素都存储了下一个元素的地址。 数组的读取速度很快。 链表的插入和删除速度很快。 在同一个数组中，所有元素的类型都必须相同（都为int、double等）。</p></li><li><p>递归只是让解决方案更清晰，并没有性能上的优势。实际上，在有些情况下，使用循环的性能更好。我很喜欢Leigh Caldwell在Stack Overflow上说的一句话：“如果使用循环，程序的性能可能更高；如果使用递归，程序可能更容易理解。如何选择要看什么对你来说更重要。”</p></li><li><p>编写递归函数时，必须告诉它何时停止递归。正因为如此，每个递归函数都有两部分：基线条件（base case）和递归条件（recursive case）。递归条件指的是函数调用自己，而基线条件则指的是函数不再调用自己，从而避免形成无限循环。</p></li><li><p>调用另一个函数时，当前函数暂停并处于未完成状态。该函数的所有变量的值都还在内存中。</p></li><li><p>这个栈用于存储多个函数的变量，被称为调用栈。</p></li><li><p>使用栈虽然很方便，但是也要付出代价：存储详尽的信息可能占用大量的内存。每个函数调用都要占用一定的内存，如果栈很高，就意味着计算机存储了大量函数调用的信息。</p></li><li><p>递归指的是调用自己的函数。 每个递归函数都有两个条件：基线条件和递归条件。 栈有两种操作：压入和弹出。 所有函数调用都进入调用栈。 调用栈可能很长，这将占用大量的内存。</p></li><li><p>分而治之（divide and conquer，D&amp;C）——一种著名的递归式问题解决方法。</p></li><li><p>如何将一块地均匀地分成方块，并确保分出的方块是最大的呢？使用D&amp;C策略！D&amp;C算法是递归的。使用D&amp;C解决问题的过程包括两个步骤。 (1) 找出基线条件，这种条件必须尽可能简单。 (2) 不断将问题分解（或者说缩小规模），直到符合基线条件。</p></li><li><p>编写涉及数组的递归函数时，基线条件通常是数组为空或只包含一个元素。陷入困境时，请检查基线条件是不是这样的。</p></li><li><p>归纳证明是一种证明算法行之有效的方式，它分两步：基线条件和归纳条件。是不是有点似曾相识的感觉？例如，假设我要证明我能爬到梯子的最上面。归纳条件是这样的：如果我站在一个横档上，就能将脚放到上面一个横档上。换言之，如果我站在第二个横档上，就能爬到第三个横档。这就是归纳条件。而基线条件是这样的，即我已经站在第一个横档上。因此，通过每次爬一个横档，我就能爬到梯子最顶端。</p></li><li><p>快速排序的独特之处在于，其速度取决于选择的基准值。</p></li><li><p>还有一种名为合并排序（merge sort）的排序算法，其运行时间为O(n log n)，比选择排序快得多！快速排序的情况比较棘手，在最糟情况下，其运行时间为O(n2)。 与选择排序一样慢！但这是最糟情况。在平均情况下，快速排序的运行时间为O(n log n)。你可能会有如下疑问。   这里说的最糟情况和平均情况是什么意思呢？ 若快速排序在平均情况下的运行时间为O(n log n)，而合并排序的运行时间总是O(n log n)，为何不使用合并排序？它不是更快吗？</p></li><li><p>正如你看到的，二分查找的速度还是快得多，常量根本没有什么影响。 但有时候，常量的影响可能很大，对快速查找和合并查找来说就是如此。快速查找的常量比合并查找小，因此如果它们的运行时间都为O(n log n)，快速查找的速度将更快。实际上，快速查找的速度确实更快，因为相对于遇上最糟情况，它遇上平均情况的可能性要大得多。</p></li><li><p>完成每层所需的时间都为O(n)。  在这个示例中，层数为O(log n)（用技术术语说，调用栈的高度为O(log n)），而每层需要的时间为O(n)。因此整个算法需要的时间为O(n) * O(log n) = O(n log n)。这就是最佳情况。 在最糟情况下，有O(n)层，因此该算法的运行时间为O(n) * O(n) = O(n2)。 知道吗？这里要告诉你的是，最佳情况也是平均情况。只要你每次都随机地选择一个数组元素作为基准值，快速排序的平均运行时间就将为O(n log n)。快速排序是最快的排序算法之一，也是D&amp;C典范。</p></li><li><p>D&amp;C将问题逐步分解。使用D&amp;C处理列表时，基线条件很可能是空数组或只包含一个元素的数组。 实现快速排序时，请随机地选择用作基准值的元素。快速排序的平均运行时间为O(n log n)。 大O表示法中的常量有时候事关重大，这就是快速排序比合并排序快的原因所在。 比较简单查找和二分查找时，常量几乎无关紧要，因为列表很长时，O(log n)的速度比O(n)快得多。</p></li><li><p>散列函数必须满足一些要求。   它必须是一致的。例如，假设你输入apple时得到的是4，那么每次输入apple时，得到的都必须为4。如果不是这样，散列表将毫无用处。 它应将不同的输入映射到不同的数字。例如，如果一个散列函数不管输入是什么都返回1，它就不是好的散列函数。最理想的情况是，将不同的输入映射到不同的数字。</p></li><li><p>数组和链表都被直接映射到内存，但散列表更复杂，它使用散列函数来确定元素的存储位置。</p></li><li><p>散列表适合用于：   模拟映射关系；</p></li><li><p>缓存/记住数据，以免服务器再通过处理来生成它们。</p></li><li><p>这种情况被称为冲突（collision）：给两个键分配的位置相同。这是个问题。如果你将鳄梨的价格存储到这个位置，将覆盖苹果的价格，以后再查询苹果的价格时，得到的将是鳄梨的价格！冲突很糟糕，必须要避免。处理冲突的方式很多，最简单的办法如下：如果两个键映射到了同一个位置，就在这个位置存储一个链表。</p></li><li><p>散列函数很重要。前面的散列函数将所有的键都映射到一个位置，而最理想的情况是，散列函数将键均匀地映射到散列表的不同位置。 如果散列表存储的链表很长，散列表的速度将急剧下降。然而，如果使用的散列函数很好，这些链表就不会很长！</p></li><li><p>在平均情况下，散列表执行各种操作的时间都为O(1)。O(1)被称为常量时间。你以前没有见过常量时间，它并不意味着马上，而是说不管散列表多大，所需的时间都相同。</p></li><li><p>在最糟情况下，散列表所有操作的运行时间都为O(n)——线性时间，这真的很慢。</p></li><li><p>在平均情况下，散列表的查找（获取给定索引处的值）速度与数组一样快，而插入和删除速度与链表一样快，因此它兼具两者的优点！但在最糟情况下，散列表的各种操作的速度都很慢。因此，在使用散列表时，避开最糟情况至关重要。为此，需要避免冲突。而要避免冲突，需要有：   较低的填装因子； 良好的散列函数。</p></li><li><p>填装因子度量的是散列表中有多少位置是空的。</p></li><li><p>一旦填装因子开始增大，你就需要在散列表中添加位置，这被称为调整长度（resizing）</p></li><li><p>填装因子越低，发生冲突的可能性越小，散列表的性能越高。一个不错的经验规则是：一旦填装因子大于0.7，就调整散列表的长度。</p></li><li><p>良好的散列函数让数组中的值呈均匀分布。</p></li><li><p>你可以结合散列函数和数组来创建散列表。 冲突很糟糕，你应使用可以最大限度减少冲突的散列函数。 散列表的查找、插入和删除速度都非常快。 散列表适合用于模拟映射关系。 一旦填装因子超过0.7，就该调整散列表的长度。 散列表可用于缓存数据（例如，在Web服务器上）。 散列表非常适合用于防止重复。</p></li><li><p>第一种图算法——广度优先搜索（breadth-first search，BFS）。 广度优先搜索让你能够找出两样东西之间的最短距离</p></li><li><p>这种问题被称为最短路径问题（shortest-path problem）。你经常要找出最短路径，这可能是前往朋友家的最短路径，也可能是国际象棋中把对方将死的最少步数。解决最短路径问题的算法被称为广度优先搜索。</p></li><li><p>图模拟一组连接。</p></li><li><p>图由节点（node）和边（edge）组成。</p></li><li><p>图用于模拟不同的东西是如何相连的。</p></li><li><p>广度优先搜索是一种用于图的查找算法，可帮助回答两类问题。   第一类问题：从节点A出发，有前往节点B的路径吗？ 第二类问题：从节点A出发，前往节点B的哪条路径最短？</p></li><li><p>在广度优先搜索的执行过程中，搜索范围从起点开始逐渐向外延伸，即先检查一度关系，再检查二度关系。</p></li><li><p>广度优先搜索不仅查找从A到B的路径，而且找到的是最短的路径。</p></li><li><p>需要按添加顺序进行检查。有一个可实现这种目的的数据结构，那就是队列</p></li><li><p>队列的工作原理与现实生活中的队列完全相同。假设你与朋友一起在公交车站排队，如果你排在他前面，你将先上车。队列的工作原理与此相同。队列类似于栈，你不能随机地访问队列中的元素。队列只支持两种操作：入队和出队。</p></li><li><p>队列是一种先进先出（First In First Out，FIFO）的数据结构，而栈是一种后进先出（Last In First Out，LIFO）的数据结构。</p></li><li><p>有指向他们的箭头，但没有从他们出发指向其他人的箭头。这被称为有向图（directed graph），其中的关系是单向的。</p></li><li><p>无向图（undirected graph）没有箭头，直接相连的节点互为邻居。</p></li><li><p>广度优先搜索的运行时间为O(人数 + 边数)，这通常写作O(V + E)，其中V 为顶点（vertice）数，E 为边数。 练习 下面的小图说明了我早晨起床后要做的事情。</p></li><li><p>广度优先搜索指出是否有从A到B的路径。 如果有，广度优先搜索将找出最短路径。 面临类似于寻找最短路径的问题时，可尝试使用图来建立模型，再使用广度优先搜索来解决问题。 有向图中的边为箭头，箭头的方向指定了关系的方向，例如，rama→adit表示rama欠adit钱。 无向图中的边不带箭头，其中的关系是双向的，例如，ross - rachel表示“ross与rachel约会，而rachel也与ross约会”。 队列是先进先出（FIFO）的。 栈是后进先出（LIFO）的。 你需要按加入顺序检查搜索列表中的人，否则找到的就不是最短路径，因此搜索列表必须是队列。 对于检查过的人，务必不要再去检查，否则可能导致无限循环。</p></li><li><p>这是最短路径，因为段数最少——只有三段，但不一定是最快路径。如果给这些路段加上时间，你将发现有更快的路径。</p></li><li><p>前一章使用了广度优先搜索，它找出的是段数最少的路径（如第一个图所示）。如果你要找出最快的路径（如第二个图所示），该如何办呢？为此，可使用另一种算法——狄克斯特拉算法（Dijkstra’s algorithm）。</p></li><li><p>广度优先搜索来查找两点之间的最短路径，那时“最短路径”的意思是段数最少。在狄克斯特拉算法中，你给每段都分配了一个数字或权重，因此狄克斯特拉算法找出的是总权重最小的路径。</p></li><li><p>狄克斯特拉算法包含4个步骤。 (1) 找出最便宜的节点，即可在最短时间内前往的节点。 (2) 对于该节点的邻居，检查是否有前往它们的更短路径，如果有，就更新其开销。 (3) 重复这个过程，直到对图中的每个节点都这样做了。 (4) 计算最终路径。（下一节再介绍！）</p></li><li><p>狄克斯特拉算法用于每条边都有关联数字的图，这些数字称为权重（weight）。</p></li><li><p>带权重的图称为加权图（weighted graph），不带权重的图称为非加权图（unweighted graph）。</p></li><li><p>要计算非加权图中的最短路径，可使用广度优先搜索。要计算加权图中的最短路径，可使用狄克斯特拉算法。</p></li><li><p>在无向图中，每条边都是一个环。狄克斯特拉算法只适用于有向无环图（directed acyclic graph，DAG）。</p></li><li><p>如果有负权边，就不能使用狄克斯特拉算法。因为负权边会导致这种算法不管用。</p></li><li><p>不能将狄克斯特拉算法用于包含负权边的图。在包含负权边的图中，要找出最短路径，可使用另一种算法——贝尔曼-福德算法（Bellman-Ford algorithm）。</p></li><li><p>广度优先搜索用于在非加权图中查找最短路径。 狄克斯特拉算法用于在加权图中查找最短路径。 仅当权重为正时狄克斯特拉算法才管用。 如果图中包含负权边，请使用贝尔曼-福德算法。</p></li><li><p>贪婪算法很简单：每步都采取最优的做法。在这个示例中，你每次都选择结束最早的课。用专业术语说，就是你每步都选择局部最优解，最终得到的就是全局最优解。</p></li><li><p>贪婪算法寻找局部最优解，企图以这种方式获得全局最优解。 对于NP完全问题，还没有找到快速解决方案。 面临NP完全问题时，最佳的做法是使用近似算法。 贪婪算法易于实现、运行速度快，是不错的近似算法。</p></li><li><p>动态规划算法的工作原理。动态规划先解决子问题，再逐步解决大问题。 对于背包问题，你先解决小背包（子背包）问题，再逐步解决原来的问题。</p></li><li><p>使用动态规划时，要么考虑拿走整件商品，要么考虑不拿，而没法判断该不该拿走商品的一部分。 但使用贪婪算法可轻松地处理这种情况！首先，尽可能多地拿价值最高的商品；如果拿光了，再尽可能多地拿价值次高的商品，以此类推。</p></li><li><p>动态规划功能强大，它能够解决子问题并使用这些答案来解决大问题。但仅当每个子问题都是离散的，即不依赖于其他子问题时，动态规划才管用。</p></li><li><p>动态规划可帮助你在给定约束条件下找到最优解。在背包问题中，你必须在背包容量给定的情况下，偷到价值最高的商品。 在问题可分解为彼此独立且离散的子问题时，就可使用动态规划来解决。</p></li><li><p>每种动态规划解决方案都涉及网格。 单元格中的值通常就是你要优化的值。在前面的背包问题中，单元格的值为商品的价值。 每个单元格都是一个子问题，因此你应考虑如何将问题分成子问题，这有助于你找出网格的坐标轴。</p></li><li><p>需要在给定约束条件下优化某种指标时，动态规划很有用。 问题可分解为离散子问题时，可使用动态规划来解决。 每种动态规划解决方案都涉及网格。 单元格中的值通常就是你要优化的值。 每个单元格都是一个子问题，因此你需要考虑如何将问题分解为子问题。 没有放之四海皆准的计算动态规划解决方案的公式。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>我把它叫做感悟</title>
    <link href="/2021/01/07/2020-01-09-growUp/"/>
    <url>/2021/01/07/2020-01-09-growUp/</url>
    
    <content type="html"><![CDATA[<p>勇于承担责任。</p><p>持续不断的学习与成长，最可靠的东西是你自己的能力（尤其是你的核心竞争力）。</p><p>我浑身颤抖起来，我发现了一个奇迹，它使我口干舌燥，使我两眼突出，使我紧张无比，它的名字是：复利。</p><p>没有资本就没有利息，财富产生于你对金钱的留存。</p><p>财富使你能平心静气地、不带金钱顾虑地思考人生的意义。</p><p>孩子还做选择，成年人什么都要。</p><p>大多数人在20到30岁就已经过完自己的一生；一过了这个年龄段，他们就变成自己的影子，以后的生命只是在不断重复自己…</p><p>生活的意义并不是与他人争高下，而在于享受努力实现目标的过程，结果是对自己行动的嘉奖。</p><p>这个世界上的人有一个严重的问题，他们太在乎别人怎么看自己。很多人只是在乎别人是否认为自己知道，而不是在乎自己是否真的知道。同样的，很多人只是在乎别人是否认为自己幸福，而不是在乎自己是否真的幸福。 ​​​​</p><p>成长就是一个自我否定的过程，不是因为变得圆滑世故而否定过去，就是思想的提升而不再重复做过去的某些事情。</p><p>希望是一种智能镇定剂，一种绝妙的自我欺骗。</p><p>明智的行为会伴随我们一生，使我们感到快乐，救我们于危难；同样地，愚蠢的行为也会伴随我们，使我们备受折磨，烦恼不堪。</p><p>这世上有一些事你无能为力。但你可以决定，你打算如何判断以及如何对此做出反应。在这方面，你一直都是拥有权力的。<br>责任意味着：没有任何东西能改变你的态度或品格，因为你是按照自己的本性对事情做出反应。你可以决定自己以哪种方式去生活。这种态度使你能够生活幸福，并且成为最好的自己。</p><p>我们常常忘记，顺着我们目前为止走过的道路继续前行，同样有风险。这条路给我们一种熟悉感，但也不会更安全。</p><p>在需要做出决定的场合下，你应该经常使用“为什么 ”而不是“怎么做 ”来自我叩问。</p><p>他人提出的建议不仅仅向你指明一条道路，也为你划定了极限。建议者常常将对自身处境的辩解伪装成对你的建议。</p><p>清楚复利的力量，但不使用这份力量来使自己实现财务自由的行为，是一种不负责任的愚昧无知。这样看来，贫穷就不是美德了，而是一种愚昧。</p><p>借口是我们讲给自己听的谎言，接口是我们贫穷。</p><p>大多数人都将自己的时间浪费在长时间思考问题上。目标清晰的人没有时间这样做。他们想要更接近自己的目标，因此不断地寻找解决方法和解决途径。他们将精力集中于目标之上。一旦一个人将自己的视线聚焦于一个目标，那么恐惧就打不倒他。我们必须克服各种类型的恐惧，持续学习和成长。</p><p>有两条通向幸福的道路：降低要求或者增加财富……聪明的人，会同时给自己创造两条路。</p><p>许多成功人士都喜欢朝着对自己有利的方向来认定事实。但是请记住，你只是想要向他学习东西，并不想要向他证明你是对的。</p><p>成功意味着获得你所爱的东西，而幸福意味着享受你获得的东西。</p><p>知识能扫除积累财富的两个敌人：风险和恐惧。</p><p>“知识就是力量”这句格言实际上是错误的。正确的表述应该是：“知识运用起来才是力量。”所以想一想，哪一个目标是你想要马上实现的。</p><p>如果你为一家公司打工，要做的就是准时上班，尽力满足公司对你最低的期望，8小时工作下班后，回家与家人共度美好时光。这样的话，当公司解雇你的时候，你就没有什么可哭的了。你总能找到一份工作，但无法找回为实现别人的梦想而付出的你的时间。</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Git分支管理</title>
    <link href="/2021/01/07/2020-01-09-gitBranch/"/>
    <url>/2021/01/07/2020-01-09-gitBranch/</url>
    
    <content type="html"><![CDATA[<h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><p>easy:</p><pre><code>git checkout -b my-test  //在当前分支下创建my-test的本地分支分支git push origin my-test  //将my-test分支推送到远程git branch --set-upstream-to=origin/my-test //将本地分支my-test关联到远程分支my-test上   git branch -a //查看远程分支</code></pre><p>0.可以通过git branch -r 命令查看远端库的分支情况</p><p>1.从已有的分支创建新的分支(如从master分支),创建一个dev分支<br>git checkout -b dev</p><p>2.提交该分支到远程仓库<br>git push origin dev</p><p>新建本地分支后将本地分支推送到远程库, 使用git pull 或者 git push 的时候报错</p><pre><code>  gitThere is no tracking information for the current branch.  Please specify which branch you want to merge with.  See git-pull(1) for details   git pull \&lt;remote\&gt; \&lt;branch\&gt;  If you wish to set tracking information for this branch you can do so with:   git branch --set-upstream-to=origin/\&lt;branch\&gt; merged0.9.6</code></pre><p>是因为本地分支和远程分支没有建立联系 (使用git branch -vv 可以查看本地分支和远程分支的关联关系) .根据命令行提示只需要执行以下命令即可<br><br>git branch –set-upstream-to=origin/远程分支的名字 本地分支的名字 </p><p>git log –name-status 每次修改的文件列表, 显示状态</p><p>git branch –merged 查看哪些分支已被并入当前分支</p><hr><h2 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h2><pre><code>查看项目的分支们(包括本地和远程)命令行 : $ git branch -a删除本地分支命令行 : $ git branch -d &lt;BranchName&gt;删除远程分支命令行 : $ git push origin --delete &lt;BranchName&gt;查看删除后分支们命令行 : $ git branch -a</code></pre><p>git remote prune origin 清理远程分支，把本地不存在的远程分支删除</p><hr><h2 id="合并远程2个分支"><a href="#合并远程2个分支" class="headerlink" title="合并远程2个分支"></a>合并远程2个分支</h2><h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><ul><li> git branch -a</li></ul><h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><blockquote><p>比如同时有三个人开发，1.2最早是基于1.0，但是由于项目未发布，1.0,1.1,1.2全部都在同时开发，现在想把1.0已经增加的功能先合并到1.2；<br>dev beta<br>1.0 1.2</p></blockquote><ul><li><p>此时的步骤：check 1.2和1.0<br><em style="color:#c7254e"><em>git checkout v1.0</em></p></li><li><p>git checkout v1.2*</em></p></li><li><p>然后再v1.2的分支基础上执行merge<br><em style="color:#c7254e"><em>git merge v1.0</em></em></p></li></ul><p>如果没有报错，那就直接提交代码<em style="color:#c7254e">git push origin v1.2</em><br>如果报错，基本是冲突了(比如)：<br>CONFLICT (content): Merge conflict in app/src/main/AndroidManifest.xml<br>Auto-merging app/build.gradle<br>CONFLICT (content): Merge conflict in app/build.gradle<br>Automatic merge failed; fix conflicts and then commit the result.</p><p>你需要去到提示的文件里把git自动标注的版本冲突注释掉，看你具体需要的功能进行删减</p><p>然后把冲突的文件git add，和commit，比如你有2个冲突文件，多文件add的时候直接空格隔开</p><p>git add app/src/main/AndroidManifest.xml app/build.gradle</p><p>最后再commit</p><p>git commit -m “解决2个分支之间的冲突”</p><h4 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h4><p><em style="color:#c7254e">git push origin v1.2</em></p><h4 id="搞定"><a href="#搞定" class="headerlink" title="搞定"></a>搞定</h4><hr><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xquery">git stash save <span class="hljs-string">&quot;save message&quot;</span>  : 执行存储时，添加备注，方便查找，只有git stash 也要可以的，但查找时不方便识别。<br>git stash list  ：查看stash了哪些存储<br>git stash<span class="hljs-built_in"> apply</span> :应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即stash@&#123;<span class="hljs-number">0</span>&#125;，如果要使用其他个，git stash<span class="hljs-built_in"> apply</span> stash@&#123;<span class="hljs-variable">$num</span>&#125; ， <br>                 比如第二个：git stash<span class="hljs-built_in"> apply</span> stash@&#123;<span class="hljs-number">1</span>&#125; <br>git stash clear ：删除所有缓存的stash<br></code></pre></td></tr></table></figure><h2 id="Git回退版本"><a href="#Git回退版本" class="headerlink" title="Git回退版本"></a>Git回退版本</h2><pre><code>git reset --hard 版本idgit push -f提交会把回退版本之后的记录删除</code></pre><hr><h2 id="参考命令："><a href="#参考命令：" class="headerlink" title="参考命令："></a>参考命令：</h2><p>Git鼓励大量使用分支：<br>查看分支：git branch<br>创建分支：git branch &lt;name&gt;<br>切换分支：git checkout &lt;name&gt;<br>创建+切换分支：git checkout -b &lt;name&gt;<br>合并某分支到当前分支：git merge &lt;name&gt;<br>删除分支：git branch -d &lt;name&gt;</p><ul><li>git commit之后，想撤销commit<br>git reset –soft HEAD^  </li></ul>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>寻找你丢失的梦想</title>
    <link href="/2021/01/07/2020-01-09-findIdeal/"/>
    <url>/2021/01/07/2020-01-09-findIdeal/</url>
    
    <content type="html"><![CDATA[<ul><li>阅读下面的内容时，请找个僻静的角落，抛开一切杂念，敞开心扉，跟着我走过这段心灵之旅。</li><li>假设你正在前往殡仪馆的路上，要去参加一位至亲的丧礼。抵达之后，居然发现亲朋友好齐集一堂，是为了向你告别。</li><li>也许这是三五年，甚至许久之后的事，但姑且假定这时亲族代表、友人、同事或社团伙伴，即将上台追述你的生平。</li><li>现在请认真想一想，你希望人们对你以及你的生活有什么样的评价？你是个称职的丈夫、妻子、父母、子女或亲友吗？</li><li>你是个令人怀念的同事或伙伴吗？你希望他们怎样评价你的人格？你希望他们回忆起你的哪些成就和贡献？你希望对周围人的生活施加过什么样的影响？</li><li>在继续阅读之前，请大致记下你的回答和感受，这有助于你对习惯二(高效能人士的七个习惯)的理解。</li><li>一个恬淡寡欲的智者，一个对生活充满好奇的孩子，一个乐于助人的善人。</li></ul><ul><li>是，因为我乐于帮助他人。一个平和，淡然，温暖，善良的人。帮助过别人，没有给别人带来困扰的人。我轻轻的走了，正如我轻轻的来，没有打扰过别人。</li></ul><ul><li>请思考约瑟夫·爱迪生(Joseph Addison)的话：当我面对伟大人物的墓地，妒忌之心荡然无存；当我阅读历代佳丽的碑文，贪婪的欲望顿然消失；</li><li>当我在墓碑旁遇见泣不成声的父母，禁不住悲从中来；当我看到父母的坟墓，忍不住想到那些自己将追随的人的悲伤的空虚；</li><li>当我看到王者与其废黜者的墓碑并肩而立，生前为不同观点唇枪舌剑的文人墨客的遗体相邻而居，不禁感到那些内讧、派系斗争、人间是非的渺小。</li><li>再查看墓碑上的日期，发现有些就在昨日，有些却可追溯到600年前，于是又忍不住想到最后审判日那天，我们都将同时接受上帝的审判。</li><li>以终为始说明在做任何事之前，都要先认清方向 你希望在盖棺定论时获得的评价，才是你心目中真正渴望的成功</li></ul>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/01/07/2020-01-01-plan/"/>
    <url>/2021/01/07/2020-01-01-plan/</url>
    
    <content type="html"><![CDATA[<p>layout: post<br>title: 2020年初计划<br>description: 2020年初计划，做好规划未雨绸缪。面对全面小康社会，争取不拖后腿。<br>category: blog</p><h2 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h2><p>阅读52本书（理论上的一周一本）。必深读书目：<br>财务自由之路系列<br>鲁迅全集<br>怪诞行为学系列<br>沉思录<br>史记<br>阅读完每本书必须写读书笔记，非深读书目写一下感想。</p><h2 id="理财"><a href="#理财" class="headerlink" title="理财"></a>理财</h2><p>缩短第一阶段财务保障所需时间。达成财务保障期间，30%投资稳定基金；40%-50%投资股票，投资2-3股；10%-20%作为日常花费；其中不小于10%作为固定储蓄。</p><h2 id="专业学习"><a href="#专业学习" class="headerlink" title="专业学习"></a>专业学习</h2><p>70%时间继续探索Java；20%时间探索python和ts；10%时间探索sql。<br>70%java时间：其中70%探索原理知识；20%探索高并发和分布式；10%追寻业界流行技术<br>总结每天学习收获<br>大数据和数据分析</p><h2 id="旅游"><a href="#旅游" class="headerlink" title="旅游"></a>旅游</h2><p>三清山<br>嵩山</p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>上班1小时，下班前2小时。一天工作时间控制不超过4小时。如果焦头烂额超过4小时，先找自身原因，承担责任，调整工作方法；若非现在能力所控，就换工作。<br>总结每天工作内容</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>《人生十二法则》读书笔记</title>
    <link href="/2021/01/07/2020-02-06-twelveRule/"/>
    <url>/2021/01/07/2020-02-06-twelveRule/</url>
    
    <content type="html"><![CDATA[<h2 id="十二法则"><a href="#十二法则" class="headerlink" title="十二法则"></a>十二法则</h2><ul><li><p>法则一　获胜的龙虾从不低头：笔直站立，昂首挺胸</p></li><li><p>法则二　像照顾生病的宠物一样关心自己：待己如助人</p></li><li><p>法则三　放弃损友：与真心希望你好的人做朋友</p></li><li><p>法则四　战胜内心的批评家：和昨天的自己比，别和今天的别人比</p></li><li><p>法则五　管教你家的小怪物：别让孩子做出令你讨厌他的事</p></li><li><p>法则六　当痛苦到想诅咒一切：批判世界之前先清理你的房间</p></li><li><p>法则七　苏格拉底的选择：追求意义，拒绝苟且</p></li><li><p>法则八　不买醉鬼卖的东西：说真话，或者至少别撒谎</p></li><li><p>法则九　别偷走来访者的问题：假设你聆听的人知道你不知道的事</p></li><li><p>法则十　不要无视地毯下的龙：直面问题，言辞精确</p></li><li><p>法则十一　不要打扰玩滑板的孩子们：承认现实，反对偏见</p></li><li><p>法则十二　当你在街上遇到一只猫时，摸摸它：关注存在的善</p></li></ul><h2 id="片段"><a href="#片段" class="headerlink" title="片段"></a>片段</h2><ul><li><p>精神上的笔挺站立、昂首挺胸意味着睁大双眼看清生活的重任。</p></li><li><p>谨慎对待你的体态，别再低头徘徊。说你所想，追你所求，这是你和他人同样拥有的权利。挺胸迈步，直视前方，敢于冒险，这样你的神经通路才能充满急需的血清素。</p></li><li><p>笔挺站立，昂首挺胸。</p></li><li><p>待己如助人， 这意味着你需要选择 对自己真正有好处的事物， 即使这些事物不一定是你想要的 或是令你快乐的。</p></li><li><p>光有秩序是不够的，当你一直稳定、安全和一成不变的时候，就无法学习到重要的新事物。但是当需要学习的东西太多，超过了你的吸收能力时，你又会被混乱所淹没。</p></li><li><p>你需要一边依赖已知和已掌握的事物，一边探索和学习新的东西。这样你既可以平衡对未知的恐惧，同时又能保持兴奋和投入的状态。如此一来，你便可以掌握新的，提升旧的，并且发现意义所在。</p></li><li><p>待己如助人，这意味着你需要选择对自己真正有好处的事物，即使这些事物不一定是你想要的或是令你快乐的。</p></li><li><p>认真对待自己， 重新定义自己， 修炼个性，选择目标，明确存在。</p></li><li><p>和善良上进的人为友 并不比和糟糕颓废的人为伍容易， 因为前者代表了一种理想， 和他们同行需要力量与勇气。</p></li><li><p>。20世纪60年代的“嬉皮士运动”先锋们建议年轻人“审视内心，关注社会，退出世俗”</p></li><li><p>当生活向前推进的时候，你会陷入暂时的混乱，这虽然会给你带来压力，但同时也会让你产生新的希望。</p></li><li><p>并不是每一个失败者都是受害者，也不是每一个跌入谷底的人都想要努力往上爬。</p></li><li><p>在帮助一个人之前，你需要先弄明白他为什么身处困境。你不应该先假设他是不公正和剥削的无辜受害者，因为这往往是最不符合实际的解释。根据我的研究和生活经验，事情永远都不会这么简单。 如果你相信坏事是自己发生的，而受害者对此毫无责任的话，那你相当于也剥夺了这个人过去、当下和未来所有的主观能动性。 在绝大多数情况下，人会因为上进之路很难走而选择放弃，这甚至应该成为你在帮助他人之前的默认假设。你可能觉得这样想太苛刻了，但是你有没有想过，失败是很容易理解的，它的存在不需要任何解释。同理，恐惧、仇恨、成瘾、滥交、背叛和欺骗也不需要解释。染上恶习和失败都不难做到，你只要带着无作为和不在乎的态度，逃避责任和思考就行了。你完全可以不停地明日复明日，让自己长久沉溺在当下的廉价快乐里，</p></li><li><p>上进的勇气既能让你发现当下的不足，又能为你揭示未来的希望。</p></li><li><p>和善良上进的人为友并不比和糟糕颓废的人为伍容易，因为前者代表了一种理想，和他们同行需要力量与勇气。你应该保持谦和、勇敢和独立思考，避免轻易产生不必要的同情和怜悯。</p></li><li><p>你需要认清自己是谁、 想要什么、愿意做什么， 然后你会发现， 解决自己特有问题的方案是需要量身定制的。</p></li><li><p>标准的存在非常重要，因为忽视标准、允许平庸的后果就是实实在在的失败。</p></li><li><p>说服自己对什么都不在乎并不是在对存在进行深刻评判，而是在用理性思维玩一些低劣伎俩。</p></li><li><p>在所有事情上都成为赢家或许意味着你并没有展开任何新的挑战。你也许是在赢，却没有成长，而成长是赢最重要的前提。</p></li><li><p>如果你粗暴地压制天性，它也一定会不断反抗。你能强迫自己努力工作到什么程度？这努力的动力能保持多久？你对伴侣牺牲和付出到什么程度会让你的心甘情愿转变成怨恨？你真正渴望的是什么？在明确自己的价值标准之前，你应该先把自己当作陌生人去了解。什么对你有价值或者能令你快乐？你需要多少享乐和奖励才能弥补自己因忍辱负重所受的委屈？你应该如何对待自己，才不至于想要挣脱羁绊，放弃一切？你可以强迫自己过完痛苦的一天并在回家之后烦躁地踹自己的狗，眼睁睁看着日子一天天过去，但你也可以学会引导自己去做可持续的、有价值的事情。你会问自己想要什么吗？你可以和自己公平地谈判吗？抑或你就是个暴君，你的自我则是暴君手下的奴隶？ 什么情况下你会讨厌自己的父母、伴侣或者孩子？这样的情况又应该如何改善？你对朋友和生意伙伴有怎样的期待？这并不只是你“应该”想要什么的问题，这里讨论的不只是他人的期待或者你的义务，而是你应该担负起的对自己的道德责任。“应该”可以是这个问题的一部分，因为你生活在一系列社会责任当中，但这不意味着你需要扮演哈巴狗一样顺从无害的角色。只有独裁者才希望自己的奴隶是这个样子。 相反，你应该敢于冒险和求真，敢于清晰地表达或至少认识到自己生活的真正意义。举个例子，你应该试着展现自己对伴侣的那些不敢言说的想法，甚至你只要愿意直视这些想法，你就会发现它们并没有你想的那么阴暗。你可能会发现自己只是因为害怕而故作高尚，也许满足心愿反而能避免让你误入歧途。你怎么知道伴侣会不喜欢更真实的你呢？蛇蝎美人和反派人物之所以性感是有原因的。 你希望被他人如何对待？你期待他人能给你什么？你因为责任义务在忍受或者在装作喜欢着什么？你的怨恨虽然病态，却具有揭示性。傲慢、欺骗和怨恨是邪恶三合体，也是最具伤害性的存在。怨恨的产生永远意味着有两种可能：要么是因为一个人不成熟，那么他应该停止抱怨，继续努力；要么是因为一个人受到了压迫，那么他有道德义务大胆发声。 为什么呢？因为继续沉默的后果更糟糕。在当下，为了避免冲突而保持沉默当然更容易一些，但长远来看这是致命的。当有话要讲的时候，沉默就是在撒谎，而暴政往往就建立在谎言之上。 你应该在什么时候冒险反抗压迫？我的答案是：当生活不断被侵蚀，你开始酝酿复仇，内心充满吞噬和毁灭的意愿时。</p></li><li><p>和他人比较这件事情要小心对待。当你成年后，你就是一个独特的存在了。你在财务、亲密关系、心理等层面的特定问题，都镶嵌在你存在的独特情境中。你的事业是否适合你，这是一个非常个人化的问题，因为答案也和你生活中的其他细节息息相关。你需要据此决定如何分配自己的时间，以及决定要放弃什么，追求什么。</p></li><li><p>人们的视线总是指向那些他们有兴趣靠近、试探、寻找或者拥有的东西。</p></li><li><p>你要把目标定得小一点。你的才能有限，你已经习惯了自欺欺人、心怀怨恨、逃避责任，所以一开始不要给自己太大负担。你应该这样设定目标：到今天晚上为止，我希望自己的生活比早上有一丁点进步。然后问问自己：“我能够并且愿意做哪些事情来实现这一点？我希望得到怎样的奖励？”执行你的选择，不论做得好不好，然后用咖啡庆祝自己的胜利。你可能会觉得这么做有点傻，但是没关系，明天你还这样做，后天，大后天，一直持续做下去。随着时间的推移，你的比较基线会神奇地提升，就像复利一样。坚持三年，你的生活将会完全不一样。然后你就可以设定更大的目标，更远大的理想。你的双眼也会跟着清晰起来，并逐渐能够看清世界。</p></li><li><p>你追求什么，决定了你看见什么。</p></li><li><p>人们应对过度复杂的世界的方式： 精确地专注于自己在乎的事情，而忽视其他一切。你选择性地看见那些助你前行和达成目标的东西，识别路上的障碍，除此以外的一切你都视而不见，但是除此以外还包括很多东西，所以你是非常盲目的。 这是必然结果，因为这个世界包含的比你关注的多太多了，你必须认真分配有限的资源。 看见是很难的，所以你必须选择看见什么，忽略什么。</p></li><li><p>既然你忽视了很多事物，那么一定还有很多未被你发现的可能性。</p></li><li><p>生活的不顺或许不是因为生活本身，而是源自你的无知。</p></li><li><p>你的行动恰恰最准确地反映出了你最深层的信仰。这些信仰镶嵌于你的存在当中，隐藏在你有意识的担忧、可表述的态度和表层的自我认知之下。要想知道自己真正相信什么，不能光局限于你认为自己相信什么，还要观察自己的所作所为，否则你就无法真正了解自己。你太复杂、太难以看清真实的自己了。</p></li><li><p>你选择相信存在的意义和目标是嘉言善行，这样的存在主义信仰可以帮助你战胜虚无主义，战胜怨恨和傲慢，遏制所有你对人生的仇恨和恶意。这种信仰并不是对明知虚假之事的盲从，也不是对魔法的幼稚信任。</p></li><li><p>集中注意力，关注你的物理和心理环境，注意到那些一直令你困扰，但你又有能力和意愿改变的东西。</p></li><li><p>你可以将一整天的任务变成沉思的素材，在早晨或者前一天晚上睡前进行沉思。向自己索取一份主动的付出，只要你礼貌地索取，然后坦诚地仔细聆听，就会得到反馈。这样坚持一段时间，或者坚持一辈子，用不了多久你就会发现自己的境况与之前会有很大的不同。你会习惯性地问自己：“要让生活变得更好，哪些事情是我能做也愿意做的？”不要强行界定什么是“更好”，你不应该用乌托邦主义者式的方式对待自己，因为我们从历史中已经看到这不是好的选择。着眼更高层的目标，关注人生的改良，让你的心灵与真理和至善相连。宜居的秩序需要被建立，存在之美需要被创造。战胜邪恶，缓解痛苦，提升自我，都是你需要去完成的任务。</p></li><li><p>你可以用这种方法教任何人做任何事情。先想清楚你想要什么，然后仔细观察身边的人，一旦看到任何接近你目标的行为，便立刻给予奖励。</p></li><li><p>归根结底，拒绝意味着“如果你继续这么做，就需要承担令你不适的后果”，否则拒绝就是毫无意义的，</p></li><li><p>停止用谎言填充头脑， 头脑就会变得更清晰； 停止用不坦诚的行为扭曲生活， 生活就会得到改善。 随后你就能发现和纠正那些更微妙的错误。</p></li><li><p>真相是，生活很艰难，每个人都注定要遭受痛苦和伤害。有时候痛苦显然源自个人过失，比如选择性失明、决策不当或心怀怨恨。</p></li><li><p>在一切崩溃时，主动为自己的失败负责，直面现实，这是极端负责任的表现。而另一种选择是，批判现实的缺陷和存在的本质，然后陷入仇恨和复仇的欲望当中。如果你感到痛苦，这其实是正常的。人是不完美的，生活是悲惨的，但如果痛苦变得无法忍受，你也开始堕落，那么你应该想想以下的事情。 清理你的生活 观察你周围的环境，从小事开始。你是否充分利用了所有的机会？你是在努力发展事业，认真工作，还是在让怨恨拖你的后腿？你和自己的兄弟重归于好了吗？你尊重你的伴侣和孩子吗？你有破坏健康和幸福的坏习惯吗？你主动承担责任了吗？你对亲友坦诚吗？你做了那些你能够做到，也能够让你的生活变得更好的事情吗？你清理过你的生活吗？ 如果答案是否定的，或许你可以试试看先停止做那些你明知是错误的事情，今天就停下来。如果你确定那是错误的，就不要浪费时间怀疑你是如何判断对错的。不合时宜的质疑不会带来启示，只会制造困惑，阻碍你的行动。你是可以在不清楚原因的情况下判断事情的对错的，因为你的整个存在会告诉你一些无法解释或无法表达清楚的事情。每个人都很复杂，以至于每个人都很难完全看清自己，但我们都拥有自己无法理解的智慧。所以，只要你有一丁点停止的想法，那就立刻停止。 停止卑鄙的行事方式，停止令你感到懦弱和羞耻的言语。只说让你感到强大的话，只做令你为之骄傲的事。 你可以运用自己的判断标准，依赖自我的指导。不需要拘泥于某些武断的外界行为准则，不过你也不应该忽视自己所遵循的文化准则。人生是短暂的，你没有时间想清楚所有的事情。过往的智慧来之不易，祖先们可能给你留下了很有用的东西。 不要一味责怪，不要在整理好自己的人生之前就试图去干预别人。保持谦虚，如果你没法齐家，又怎敢治国？让你的内心指引你，看看接下来的日子会发生什么。你会开始对同事坦白想法，告诉家人自己的真正需求，当你有未完成的事情时，你也会立刻弥补遗漏。 停止用谎言填充头脑，头脑就会变得更清晰；停止用不坦诚的行为扭曲生活，生活就会得到改善。随后你就能发现和纠正那些更微妙的错误。 经过数月或者数年的努力尝试，你的生活会变得更简单，判断力也会变得更好，在从过去的混乱走出来之后，你会变强大，也会更少有怨言。你会自信地面对未来，不再为生活增加无谓的困难。然后你就只需要面对生活那赤裸裸的悲剧，但它们将不会再与怨恨和欺骗混淆在一起。</p></li><li><p>批判世界之前先清理你的房间。</p></li><li><p>报复心无论多么有理， 都会阻碍内心的成长。</p></li><li><p>在发现了当下努力和未来回报之间的因果关系后，我们才有了制定社会契约的动力，而这种契约让我们能够放心地储存当下的工作结果。</p></li><li><p>第一个问题是：什么应该被牺牲？小的牺牲可以解决小问题，但更大也更全面的牺牲或许可以一并解决一系列复杂的问题。这很难，但或许这是更好的选择。</p></li><li><p>第二个问题则包括了一系列小问题。我们确立了牺牲改善未来的基本原则，但是任何原则及其意义都需要被具体和全面地理解</p></li><li><p>并非所有牺牲都能换来同样的回报，有时候更大的牺牲之后并不一定会有更好的未来，而且很难解释为什么。</p></li><li><p>延迟满足的前提是人类文明稳定到能够确保延迟行为在未来会得到奖励。</p></li><li><p>分享并不意味着放弃自己在乎的事物却得不到任何回报，只有拒绝分享的小孩子才会有这样的担心。分享的本质是交换，一个无法分享和交换的孩子不会有朋友，因为友谊就是一种交换形式。本杰明·富兰克林曾经建议人们在搬到新家之后去找邻居帮自己做一件事情，他说过这样一句话：“相比那些被你帮助过的人，那些曾经帮助过你的人会更愿意再帮你一次。”2富兰克林认为，这个向他人索取适当帮助的行为是建立社会关系最快速有效的方法。</p></li><li><p>我们先要看清一个不言自明的真相：人生有时候就是很不顺。这看上去像是与这个充满瘟疫、饥荒、暴行和背叛的世界有很大关系，但有的时候不顺其实是由我们主观上最在乎的事物引起的。为什么？人们通过自己的价值体系感知这个世界，如果你看见的世界不是你想要的样子，那么你就该审视自己的价值观了。 你需要放下当前的预设和执念，甚至需要牺牲你最在乎的东西，才能够实现自己的潜力，而不是始终停滞不前。</p></li><li><p>如果你停止说谎，遵从自己的良心，那么即使面对死亡也能保持高贵。如果你真诚勇敢地追寻最崇高的理想，获得的安全感和力量将远胜于任何目光短浅的自我保护。如果你以正确、充实的方式生活，就能发现你已强大到足以克服死亡的恐惧。</p></li><li><p>为英雄雪中送炭的桥段是故事创作者们最廉价的写作手法，它嘲弄了独立、勇气、命运、自由意志和责任感。</p></li><li><p>邪恶会放大生活的灾难，大大增加我们用权宜之计来应对人生悲剧的动机。</p></li><li><p>人们会像反抗极权主义一样反抗自己。一个人无法要求自己或者他人唯命是从。“我要停止拖延”“我要坚持健康饮食”“我要停止酗酒”，人们虽然这么说，却不一定这么做。一个人也没法把自己变成思想中构建出来的样子，尤其是当他的思想受到意识的影响时。</p></li><li><p>每个人都有天性，而我们必须发现这种天性，只有与之抗衡，我们才能与自己和解。</p></li><li><p>超越当下，着眼未来</p></li><li><p>想法和事实不同，事实本身就是没有生命的东西，没有意识、权力、意志或者行为。死亡的事实不计其数，互联网就是死亡事实的坟场。但是占据自我的想法则是活的，它想要表达自己，想要存在于世，因此诸如弗洛伊德和荣格这样的深度心理学家们才坚信人类的心灵是思想的战场。一个想法是有目标的，它需要一些东西，也代表了一个价值体系，相信它追求的比当下拥有的要好。 想法将世界简化为那些有助于或者有碍于目标实现的部分，并同时忽视其他一切不相关的事物，由此区分形象和背景。想法是一个人格，而不是一个事实。</p></li><li><p>金钱会让试图戒断的瘾君子重新一发不可收拾，无聊会令没有目标的人几近窒息。</p></li><li><p>有什么是我无法怀疑的？就是苦难的真实性。虚无主义者无法怀疑它，强权主义者无法禁止它，愤世嫉俗者也无法逃避它。痛苦是真实的，而为了让他人痛苦刻意进行的折磨则是错误的，这成了我信仰的基石。在探索了人类思想和行为的下限，理解了自己也有作恶的可能之后，我明白了“承担世间罪孽”的意义。每个人都有极大的作恶潜力，人们天生就知道什么是不好的，但不一定知道什么是好的。</p></li><li><p>如果不好的事情存在，那么好的事情也一定存在。如果最糟糕的罪恶是为了制造痛苦而折磨他人，那么善就是与之截然相反的、阻止这种罪恶的东西。</p></li><li><p>有意义地生活 我由此得出了自己基本的道德结论。为善，集中注意力，修复你能修复的，不要因为自己的知识而傲慢。尽力保持谦和，因为强权主义的骄傲会在不包容、压迫、折磨和死亡中体现。意识到自己的不足，如怯弱、恶意、怨念和仇恨，在指责他人和试图修复世界之前先看清自己凶残的内心。也许错不在世界，而在你自己。你失败了，错过了目标，这是你犯的罪，而这一切都是你在为世间的邪恶添砖加瓦。最重要的是，永远不要撒谎。 你应该将缓解不必要的痛苦视为一种关于善的人生准则：我会尽我所能地减少不必要的痛苦。这样你就能在自己的道德金字塔顶端放置一系列意在改善存在的预设和行动。为什么这么做？因为我们了解不这么做的严重后果。 将缓解不必要的痛苦当作自己的最高价值追求，等同于是在完善社会形态和优化个人心态。</p></li><li><p>权宜之计是只考虑短期利益的盲目冲动，往往通过欺骗来实现，这样的行为不考虑后果，是狭隘、自私、幼稚而不负责任的。意义是比权宜更成熟的替代品，会在冲动被调节、整理和整合之后出现。当这个世界的无限可能性和内在运作价值结构相互作用时，意义就会显现。如果价值结构的目标是为了建立更好的存在，那么显现的意义将会是维系生命的。这样的意义能够缓解混乱和痛苦，让一切变得有价值，也变得更好。</p></li><li><p>权宜之计是把骷髅藏在衣柜里，用地毯覆盖你刚刚撒下的鲜血，是逃避责任的表现。这是懦弱、肤浅和错误的选择，不断重复则会让人变成恶魔。追求权宜之计是在将你遭受的诅咒转移给他人或者未来的自己，而这会让你和世界的未来都更加糟糕。这样做的人毫无信仰、勇气和牺牲精神，意识不到行动和预设的重要性，也看不清组成世界的价值体系。拥有有意义的生活胜于得到想要的东西，因为你可能不知道自己想要什么，或者真的需要什么。意义是自然显现的，你可以为它创造前提条件，然后在它出现的时候跟随它，但你无法刻意地制造意义。 意义的出现表明了你在正确的时间和地点，恰当地平衡了秩序与混乱，让一切都实现了最好的可能性。</p></li><li><p>如果你的生活不尽如人意， 试着说真话； 如果你拼命地坚持某种意识 或者沉迷于虚无主义， 试着说真话； 如果你感到脆弱、无用、绝望和困惑， 试着说真话。</p></li><li><p>逃避或者说出真相，不仅仅是两个不同的选择，更是两条人生道路，两种完全不同的存在方式。</p></li><li><p>拒绝欺骗 你</p></li><li><p>你可以通过语言来操纵世界、满足自己的需要，即所谓的圆滑处事。圆滑是肆无忌惮的销售推广人员、广告商、花花公子、满嘴口号的乌托邦信仰者和反社会人格者的专长。圆滑的大学生写论文时不会清晰地阐述自己的观点，而是会去取悦教授。圆滑的人会为了得到自己想要的东西而虚伪地奉承和取悦他人，圆滑有时候等同于耍诡计、喊口号和鼓吹宣传。 当人们被不良的欲望主宰时就会以这样的方式生活，所有的言行都是为了满足不良欲望。这些不良欲望通常包括：将自我意识强加于人、强行证明自己是对的、抬高自己的地位、逃避责任、抢夺别人的功劳、被破格提拔晋升、确保被所有人喜欢、获得殉难者的光环、合理化地愤世嫉俗、为自己的反社会倾向辩解、维持天真、利用自己的脆弱性、维持圣人形象，或者将所有问题归咎于缺爱的子女。这些都是奥地利心理学家阿尔弗雷德·阿德勒（Alfred Adler）所谓的“人生谎言”（life-lie）</p></li><li><p>我见过那些定义了自己的乌托邦，然后强扭生活，试图使之成为现实的人。一个学生接受了“时髦”的反权威姿态，然后在接下来的20年里满怀怨恨地试图推翻他想象中的风车。一个18岁的女孩武断地决定在52岁时退休，于是她花了30年时间来实现这个决定，却没有注意到做这个决定的时候自己几乎“乳臭未干”。青少年时代的她，怎么可能了解52岁的自己？即使在多年后的今天，她对自己退休生活的打算也非常模糊不清，而她对此也视而不见。如果一开始那个目标就是错误的，那么这一生又有什么意义呢？她害怕打开充满麻烦的潘多拉之盒，虽然盒子里也包含着希望。相反，她扭曲了自己的生活，将它强行塞进一个天真的幻想当中。</p></li><li><p>出于天真制定的目标会随着时间的推移变质为险恶的人生谎言。一个四十多岁的来访者和我分享了他年轻时的想法：“我会在退休后坐在热带沙滩上，一边喝玛格丽特鸡尾酒一边晒太阳。”那不是一个计划，而是海报上的场景。在喝了8杯鸡尾酒后，等待你的就只有宿醉了；在过了三个星期全是玛格丽特鸡尾酒的生活后，你会无聊到厌恶自己；一年后，你会变得可悲。这并不是可持续的晚年生活方式。这种过度简化和自欺欺人的行为在意识形态主义者中尤为典型，他们相信一些单一的公理：政府是坏的，移民是坏的，国家是坏的，父权制度是坏的。然后他们过滤筛选自己的人生体验，并且狭隘地坚信一切都可以被这些公理所解释。在这些荒谬理论的背后，他们自恋地认为如果自己掌有控制权，整个世界都会变得完美。 人生谎言还有一个根本问题，尤其是当谎言的动机是基于逃避的时候。 已知是错的但还去做是明知故犯，允许本可以阻止的错误发生则是玩忽职守。 人们通常认为前者比后者更糟糕，我却不这么认为。</p></li><li><p>如果你不能向他人展现自己，也就不能向自己展现自己。</p></li><li><p>当你能够对老板、伴侣或者母亲说“不”的时候，你就已经把自己变成了一个在必要的时候可以说“不”的人。如果你在应该说“不”的时候说了“是”，则会将自己变成一个在显然应该说“不”的时候也只能说“是”的人</p></li><li><p>如果你背叛了自己，说了谎话或者做了亏心事，那么你的人格就会被弱化。而人格脆弱的人会在逆境不可避免地降临时被摧毁，到时你会发现自己已无处可躲，最后只能开始做可怕的事情。</p></li><li><p>谎言会扭曲存在的结构。不真实会同时腐化灵魂和社会，而且一种形式的腐败往往还会滋养另一种形式的腐败。</p></li><li><p>一开始你只是撒了个小谎，然后你便需要用更多小谎去掩盖。接下来你为了避免撒谎的羞耻感而扭曲思维，并用更多的谎言来掩盖扭曲的后果。这些必要的谎言会在不断重复之下转变成自动化、特殊化、结构化的无意识信念和行为。当虚伪的行为无法带来期望的结果时，你的人生便开始恶化。就算你不信有南墙这样一个存在，你也会被撞得头破血流。 成功的谎言必然会带来无知和优越感。当然，这里所谓的成功是假设的，而这正是谎言的危险之处。你会以为除了自己之外的每个人都是愚蠢的，而且每个人都被你欺骗了，所以你会产生一种错觉，即自己可以为所欲为。最终你会相信一切存在都在自己的掌控之中，所以存在不值得尊重。</p></li><li><p>成功的谎言必然会带来无知和优越感。当然，这里所谓的成功是假设的，而这正是谎言的危险之处。你会以为除了自己之外的每个人都是愚蠢的，而且每个人都被你欺骗了，所以你会产生一种错觉，即自己可以为所欲为。最终你会相信一切存在都在自己的掌控之中，所以存在不值得尊重。</p></li><li><p>看见真相，讲出事实。 他人的观点无法被伪装成真相，因为真相不是一串口号。相反，真相是个人的。只有你能够识别基于自己独特人生情境的真相。理解你的真相，谨慎而又清晰地将它传达给自己和他人，这会让你当下的生活安全而富足。当你的未来能够在过去的确定性之上展开时，它也必将是充满善意的。 真相从存在的最深处不断涌现，让你的心灵在面对生活不可避免的悲剧时免于枯萎和死亡。它能让你优雅地承担起存在的重担，而不是试图报复，这样存在就可以继续。 如果你的生活不尽如人意，试着说真话；如果你拼命地坚持某种意识或者沉迷于虚无主义，试着说真话；如果你感到脆弱、无用、绝望和困惑，试着说真话。 说真话，或者至少别撒谎。 缺乏聆听的对话 总是在支持某种现有的秩序， 相比之下，共同探索 则鼓励人们与未知为友。</p></li><li><p>看见真相，讲出事实。 他人的观点无法被伪装成真相，因为真相不是一串口号。相反，真相是个人的。只有你能够识别基于自己独特人生情境的真相。理解你的真相，谨慎而又清晰地将它传达给自己和他人，这会让你当下的生活安全而富足。当你的未来能够在过去的确定性之上展开时，它也必将是充满善意的。 真相从存在的最深处不断涌现，让你的心灵在面对生活不可避免的悲剧时免于枯萎和死亡。它能让你优雅地承担起存在的重担，而不是试图报复，这样存在就可以继续。 如果你的生活不尽如人意，试着说真话；如果你拼命地坚持某种意识或者沉迷于虚无主义，试着说真话；如果你感到脆弱、无用、绝望和困惑，试着说真话。 说真话，或者至少别撒谎。</p></li><li><p>真诚对话包括探索、澄清和策略制定。在真诚的对话里，大多数时候你是在聆听。聆听就是关注的表现。</p></li><li><p>记忆是一种工具，让我们可以用过去来指导未来。如果你遇到过不好的事情，并且搞清楚了原因，那么未来你就可能避免不好的事情再次发生。 记忆的目的，不是要记住过去，而是要避免重蹈覆辙。</p></li><li><p>人们需要表达，因为这与思考密不可分。如果人们不思考，就会盲目地误入歧途。在思考时，人们会对世界进行模拟并且规划自己的行动，然后人们才能搞清楚哪些蠢事是不应该做的，进而避免恶果。这就是思考的意义。模拟世界和规划行动是只有人类才有的智慧之举。我们会创造代表自己的小人，然后将他们放在虚拟世界里，观察他们的行动。如果他们获得成功，我们便可在真实世界里模仿他们的行为；如果他们失败了，我们则可吸取教训。虚拟世界里小人的死去，代表真实世界中的我们可以继续活下去。</p></li><li><p>人们认为自己会思考，但事实并非如此。大多数时候我们只是在进行自我批判，真正的思考如同真正的聆听一样少见。思考就是聆听自己，而这并不容易。要思考，你至少要同时分饰两个角色，而且还要允许他们有分歧。思考是两个或两个以上世界观之间的对话</p></li><li><p>用结论来证明证据的合理性，是对真相的逃避。</p></li><li><p>我们大多数人无法坚持聆听，总是忍不住要去评价，因为聆听太危险了。聆听的首要要求是勇气，而我们并不总具备勇气。”4罗杰斯知道，聆听可以改变一个人，所以他评论道：“你们有的人以为自己善于聆听，却从未改变过别人。这很有可能是因为你们的聆听并不是我所描述的那种聆听。”罗杰斯提议读者做一个小实验，在下次遇到争执时，先停止对话，并且立这样一个规矩：每个人必须先准确反映对方刚刚表达的想法和感受，直到对方满意，然后才能表达自己的观点。这个技巧在生活和工作中都非常有用，我经常总结他人对我说的话，确认我是否准确理解了他们。有时我理解得很准确，有时却会有些小偏差，甚至还有些时候我完全误解了对方。不过，这些全都是很有价值的反馈。 像这样总结有几个好处。第一个好处是我能够真的理解别人在说些什么。</p></li><li><p>总结听上去很简单，但是尝试之后你就会发现这是最难做到的事情之一。如果你真的渴望理解一个人，愿意走进他的内心世界去看看他眼中的生活，那么你自己就很有可能被改变。你会从他的角度去看世界，你的态度和性格都会受到影响。而对我们来说，被改变是最可怕的事情之一。</p></li><li><p>第二个好处是能帮助你整合记忆信息。</p></li><li><p>第二个好处是能帮助你整合记忆信息。</p></li><li><p>成功的记忆会告诉你发生了什么、原因是什么、未来要避免同样的结果你需要做什么。记忆的目的不是要准确记录过去，而是要帮助你更好地面对未来。</p></li><li><p>第三个好处是避免陷入谬误。在遭到反对的时候，人们会忍不住过度简化或者扭曲对方的观点。这么做你不仅会伤害对方，而且还会损害你自己的立场。相反，如果你需要先总结对方的观点并且让对方认同你的总结，那么你可能需要用更加清晰和简洁的方式来表达。当你站在对方的角度去思考时，你要么会发现其中有价值的部分从而有所收获，要么会找到更好的反驳方式。这样你就不再需要曲解对方的观点，而且也可减少误解和自我怀疑。</p></li><li><p>尊重对话者的个人经验，假设他们的结论是在努力尝试之后谨慎而又坦诚地得出的结果。你必须相信对话者与你分享的结论可以在一定程度上帮助你避免犯同样的错误。你也必须沉思，而不是试图取胜。如果你拒绝这样做，那么无疑是在重复自己已有的知识，为自以为是寻求认同。但如果你在对话中沉思，那么就会通过聆听发现他人内心深处于你而言崭新的思想。</p></li><li><p>树叶可以从树枝上被摘下，并被当作一个独立的实体看待，但是这种感知是非常具有误导性的。几个星期之后，树叶就会分解消失，因为离开大树的它无法持续存在。这就是笔记本电脑和世界的关系。笔记本电脑只能在很短的几年时间里作为电脑存在，因为它们的存在在很大程度上是由躯壳以外的东西决定的。 我们看见和拥有的所有东西几乎都是这样的，尽管这通常不是那么明显。</p></li><li><p>永远不要低估忽视问题所带来的破坏性后果。</p></li><li><p>一切只有被表达和澄清之后，才能变得清晰可见。</p></li><li><p>你最不愿意看到的事情会在你准备最不充分的时候不可避免地发生；你最怕遭遇的东西也会在你最弱、它最强的时候现身，而你终将被打败。</p></li><li><p>为什么我们要拒绝通过分析问题来得到解决方案？因为分析意味着承认问题的存在，弄清自己想要什么之后，我们会因为欲求不满而感到痛苦。但是，你可以从这痛苦当中有所收获，更好地面对未来。如果不这么做，那么替代一时痛苦的将会是由绝望和困惑造成的持续隐痛，以及坐看时光流逝的无力感。 拒绝分析的另一个原因在于，不去定义成功，也就不用定义失败。这样当你失败的时候就不会注意到失败，也就不会痛苦了。但是，自我欺骗没有这么容易，你会一直对自己的存在感到失望和蔑视，也会越来越愤世嫉俗。</p></li><li><p>直面存在的混乱，瞄准麻烦的海洋，明确目的地，然后绘制航线。承认你想要的东西，让周围的人知道你是谁。精准注视，径直前行。 保持言辞精确。</p></li><li><p>人们偏向于活在冒险中， 这样他们既能对自己的经验感到自信， 又能在直面混乱中有所成长。</p></li><li><p>真正想要改善世界的人，通常不会去试图改变别人，至少他们会先从改变自己开始。</p></li><li><p>男性为主，他们的宜人性也较低；还有一小</p></li><li><p>多数</p></li><li><p>如果抛开乌托邦式的假想社会，只参照历史和现有文化，我们可以看到，在运转良好的社会中，能力而非权力才是决定地位的主要因素。</p></li><li><p>最能有效预测长期是否成功的人格特质是智力和责任心。其中，智力由认知能力或智商测试来衡量，而责任心则是由一个人的勤勉和条理性来体现。18例外的确存在，比如对企业家和艺术家来说，开放性就比责任心更能衡量成功19，但是开放性也和语言能力与创造力相关，所以这种例外是可以理解的。从数学和经济学角度来看，用这些特质进行预测的准确性是非常高的，甚至在社会科学衡量过的所有特质里，这些特质的预测准确性是最高的。</p></li><li><p>怨恨的产生只能有两个原因：一是自己被占便宜了，二是自己不愿意承担责任。</p></li><li><p>生活的压力不会因为你遭受了不幸就停止出现，每天要做的事情还是得做。如何才能坚持下去呢？下面便是我们从这一段经历学到的内容。 每天留出一些时间来集中思考和讨论所有的危机和应对方式，其他时间就忘掉这些事情。 如果你不限制危机事情对你的影响，最后就只会筋疲力尽。你需要保存实力，因为这是一场战争，而不是一次战斗。</p></li><li><p>当你内外一致时，就能够专注于当下。谨慎地对待一切，整理你能掌控的事物，修复失序混乱的部分，做到精益求精。</p></li><li><p>我们不应在摔倒或者犯了严重错误时打破物理法则，祈求问题能神奇地消失。相反，我们应当向自己发问：“当下我应该做哪些事情来增加自己的决心，强化自己的人格，找到继续前行的勇气？”</p></li><li><p>你必须先找到正确的方向，把目光投向美好和真理，然后才可以专注于当下的每时每刻。脚踏大地，仰望星空，全神贯注，这能使你更好地完善当下和未来。</p></li><li><p>我应该如何使自己变得更强大？不要撒谎或做你鄙夷的事情。 我应该如何使自己变得更高尚？只遵照你心灵的旨意行事。 我应该如何面对最棘手的问题？将它们视为通向人生之道的大门。 我应该如何帮助落魄的人？用正确的示范来鼓舞他，使他重新振作起来。 当众人皆醉我独醒时应该做什么？坚定勇敢地说出事实的真相。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>12月阅读计划</title>
    <link href="/2021/01/07/2019-12-01-booksPlan12/"/>
    <url>/2021/01/07/2019-12-01-booksPlan12/</url>
    
    <content type="html"><![CDATA[<p>也就突然觉得，把阅读计划记录下来，不至于追忆往事，只剩唏嘘，对已有益，对人无害，利大于弊。</p><p>当月已读完书籍：<br>《财务自由之路》<br>《寂寞的游戏》<br>《蝉》<br>《树下长椅》<br>《悠哉悠哉》<br>《这里》</p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="《有限与无限的游戏》：https-book-douban-com-subject-25742296"><a href="#《有限与无限的游戏》：https-book-douban-com-subject-25742296" class="headerlink" title="《有限与无限的游戏》：https://book.douban.com/subject/25742296/"></a>《有限与无限的游戏》：<a href="https://book.douban.com/subject/25742296/">https://book.douban.com/subject/25742296/</a></h3><h3 id="《寂寞的游戏》：https-book-douban-com-subject-27104286"><a href="#《寂寞的游戏》：https-book-douban-com-subject-27104286" class="headerlink" title="《寂寞的游戏》：https://book.douban.com/subject/27104286/"></a>《寂寞的游戏》：<a href="https://book.douban.com/subject/27104286/">https://book.douban.com/subject/27104286/</a></h3><p>袁哲生的这本书是通过b站上的一个节目得知的，甚至，这个名字也是在这个节目第一次初识。</p><p>他让我想起了史铁生。史铁生的书，淡淡的疏离感和空虚感中隐藏着热情，让人读之虽冷但一股暖流从心中流过；而袁哲生的书，看似喧嚣，实则孤寂，让人读之感觉天下之大，竟无我半点容身之地，俗世虽喧嚣，奈何无志趣相投之人。其外虽热情似火，其心早已千疮百孔，其人更似一个矛盾的结合体。</p><p>我从心中其实是不喜欢看这类书的，因为这类书看了会让我感到淡淡的绝望，对所有事情的那种淡淡的无所谓，对过去日子的那种深切的向往，对未来日子的迷茫则加剧，看后遍体生寒，内心荒凉且悲哀，对精神上造成一种很大的压力，往往数日沉浸在过往中而无法自拔。怀念过往并不是错，过错在于沉迷于过往成功的喜悦和失败的痛苦则会迷失本心，忘记未来的路；沉迷于过往的温馨则会大变性情，拒绝未来的温馨。但是却忍不住看，一来可以使自己头脑清醒，所谓有则改之，无则加勉，二来碰到志趣相投之人，不免欣喜，更哀叹。</p><p>此刻唯愿逝者安息，生者如斯。</p><h2 id="绘本"><a href="#绘本" class="headerlink" title="绘本"></a>绘本</h2><h3 id="《蝉》：https-book-douban-com-subject-34721400"><a href="#《蝉》：https-book-douban-com-subject-34721400" class="headerlink" title="《蝉》：https://book.douban.com/subject/34721400/"></a>《蝉》：<a href="https://book.douban.com/subject/34721400/">https://book.douban.com/subject/34721400/</a></h3><p>看介绍，我把它当作一本放松心情，减轻执念，进一步减少抱怨和负面情绪的消遣读物。同时，简介让我想起来前不久看过的哪吒之魔童降世，让我觉得蝉和哪吒本质上是一类人（不排除后期读完书后啪啪打脸的行为），然后哪吒因为bug加身，背景加身，努力后而发出我命由我不由天的感叹，各种机缘巧合之下算是结局圆满；而蝉则是是一个悲剧式人物，其惨等观后再述说。</p><p>没有想到蝉这么绘本竟然这么薄，这么精简。日复一日拼命做着重复工作的蝉，兢兢业业，任劳任怨，吃苦耐劳，要求的福利最少而做的工作最枯燥。我想蝉大概像在温水中被慢慢煮熟的青蛙，或许蝉第一年做这份极为重复并且可替代性高的工作时，内心也有过拒绝，但是他珍惜这一次的工作机会，不愿意因为自身原因而换工作或换岗位，或许蝉在打字的时候，也打过语文书，拼上过这么一句话：”张华考上了北京大学；李萍进了中等技术学校；我在百货公司当售货员：我们都有光明的前途。”蝉或许也想过，我在公司里当打字员，我们也都有光明的前途。可惜，前途不是狭窄拥塞的羊肠小路，而是一步一步看得到希望的康庄大道，谁都迷茫过，迷茫的时候鸡汤文和励志的名言是最猛烈的毒药，它告诉你要吃苦，要勤劳，要任劳任怨，唯独没有告诉你，要活好自己，要听从自己的内心，要以事实说话。鲁迅先生说过，他向来不惮以最坏的恶意揣测中国人，我觉得，蝉就是一个人，他是一个活生生的人，他可以是富士康不堪重负的跳楼员工，也可以是收费站被撤失业嗷嚎大哭的中年大姐，他们都是现实世界的蝉。那么，我们是什么？我不敢说我们，我无法代表大部分的人，我只能说我是一个不想走蝉的老路的蝉，一个没有跳楼的蝉，一个从温水中奋力跳出的青蛙，一个活生生的人。一个人，应该有目标，有行动，有远见，有思想，有观点，有幸福。没有目标，就没有方向，就如浮萍般没有方向，不知归途。目标因人而定：周总理向往拯救中华，他的目标是中华之崛起，他当时的行动是读书；我的目标是混吃等死，我现在的行动是回老家拿着比上不足比下有余的工资，每天步行到点上下班，回家躺在躺椅上看蝉，看史记，看电影，看窗外。目标并不是给别人看的高大上，而是自己行动的指路明灯，也是幸福的根基，一步步迈向目标的途中，进一步便是欢喜。有了目标，做了行动，随着一步步的行动，目标看似近了，实则可望而不可及，这个时候就需要远见，远见是让行动能持续并慢慢加速实现目标，周总理的远见是中国的成立和发展；我无法和总理相提并论，我的一点见识就只能是计算机和人工智能未来的发展。有了这点见识，能引导行动慢慢的向目标前进而不走错路，少走弯路。思想则是一个人心灵的避风港，往大了说，孙中山先生的思想能成立民国；我的思想只能确保让我想开不至于跳楼。人作为社会的一份子，是不可能老死不相往来的状态，是不可能事不关己高高挂起的状态，没有观点就没有社会的是非善恶。幸福快乐则是行动过程中的收获和完成目标后的欣喜。</p><p>不要把自己的观点强加给别人是每个人该有的素质，你没经历过别人的生活，就不要强行让别人遵守你的观点：996是福报吗？对于稻盛和夫先生这类人来说的话，或许是福报，或许007才是最大的福报—目标不同，行动不同，经历自然不同，产生的观点更是千差万别。但是就于我这类目标是混吃等死的人来说，942才是福报，更能让我明白社会主义胜利的展现。幸福和快乐从来不是未来才有的，而是当下就存在的，如果当下不存在，那就去寻找幸福和快乐，吃的苦中苦，并不一定能成为人上人—但是吃的甜中甜，一直吃下去，本身就很甜，人生不是靠苦去体现价值，然后吃的苦中苦的目标不是想甜吗？人上人真的甜吗？借用一句流行语的话就是：有钱人的快乐你想象不到。那么，人上人的甜，你更无从品尝。珍惜当下，拒绝一味的先苦后甜鸡汤式宣导，尝不到甜的苦不是苦，是地狱的尽头，是人生的末路。</p><h3 id="《树下长椅》：https-book-douban-com-subject-30458203"><a href="#《树下长椅》：https-book-douban-com-subject-30458203" class="headerlink" title="《树下长椅》：https://book.douban.com/subject/30458203/"></a>《树下长椅》：<a href="https://book.douban.com/subject/30458203/">https://book.douban.com/subject/30458203/</a></h3><p>看树下长椅让我想起了多年前看过的卓别林的默片。书全篇没有对话，有的只是表情，眼神，动作，不过，作为一本绘本，这就足够了。</p><p>长椅自成一方小世界，见证了每一个普通人波涛汹涌的内心世界。天真烂漫的刻字立下海誓山盟的孩子，追求潮流我行我素的滑板少年，热恋中的青年情侣不依不舍的离别，步履匆匆准时上班的油腻中年，夕阳西下品尝蛋糕甜蜜的退休老人，孤苦伶仃走完人生的古稀老人，更有以饮酒为乐、风餐露宿却屡遭保安驱逐的拾荒老人。</p><h3 id="《这里》"><a href="#《这里》" class="headerlink" title="《这里》"></a>《这里》</h3><h3 id="《悠悠哉哉》：https-book-douban-com-subject-26227933"><a href="#《悠悠哉哉》：https-book-douban-com-subject-26227933" class="headerlink" title="《悠悠哉哉》：https://book.douban.com/subject/26227933/"></a>《悠悠哉哉》：<a href="https://book.douban.com/subject/26227933/">https://book.douban.com/subject/26227933/</a></h3><p>读完悠哉悠哉后，我仿照主人公的记步，一边走一边计数，发觉这真不是一个简单的事。步数超过百位后，心思便需要放在步数的计算上，而忽略了每一步的尺度，不知不觉加快的脚步让步数的计算就难以为继，遑论控制尺度了。放慢脚步而专心于控制每一步的尺度则容易算错步数，甚至会发现自己竟至于不会走路，走路竟变得不是一个自然的事情。</p><p>实话实说，我是嫉妒主人公的，其一是主人公能够追随自己的内心和喜好去做事情，这来源于财务自由和内心的期望值。有了财务自由，则不需要为了生计而做事；内心的期望值满足了，则别无所求，可以心无挂碍的去思考人生的意义，去追随内心的喜好。其二则是妻子的理解并支持，得妻如此，夫复何求。</p><p>不过，这些是可以改变的，是有明确的途径改变的。而主人公的纯璞归真则不是能轻易做到的，正如一个东西受到破坏后很难复原，一个人也是这样的，经过数十年的打磨，已经把一些纯真丢掉了，想找回来绝非易事，主人公发呆的看着蜻蜓、猫、老鹰的时候，自己的灵魂似乎也附身于这些生物上，这种状态我们大多数人已经没有了，儿时我们都有过，而现在，还有的人应该是算是凤毛麟角了吧。</p><h2 id="理财"><a href="#理财" class="headerlink" title="理财"></a>理财</h2><h3 id="《财务自由之路》：https-book-douban-com-subject-27009488"><a href="#《财务自由之路》：https-book-douban-com-subject-27009488" class="headerlink" title="《财务自由之路》：https://book.douban.com/subject/27009488/"></a>《财务自由之路》：<a href="https://book.douban.com/subject/27009488/">https://book.douban.com/subject/27009488/</a></h3><p>12/19-12/25</p><p>财务自由的策略：<br>1．储蓄一定比例的金钱。<br>2．使用储蓄资金进行投资。<br>3．提高自己的收入。<br>4．从每次加薪中提取一定比例进行储蓄。</p><p>计划要与梦想、目标、价值观和策略联系在一起。</p><p>为什么金钱对你来说那么重要？<br>金钱的重要性，一直都是我们赋予它的。所以当你有财务问题时，金钱便会变得尤为重要。</p><p>自信给你一种战胜事物黑暗面的信心 。生活并不是一支只由美好明快的曲调组成的交响乐，它还有黑暗低沉的曲调。不过自信的人在面对困境时不会胆怯。自信指的是，一个人在自身经历的基础之上，知道他遇事可以依靠自己 。一个自信的人不会因阻碍而愤懑，因为他知道他一定会破除万难达成目标。</p><p>你并非对所有的事件都要负责，但你总是要对自己对事件的判断和反应负责。对自己内心的反应负责——对我们的态度和我们的表现负责。<br>我们想要自己掌控将来事态的发展，还是让我们的错误及其后果掌控将来的事态？ 如果我们在事件发生时勇于承担责任，那么所有的负面情绪在这一刻都会失去掌控力。</p><p>如果总是谴责客观因素和他人，我们就相当于自动放弃了拥有控制权的机会。抱怨和指责的行为只会体现出我们的软弱。</p><p>我怎么解决这个问题呢？ ==&gt; 我如何创造一种情况，使这个问题不再出现呢？<br>逃避问题不会使人生活富裕。想要拥有更多金钱的人，就应该为自己列一个长长的问题清单。</p><p>当你做决定时，你应该问“是否 ”。这个问题的背后还藏着另一个问题“为什么”。你为什么要做某件事情？哪些原因促使你做这件事情？“怎么做 ”在这个时刻并不重要，它会在之后顺其自然地出现。<br>做完决定之后，你就不用再关注“是否 ”这个问题了。你大可不必在遇到第一个困难时就提出这样的问题：我的决定正确吗？我是不是应该尝试一些别的方法？如果这个时候不去思考如何解决困难，你便会重新提出“是否 ”的问题。我们都认识一些做决定时患得患失，之后又很快反悔的人。正确的决策顺序应该是：<br>（1）我为什么要这样做？决定“是否”要做（结合决断力做决策）。<br>（2）我应该“怎么做”？出现下一个困难的话，你如何解决？一直牢记不放弃的理由。</p><p>你对自己的生活和财务状况全权负责。<br>•离开你的舒适环境<br>•将困难当作成长的机会，并且问自己：我如何创造一种情况，使这个问题不再出现呢？<br>•提出正确的问题<br>•扩大你的个人范畴，同时你的可控领域也得到了拓宽。</p><p>生活的五个领域<br>健康、财务、关系、情感和人生意义<br>“健康是革命的本钱。无法控制情感的人，也无法完成自己的既定计划。良好的人际关系就犹如盐对于汤的重要性。关于人生意义，我指的是做自己认为有趣的、符合自己才能的、有益于他人的事情。财务状况也属于此类范畴。永远不要为了金钱去做一些无趣的事情 。所以你需要的是财务自由。”</p><p>变化的5个层次(采取行动、运用技巧、个人发展、世界观和自我认知)<br>第一层次： 你意识到自己对现状感到不满意。为了改变现状，你开始采取行动。<br>举例：你办公桌上的信件堆积如山，于是你决定一直不停地处理信件，直到你能再次辨认出你办公桌面板的颜色。<br>第二层次： 期待的结果没有出现，你意识到，仅仅只是采取行动还远远不够。你采取的行动还必须以解决困难作为目标导向。你问自己：我如何使结果变得更好呢？我如何不这么艰难，而是更灵巧地工作呢？<br>举例：你加班加点地工作，但到了月底，你挣的钱还是不够用。<br>第三层次： 学到的技巧对你起到了一定的帮助。但是，如果拿自己跟其他成功人士进行对比，你就觉得他们好像不费吹灰之力就达成了目标。他们拥有富有影响力的、能为他们开启方便之门的朋友。<br>举例：一个意想不到的困难极大地打击了你。你本来需要将全部时间和精力投入生意中去，但现在你必须首先解决眼前的麻烦。一切都乱七八糟。<br>第四层次： 在你与自身和他人打交道时，仔细思考一下你的世界观。许多人戴着有色眼镜看世界，将美好的世界扭曲成了一个热带丛林，在这个丛林中，每个人都要互相对抗才能生存。<br>举例：有的人从不相信任何人。他们对别人有过几次失望，从此以后便小心翼翼。他们带着怀疑的目光看待一切事物和一切人，费尽心思地寻找别人设下的“陷阱”。有时候他们自己掉入自己的陷阱，因为他们本性不具有魅力，不讨人喜欢，所以别人对他们敬而远之。<br>解决方法是：换一副新的眼镜，换新的镜片。世上不存在一个孤立的现实，只存在一个我们感受到的现实。我们戴上一副新的眼镜看世界，世界就完全不同了。著名的管理培训师史蒂芬·柯维讲过下面的故事。<br>一天，柯维乘火车前去参加一项活动，他要在本次活动中发表演讲。他打算利用火车上的时间来准备演讲稿。突然，一名带着三个孩子的男子来到他的这节车厢。孩子们马上就开始嬉戏打闹。他们又叫又闹，在座位上跳来跳去，其他乘客也不胜其烦。而那名很明显是孩子父亲的男子，什么都没有做。他只是无动于衷地望着窗外。<br>孩子们越来越顽皮，开始脚踢座椅，甚至用手去扯几个乘客的衣服，最后还揪住了一位女士的头发。父亲仍然没有加以阻止。史蒂芬·柯维终于忍无可忍，他努力镇定下来，决定要插手这件事情。为了使他的话在孩子父亲身上达到良好的效果，他果断地站起身：“打扰了，先生，您难道没有看到您的孩子已经打扰到所有乘客了吗？请您告诉他们遵守秩序！<br>带着对自己刚才行为和有力要求的自豪，他又坐下了。那位父亲缓缓地从沉思中回过神来，最终将头转向说话者，用低低的声音回答道：“是的，是的，我为孩子们的行为感到抱歉。我刚才完全没有注意到。我的妻子——孩子们的母亲，在几个小时之前去世了。我还不知道我以后该怎么生活。我们几个都还没法接受这个事实。我想，我的孩子们是在以他们自己的方式去接受这件事……非常抱歉。<br>同黑白眼镜相比，一定也有一些有色眼镜，使我们自己和他人更加幸福。也有一些眼镜，使我们看到的是机会，而非错误和陷阱。<br>有一副有色眼镜，通过它，你将金钱视作一种能购买武器、引发战争、制造贪欲、使人寂寞的东西。你必须清楚，我们现在只是就这副有色眼镜而言。同样地，我们也完全可以换一个视角来看待金钱。我们可以戴上这样一副眼镜，通过它，你将金钱看作可以修建医院、缓解饥荒、改善医疗条件、延长寿命的一种东西。你能用金钱改善生活条件。金钱可以做许多好事。<br>你更愿意戴上哪一副眼镜来看待金钱？或者说，戴上哪一副眼镜，你能更幸福？<br>第五层次： 通过改变对自身的认知，我们可以带来巨大的变化。<br>举例：海因茨·哈特希是一名销售人员。他工作勤奋，掌握了工作所需的所有重要技能。他成熟稳重，同事都喜欢与他共事。他不会戴着“顾客是战利品”的眼镜看待顾客。他向顾客提供有益的建议，享受顾客对他的信任。这虽然很好，但还不够完美。顾客不会主动来找他。最大的区别在于：海因茨·哈特希将自己看作一个什么样的人。如果他将自己视为销售人员，他就必须主动去招揽顾客；如果他将自己看作专家，顾客就会主动来向他咨询。<br>将自己看作销售人员还是专家，做出不同的决定，所产生的效果是不同的。我们的自我认识，最终会成为自我实现的预言。</p><p>深刻的改变只能也必须发生在所有5个层次之上。当你全面地考虑到5个层次，奇迹便有可能发生。<br>一天，彼得对耶稣说：“主啊，我们有个问题。明天我们必须缴纳税款，但是我们根本没有钱。”耶稣回答说：“没有问题。”彼得有点糊涂了：“主啊，你还没听懂，我说的是，明天我们必须缴纳税款，但是我们根本没有钱。这就是一个问题。”耶稣再次回答说：“没有问题。”<br>第一层次： 奇迹之所以发生，是因为我们为此付出了努力。<br>第二层次： 去捕鱼这件事有助于技能的掌握。<br>第三层次： 你应该成为一个人物，一个因为自身能力强大，所以别人主动来接近你的人物。彼得遇到困难马上就去找耶稣，是因为他认为“耶稣肯定有办法”。<br>第四层次： 税款不是问题。政府不是为了榨取你的钱财而存在的。<br>第五层次： 身份，一个“没有问题的人”。</p><p>“思想日记本（记录你的所有创意）、一本关系日记本（记录所有使你快乐的关系）、一本知识日记本（记录你从自己犯过的错误中学到的所有东西，使你以后不会再重蹈覆辙）”<br>我会在我的成功日记本中记录，并继续系统地建立我的信心。</p><p>确定一下，你想在什么时候获得多少钱：<br>在__________年内，我将获得__________人民币。<br>只要你还没确定这个数字，生活就无法将这笔钱邮寄给你。一个小提示：你在之后还可以提高这个数字，但是现在请先写下一个数字。<br>要清晰地定义财富需要三个条件：你必须知道明确的数字，写下这个数字，并且将它转换成画面。</p><p>明确你想要什么，编制一本与此相关的梦想图册：<br>•制作一本图册，将会成为你未来生活一部分的东西的图片贴上去。<br>•思考你想做什么，你想拥有什么，你想成为什么样的人。<br>•请选取那些能够打动你的图片。<br>•尽可能频繁地翻看你的梦想图册。<br>•之后将眼睛闭上一会儿，想象如果一切成真，你能看到、听到、感觉到、闻到、尝到什么。</p><p>写下一个大目标（房子、车子、工作、公司、合作伙伴、旅行……），尽可能详尽地对你的目标进行描述。不要漏掉任何一个细节。</p><p>•假如你“全力以赴”，那么你在接下来12个月中最多能赚到多少钱？<br>__________人民币。<br>•你是如何计算出这一数字的？</p><p>使我们感到幸福的是什么呢？答案是：我们按照自己的本性去生活。成长和成功都深深地植根于人类的本性，而我们最终是在成长和发展中获得满足感的。</p><p>我们对于当前的成就存有感激之情，这是美德。但对于当前拥有的东西，将来也感到满足，这就违背了人类不断成长的需求 。</p><p>请写下有助于你变得富有的特点和阻碍你变得富有的特点。你的优势和劣势分别是什么？</p><p>对未来规划碰到的两个核心问题：“我是谁”和“我为什么在这里——我活着的意义是什么”。为了寻找答案，我开始了写作。<br>也许你曾将某些事情延后，处理那些事情需要平和的耐心和时间。如果你可以有一个安息年，你会怎么做呢？你能想象拥有一年完全属于自己且不必担心金钱的时间吗？</p><p>•你是否花过超出你计划的金额？为什么？<br>•你是否减肥“失败”？为什么？<br>•你是否想过存钱，但最终没有去做？为什么？<br>•你是否打算至少3个月不买新衣服，但后来还是买了？为什么？<br>•你是否透支过银行账户？为什么？<br>•你是否曾经储蓄，但后来中断了或是直接放弃了？为什么？<br>•你是否决定做某件事情，但最终并没有去做？为什么？<br>但是，你肯定也有过确定目标并实现目标的经历。为什么？其中有什么区别？<br>会不会在你的内心深处有一种更强大的力量，在某些时刻能够“凌驾”你的计划和良好的意图？</p><p>随身携带500欧元的现金。<br>•你要感觉自己很富有。你要学会在有钱的情况下感觉自如。<br>•你要习惯有钱。<br>•你要在金钱问题上学会自信。<br>•你要消除害怕失去金钱或是被抢劫的恐惧感。<br>•你要准备好应对突发情况，在面对有价值的交易时总有足够的金钱储备。<br>•你要锻炼你的自律能力。<br>•你的潜意识会帮助你获得更多的金钱，因为它发现金钱使你快乐。</p><p>想象一下金钱过多的情况，我的意思是非常非常多的钱。把过多的资本、过多的金钱、资产和产权同什么关联在一起。<br>哪些因素有利于你获得大量金钱，哪些因素不利于你获得大量金钱？拥有金钱的优势和劣势分别是什么？再看一遍你勾选出来的信念清单。</p><p>你关于金钱最强烈的信仰是什么？</p><p>在你18岁之前，哪些人对你影响最大？请列举3～10人（母亲、父亲、朋友、亲戚、偶像、老师、培训员……）。<br>今天，谁对你影响最深？给你个小提示：经常和你待在一起的人（伴侣、朋友、同事、父母、合作伙伴、运动伙伴），往往也就是影响你最深的人。<br>这些人对金钱持何种态度？他们如何理财？他们给过你关于金钱的哪些建议？</p><p>详细地记录下你的目标。想一想，你想成为什么样的人，你想做什么，你想拥有什么。先从长远目标开始，以发挥长远目标对短期和中期目标的导向作用。内容可涵盖生活的5个领域：健康、财务、关系、情感和人生的意义。</p><p>7年或7年以后，我想：<br>•成为一个什么样的人：你会如何看待自己，你希望别人如何看待你？<br>•做什么：你的日常生活应该是什么样的？你想要做什么，或者你不想再做什么？<br>•拥有什么：你想拥有什么样的财富、朋友、健康和家庭？</p><p>3年或3年以后，我想：<br>•成为一个什么样的人：你会如何看待自己，你希望别人如何看待你？<br>•做什么：你的日常生活应该是什么样的？你想要做什么，或者你不想再做什么？<br>•拥有什么：你想要拥有什么样的财富、朋友、健康和家庭？<br>有一群志同道合的朋友，有一堆向上的活动</p><p>阻碍：<br>“为什么这个信仰可能是错的？”<br>“给我灌输这个思想的人富裕吗？”<br>“如果我不放弃这个信仰，最终我会在财务上和情感上付出什么代价？”<br>“我的家庭以及我所爱的人会付出什么样的代价？”<br>“如果我现在改变这个信仰，我的生活会得到什么样的改善？我的感觉会是什么样的？”</p><p>拿出你旧的信仰，将其转化为新的信仰：</p><p>要实现自己的财务目标，你需要3种信仰：<br>1．我的处境自身必须改变。<br>2．我必须改变我的处境。<br>3．我可以改变我的处境。<br>每当一个人想行之有效地改善自己的处境，他就会产生这样一种感觉：“我必须这样做。”他知道，只有他自己是负有责任的。他也拥有足够的自信，他相信自己能够实现这些必要的改变。</p><p>杠杆作用往往产生于：如果你不去做某件事情，你就会感受到巨大的痛苦；但是如果你做了，你就会感受到极大的快乐。<br>你可以按照以下方法制造杠杆：将痛苦和你无法改变自身财务状况的事实联系在一起。<br>在下面横线处写下所有你必须放弃的东西。如果在你的一生中，你从来都不曾获得过财务安全或经济自由，那么你会错过些什么？这会对你的关系、健康、压力、自尊、对自由的需求产生什么样的影响？尤其是如果你在晚年中还必须一直劳心费力？</p><p>写下如果你财务自由、无须再工作时，所有你能做到的事情。你可以花大把时间在感兴趣的事情和能帮助他人的事情上。这会对你的人生乐趣、自尊和人际关系产生什么样的影响？你会有多少空闲时间，你会有多快乐？这会对你的健康和人生意义产生什么样的影响？这会如何丰富你和你周围人的生活？</p><p>改变消极态度，承担责任，包括对于自己对任何事情的看法和做法的责任。</p><p>评判信念的重要标准是：这种想法在你通往目标道路上是否对你有帮助？<br>每当生活中发生不如你意的事情，你都要找出隐藏在事情背后的信念。<br>要实现自己的财务目标，你需要3种信仰：<br>1．我的处境自身必须改变。<br>2．我必须改变我的处境。<br>3．我可以改变我的处境。<br>想把某件事物变成必需品，我们就需要使用杠杆。杠杆由“避免痛苦”和“体验快乐”两部分组成。<br>你可以制造杠杆。无法实现目标时痛苦，实现了目标就快乐。<br>每一个达成过远大目标的人，都是将90％的精力放在“为什么”上，只将10％的精力放在“怎么做”上。</p><p>能力<br>你在自己的专业领域是一个什么水平？你有没有将自己定位为专家？你了解自己的专业领域吗？你是否已为自己建立起能提升你知识和能力的导师及专家团队？你在个人专业领域之外是否还继续深造？你的个人能力是否和你的专业技能共同成长？你了解成功的法则吗，是否运用了成功的法则？你具备领导资质吗？同你所在领域的优秀人士相比，你的能力如何？<br>你的自我评价：__________分（最高10分）<br>精力<br>你准备将多少精力投入专业技能的提升中去？你实际投入了多少精力？你还有多少能量？你能否将精力集中起来，全身心做某件事情？对于你现在所做的事情，你的热情和激情有多大？你热爱你的工作吗？从长远来看，你在将来需要更多的精力，你是否仍然为自己的健康、运动、家庭和持续学习以及成长而投入时间？<br>你的自我评价：__________分（最高10分）<br>影响力/知名度<br>你是否知道这是你的收入板块中最重要的板块？影响力是最强大的乘数。你的产品/你的服务受众面有多广？网球运动员鲍里斯·贝克尔能挣钱，因为他很优秀，而且付出巨大的努力。但是，他挣到大笔的钱，还是源于成千上万的观众观看他的比赛。知识、技术、产品在当今社会比比皆是。你能否利用你的产品挣到钱，取决于有多少人知道。注意：本条评价满分100分。<br>你的自我评价：_________分（最高100分）</p><p>“花点时间想一想，想要获得更多的专家能力和个人能力，你在72小时之内具体能做些什么。”</p><p>“你可以采取哪些具体步骤，以获得更多的精力？”</p><p>“想要提高知名度，你能做些什么？”</p><p>“要提升自我评价，更好地推销自己，你能做些什么？”</p><p>“想使你的创意工厂保持高速运转，你能做些什么？”</p><p>当然我们也要有休息的时间。我已经习惯在每一次实现小目标后奖励自己。<br>我一周工作6天，有1天休息时间。我一年中休假4次，其中一次长达3个星期。我发现在休假后我可以把工作做得更好，我会更加全神贯注、精力充沛。<br>此外，我也充分利用自己的假期。我每年大约读150本书，其中有50本都是在假期中阅读的。<br>在圣诞假期时，我会总结过去的一年并规划新的一年。对于生活的每一个领域，我都会确立目标，并写下我要确立这些目标的原因。<br>不仅如此，我的认识笔记主要也是在休假期间写的。在这本笔记中，我记录的是我所学到的东西。<br>这样一来，每一次的失败都会成为教训。为了保证不会再犯同样的错误，我把它们全都记录下来。<br>假期对我来说是一段美好的时光，可以完全脱离自己的日常事务，将时间花在伴侣和自己身上。当我再度回到家里，我更加清楚地知道我做这一切是为了什么。我再度将精力更多地集中在目标上而非方式上。这是上述所言如果我一年休假4次，我工作更加有成效的其中几个原因。</p><p>影响复利的，只有三个重要因素：时间、利润率和投入。</p><p>72÷利率＝投资翻倍所需的年限</p><p>年利率12%</p><p>“大多数人生活的方式都好像自己永远也不会出现收入微薄的情况。但这种情况肯定会出现的。”</p><p>“提问“为什么”对你并不总是有帮助的。它喜欢寻求辩解。而辩解又往往被当作借口。因此，思考“为什么”往往会阻碍你采取行动。”</p><p>投机者无法保证“鹅”饲养的绝对安全，他无法定期获得金蛋，也就是说，投机者根本不会获得被动的收入。他们只有在出售自己的资产时，才会赚到钱。</p><p>“一位投资者会在买入的时候获得利润，而非在卖出的时候 。”</p><p>重要的是知道如何投资，不要将债务、投机与投资混淆起来。</p><p>不要因为极端情况而动摇自己。也不要去追随大多数人的做法。坚持你自己的计划。</p><p>财务自由关键的区别在于：<br>1．投资和投机的区别；<br>投资者是从购买投资产品起就开始获得收益，而并不是要等到卖掉产品时。<br>“投资者能从投资项目中定期获得收益。谁要是在转卖时才获得收益，那么他就不是投资者，而是投机者”<br>2．负债和投资的区别；<br>“如果金钱远离你，这就是一种负债。如果金钱流向你，那这便是投资。”<br>3．三种投资类型的区别；<br>4．普通投资者和投资家的区别。</p><p>清楚买入卖出的最佳时机，能够正确估算价值和利润率。</p><p>把一部分资金用于货币资产，包括定期存款账户、货币基金和债券。<br>另外一半的资金要用于有形资产投资。<br>如果你没有时间投资股票，那么你可以选择股票基金。<br>如果你想努力成为一名投资者，就还需要投资不动产和公司。</p><p>100－年龄＝股票和股票基金的最高份额。</p><p>你如何才算拥有财务保障、财务安全和财务自由？它们的定义和区别是什么？你需要多少资金、多长时间才能达成目标？”</p><p>请回答一个问题：假设你突然断了经济来源，欠你钱的人无法还钱；或者公司破产，你被解雇了；或者你生病了——这样的情况下，你能支撑多长时间？<br>这正是我们要谈到的财务保障。尽管遭遇突如其来的经济变故，你还是能依靠积蓄继续保障自己的生活。<br>个人花销：<br>房屋抵押贷款/房租：    __________人民币<br>伙食/日常家务开销：    __________人民币<br>汽车：    __________人民币<br>保险：    __________人民币<br>预付税款：    __________人民币<br>家务费用：    __________人民币<br>通信费：    __________人民币<br>信用贷款：    __________人民币<br>其他：    __________人民币（图书）<br>__________人民币<br>每月开支合计：    __________欧元<br>根据上面的数字，你达到财务保障，每月需要收入多少呢？<br>个人花销：    __________欧元</p><p>让我们假设你生病了，丢了工作。在你病愈且找到满意的新工作之前，这种情况会持续多久？为了感觉有保障，大部分人需要6～12个月的储备金。<br>你认为多长时间后你必须重新开始工作？<br>________月。<br>现在用财务保障所需的每月收入乘以需要的月数：<br>________人民币×________月＝________元。<br>你刚刚算出来的这个数字，便是你财务保障需要的绝对最低数。要对你自己、你的健康、你的幸福感，以及对你的家庭负责，你必须拥有这个数额。<br>有了上述这笔金额，你才可以安心地花时间去寻找满意的工作。只有如此，你才能放心前行。即使一直以来都没有什么意外发生，你还是应该坚持。因为有了这笔储备金，你才拥有安全感。安全感是每个人都需要的。当你面临困境时，有支持你的后盾，你才可以更好地解决困难，财务保障便是我们所说的后盾。</p><p>我不太喜欢严格遵循预算计划。但是每个人都应当定期算一算，好让自己清楚每个月到底有多少开销，看看把钱都花到了哪些地方。只要你还没有实现财务保障，你就必须得考虑对预算进行计划。<br>只要你认真做这件事，你定会大吃一惊。在下面你可以找到一张空白的预算计划表。首先列出你所有的收入和开支。<br>单单这份表肯定不足以做成一份计划。但你可以从中获得很多有用信息，认识到你在缴税、汽车、电话这几栏花费了太多的钱。</p><p>现在你需要一份计划。确定要实现财务保障，你想要存多少钱：<br>我想每月存__________人民币；<br>因此我将于__________月内实现财务保障。</p><p>财务安全<br>列出每月必要的支出和花费：<br>1．抵押/ 租金：    <strong><strong><strong>____</strong></strong></strong><br>2．伙食费/日常开销：    <strong><strong><strong>____</strong></strong></strong><br>3．汽车：    <strong><strong><strong>____</strong></strong></strong><br>4．保险：    <strong><strong><strong>____</strong></strong></strong><br>5．税费：    <strong><strong><strong>____</strong></strong></strong><br>6．赡养费/抚养费：    <strong><strong><strong>____</strong></strong></strong><br>7．电话：    <strong><strong><strong>____</strong></strong></strong><br>8．贷款：    <strong><strong><strong>____</strong></strong></strong><br>9．其他：    <strong><strong><strong>____</strong></strong></strong><br>10．积蓄（度假，置办大件物品）：    <strong><strong><strong>____</strong></strong></strong><br>11．培训：    <strong><strong><strong>____</strong></strong></strong><br>12．捐款：    <strong><strong><strong>____</strong></strong></strong></p><hr><p>总计：    _______________<br>现在请计算一下，你需要多少金钱才能实现财务安全。<br>每月所需金额×150＝资金总额</p><p>假设你只能再活6个月了，你还想做哪些事情呢？你想去哪些地方？你想和哪些人在一起？想做哪些事情生存下去？</p><p>•一旦实现自己的财务保障，你就应该将所有可用资金用来投资，以实现财务安全。<br>•当你实现了财务安全之后，你就不应该再去动用自己的本金了。<br>•你住你想住的地方，做你喜欢的事情，仍然可以把所有的账单付清。<br>•除此之外，你还可以致力于自己感兴趣的、与你的才能相符的事情。<br>•你应该将克莱门特·斯通的名言作为自己的信条：“一个存不下钱的人，没有资格被称作一个聪明、理性的人。”</p><p>实现财务保障：<br>我想每月存__________人民币；<br>因此我将于__________月内实现财务保障。<br>1．目标拓宽你的机会意识<br>当你做下这个承诺，你会换一种角度去观察出现在你生活中的每一个人。每一种处境对你来说都有其存在的意义。不断地问自己：它能对我实现目标有什么帮助？我怎样才可以马上将它运用起来？<br>你对目标的定义越清晰，你的承诺越有效，你就能越多地利用这两个起决定作用的问题：这如何与我的情况相符呢？我应该如何马上采取行动呢？<br>2．目标为你指出解决问题的方向<br>大多数人都将自己的时间浪费在长时间思考问题上。目标清晰的人没有时间这样做。他们想要更接近自己的目标，因此不断地寻找解决方法和解决途径。他们将精力集中于目标之上。一旦一个人将自己的视线聚焦于一个目标，那么恐惧就打不倒他。<br>3．目标使你为了“赢”而去比赛<br>我们参加比赛是为了不输，还是为了赢，两者之间有着天壤之别。 你结识某个人，马上就能感觉出来他是一个不想输的人，还是一个想要赢的人。你能从他的眼神、行为、话语判断这一点。<br>远大的目标不允许我们只是苟且地存活着。你必须全力以赴。你必须为了“赢”而活着。<br>4．你有了一个目标，一切都变得很重要<br>无目标之人的生活座右铭都是：只是一点点不好的东西并不会对我造成伤害。而对于有目标的人来说，一切东西、任何一个小细节都十分重要。<br>以一名自行车运动员为例吧。你认为他会说“超重1千克没有任何影响”吗？自行车职业运动员永远不会这样想，因为他们知道，在骑车登山时他们会因为超重1千克而慢关键性的一分钟。<br>从你拥有目标的这一刻起，一切都会变得重要起来。你所做的一切不是在使你接近目标，就是在使你远离目标。不存在中间状态。<br>正如之前所说的：一个明智的决定是成功的前提。如果一个人说“我可以过一会儿再做决定”，那么他就是在欺骗自己。因为如果你（现在）不做决定，就意味着你已经做好了决定 。你决定让一切照旧，不去做任何改变。你决定继续远离自己的目标。所以，现在就做出决定吧！</p><p>定下目标，选好参考维度、容忍底线，然后综合评分，得出最优解。计算得失得出答案后，不回头，不纠结，向前看。</p><p>少数精英追求效率，实现自我认知，他们活在现实中。</p><p>财务自由很难实现吗？<br>区分人和人并最终造成差距的东西，是满足和惰性。我们永远不能安于现状。<br>恐惧永远不应该左右你的决定。因为世界上不存在失败，只存在结果。是的，你没有看错：世界上不存在失败。“我不相信失败。因为如果你享受了过程中的乐趣，那这就不是失败。”<br>我们必须采取行动，不要害怕犯错误。我们不应该成为从不犯错的人，而应该成为永不放弃的人。他人可以短暂地阻止你，但只有你自己才可以永远地使自己停下来 。</p><p>你真的想实现财务自由吗<br>在回答这个问题之前，我们先来看看成为百万富翁的概率有多大。在德国，百万富翁按下面的比例分布：<br>•74％是企业家；<br>•10％是高级管理人员（尤其是董事会层级）；<br>•10％是从业者（主要是医生、建筑师和律师）；<br>•5％是销售人员；<br>•1％是其他人员。<br>从中你能看出两种情况：首先，如果你不是企业家、不是董事会层级人员，你几乎没有可能成为百万富翁。</p><p>通向成功的道路上布满荆棘。只有一路前行，不惧怕错误，生活才会将五彩缤纷展示在我们面前。之后我们才会知道，这一切就是命运的安排。我们所经历的一切也都有其意义。我们所有的经验和经历都会化成一股力量，汇入我们正要完成的使命中。一切都有其意义。我们只需要识别出这些意义。我们所犯过的每一个错误，都会对我们有所帮助。每一个我们过去认识过的人，都会指引我们去认识新的人，获得新的机会。但是要识别出这其中的关联，主要还是在于我们自己。这一切都有一个前提：我们必须克服各种类型的恐惧，持续学习和成长。</p><p>要实现财务保障，你应该尽量选择低风险的投资项目。要实现财务安全，你就应该去寻找安全稳定的投资项目，长期平均收益率为12％的投资项目。要实现财务自由，你就应该将那一部分不需要用来实现财务安全的资本拿来冒险，一部分投入中度风险投资项目，另一部分投入高风险投资项目。<br>实现财务自由最重要的第一步工作是明智地做出决定。如果你（现在）不做决定，就意味着你已经做好了决定。你决定一切照旧，不做任何改变。<br>当你为自己定好一个目标，并制订出书面计划，你就已经成功了50％，因为：<br>1．目标拓宽你的机会意识；<br>2．目标为你指出解决问题的方向；<br>3．目标使你为了“赢”而去比赛；<br>4．你有了一个目标，一切都变得很重要。<br>我们绝不能屈服于满足感。<br>我们不应该成为从不犯错的人，而应该成为永不放弃的人。<br>他人可以短暂地阻止你，但只有你自己才可以永远地使自己停下来。<br>如果你不经常犯错，就表明你冒的风险不够，没有付出最大的努力。</p><p>你必须为自己创造出一种能促使你成功的环境 。<br>*你需要的是一个总是能提醒你记起你的高尚计划的环境。<br>我们都倾向于高估自己。我们认为自己已经强大到不会被熟人影响。但是我们从小就通过模仿来进行学习。大多情况下这是一种无意识的行为。我们的熟人和朋友对我们的影响远比我们所认为的要深，而且我们还意识不到。<br>与此同理的是：如果你身边都是比你贫穷的人，那么你就会停滞不前。如果你身边都是比你富有的人，那么你也会变得富有。<br>*你需要榜样人物，观察、分析和模仿他们的成功。<br>在每一个成功人士身上你都会发现，他们也有自己的榜样人物。他们使用过的“复制”成功的技巧，被称作对卓越的模仿 ——一个来自体育运动领域的概念。你可以轻易地找到榜样人物。看看谁是你所在领域中最优秀的人。获取与此人相关的所有信息，诸如书籍和报纸。找出他的电话号码，同他预约一次会面。这也许比你预想的要简单一些。<br>*你至少需要一名教练或导师 。<br>99％的杰出成功人士都有一名教练。在这一章中，我会向你讲述，一名教练如何改变你的人生。我的最后一位教练是亿万富翁。跟着这样的人学习6个月，你学到的东西比你正常学习10年的东西还要多。<br>*你需要一个专家 环境，一群你能够紧紧跟随的人，一群了解责任的概念、并且在自身所在领域属于大师级的人。</p><p>你永远不应该被那些不如你成功的人影响。否则，你被自身目标阻碍的风险就会特别大。这些人对你的计划及想法提出的反对意见，你也应该无视。<br>成功人士牢记以下箴言：<br>•那些没有亲身经历过的人没有权利给建议，你也绝对没有理由去听从他们的建议。<br>•如果你周围都是成功人士，想要成功很容易。<br>•想变得富有，你首先必须习惯坦然面对财富。最简单的方法就是，去结交成功人士。<br>•“判断一名君主是否才智兼备的最佳方法，就是观察他周围的臣子。”（尼科洛·马基雅维里）<br>•早在需要顾问之前，你就应该去为自己寻找优秀的顾问。<br>•当别人说的话对你来说完全无所谓时，便没有任何东西能阻挡你了。<br>•只向那些你想成为的人进行咨询。<br>也许你会反问自己，以上的这些观点会不会太极端了。同那些需要帮助的人相比，你的家庭和你的责任处于一种什么样的情况呢？处于对立面。<br>你将自己的生活驾驭得越成功，能帮助别人的面就越广。没有比与别人分享你获得的成功和财富更能给予你满足感的事情了。但是你不要把角色弄混了。你帮助别人时，就不应该听从那些获得你帮助的人给出的建议。</p><p>成长意味着自己控制整个过程。你自己决定受谁影响、向谁学习、学习什么：只模仿那些比你成功的人 。但你必须有意识和有选择地去做。</p><p>至少为自己找到一个你能模仿的榜样。<br>•尽量设法了解此人，尽可能多方位地观察此人。<br>•将你的观察记录下来，以书面形式确定你的模仿策略。<br>•尝试找出你的榜样在生活的5个领域——健康、关系、财务、人生意义和情感——是如何行动的。<br>•分别为生活的每一个重要领域找到一个榜样。<br>•对卓越的模仿意味着，从此以后你要有意识地控制你的学习过程。你会成为你自身未来的设计师。</p><p>习惯使你可以自动地、毫不费力地去做那些重要的、正确的事。而促使你养成习惯的关键就在于那些你周围的人。教练、榜样以及专家网络是三个决定的因素，能为你养成良好习惯和自律提供一臂之力。<br>一个能够掌控自己的人，其力量是无与伦比的。或者正如古人所说：“谁战胜别人，就是强大的。谁战胜自己，就是聪明的。”</p><p>你会获得一种自己学到了很棒的东西的感觉，于是你会这样坚持下去。你也可以集中精力去改善你的经济和生活，你可以运用这些理念来实现奇迹，为自己设计一场全新的人生。<br>如果你阅读这本书，仅仅是对自己说“多么棒的一本书啊——非常有趣的观点和技巧”，却不去进行任何一点实践，那么你和我都只是在浪费彼此的时间。<br>世界上有两种人。两者都从书中了解到苹果是很好的东西。两者都清楚这一谚语：‘一天一个苹果，病痛远离我。’其中一种人说：我需要更多的背景信息。另一种人马上去了最近的水果店买苹果。<br>“知识就是力量”这句格言实际上是错误的。正确的表述应该是：“知识运用起来才是力量。”所以想一想，哪一个目标是你想要马上实现的。<br>现在就开始一场新的无与伦比的旅行吧，一场也许会使你曾经有过的最大胆的梦想都黯然失色的旅行。正是如此，当我的导师走进我的生命时，我开始以本书中所写的原则为导向来生活。努力使你的生活成为一个杰作吧。</p><p>去使自己变得富有吧。去做一切对于你变得富有有帮助的必要之事。因为金钱使人快乐。也正因为金钱使人快乐，所以变得富有就应该是你的目标<br>•当你捐赠金钱时，你会使别人和自己感到快乐。<br>•当你拥有金钱时，你会获得一种安全感。<br>•随着你所拥有的金钱的增长，你能发现自身人格的成长。<br>•金钱使你拥有自由的生活。你可以做自己感兴趣的事情，你可以做符合自己天赋的事情，你可以做对别人有帮助的事情。<br>•借助金钱，你可以使自己及他人的才能获得更好的发展。<br>•只有拥有金钱，你才能阻止金钱成为生活中太过重要的事物。因为你拥有金钱做保障。<br>•金钱的作用是帮助你，而不是成为你的主要目标。<br>•你可以集中精力于那些对你而言很重要的事情。<br>•金钱能使你内心好的一面更多地显露，能让你拥有更广阔的思维。<br>•有钱才可能平衡生活。拥有金钱，你才能静下心来处理生活的其他方面。<br>•金钱使你的生活丰富多彩。你可以住在你想住的地方，结识你喜欢的人。<br>•有了金钱，你可以自由分配自己的时间。你不必因为某些事情再受到别人的安排，你可以追求自己的人生价值。<br>•金钱就是力量，因此，有了金钱你便也有了更多的机会去发挥出你良好的作用，促进他人的发展。<br>•有了金钱，你便可以更轻易地接近那些不允许你知足常乐，而是会鞭策你实现最优状态的人。</p><p>7年之后会有某个人出现在你的生活中。他会使用你的钥匙进入你的房子，使用你所有的物品，那些你辛苦得来的，好似心头肉一样的物品。<br>这个人会步步紧跟你。他会在你工作期间观察你，查看你的银行账单。他会阅读你的计划，看你今天做了些什么，还会监督你是否执行了计划，是否超额完成计划。当你对着镜子检讨自我时，这个人会望进你的眼睛里。<br>这个人就是你，就是你为自己塑造的人格。问题是：这究竟是一个什么样的人？他相信什么，做什么，他有什么样的信仰？这个人的周围都是些什么样的朋友，有谁爱他？他住在哪里，使他引以为傲的事情是什么？<br>你目前在向着哪个方向发展？在本书开头，你问过自己这个问题：如果我不去做任何改变，7年之后我会变成什么样？如果你不改变这一方向，你难道真的想要任自己的生活随意发展吗？</p><p>“预言未来的最佳方式就是清楚知道当前的情况。”因此你应该对自己保持诚实。读完本书之后，建议你抽出一点时间来思考一下未来的方向。<br>你想要走“不断学习和成长”这条道路吗？如果本书能够在这方面对你有所帮助，那么我表示十分感激。写信告诉我吧，我也会为你的成长感到高兴。也许未来某一天，我也会在书中写下你的成功故事。说不定我们会在某时某刻某地相遇，这样的概率还是很大的。那些引发奇迹的人也许是少数，但由于他们发展得如此之快，所以无处不在。</p><p>做完决定，你就应该去结交那些你们当中最优秀的人。去结交那些能引发奇迹的人，因为你应该去做对于实现目标有帮助的所有必要之事。去结交那些能实现成果，每天成长且能够帮助你的人。去结交那些从不允许你知足常乐，而是会不断鞭策你达到最好状态的人。仅仅接近这些人，你都会不断地感受到他们对你的促进力，使你继续发展，不断成长。能够接近这些人便是你想要获得的最大礼物。</p><p>接近这些人也使你快乐。如果你问人们生命中最美好的经历是什么，那么你一定经常听到这样的回答：他作为团队一员所做之事。成为团队中的一员，能促使你进步和成长。团队形成的竞争和合作环境是你个人无法营造的。</p><h2 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h2><h3 id="《Offer来了：Java面试核心知识点精讲（原理篇）》：https-book-douban-com-subject-34872163"><a href="#《Offer来了：Java面试核心知识点精讲（原理篇）》：https-book-douban-com-subject-34872163" class="headerlink" title="《Offer来了：Java面试核心知识点精讲（原理篇）》：https://book.douban.com/subject/34872163/"></a>《Offer来了：Java面试核心知识点精讲（原理篇）》：<a href="https://book.douban.com/subject/34872163/">https://book.douban.com/subject/34872163/</a></h3><p>其实看到这本书的标题我一开始是拒绝了，一直认为打着面试这种标题的书不是一个手艺人该看的书，更不是一本深藏着智慧的书。</p><p>但是出于之前对哪吒的偏见，再加上买了这么多本绘本也应该买本技术书，不然有点良心不安哪，其实主要是因为后者😝。我决定看一下简介和目录。出乎意料的是，作者的目录结构非常有条理性，从目录来看对基础的解读可谓是不遗余力。我认为个人技术的成长的关键最重要的并不是从1到999，而是从0到1的过程，并不是说到999简单，而是没有从0到1的阶段，根本没有选择到999的机会。本着会则加深印象，不会则让师傅领进门的想法买下这本书，具体等看完再做结论。</p><p>目录是书的大纲，也是作者观点的归纳核心。而编程又是极具条理性的艺术，按大纲来读书，料能事半功倍。</p><h4 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h4><h5 id="JVM的运行机制"><a href="#JVM的运行机制" class="headerlink" title="JVM的运行机制"></a>JVM的运行机制</h5><h5 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h5><h5 id="JVM的内存区域"><a href="#JVM的内存区域" class="headerlink" title="JVM的内存区域"></a>JVM的内存区域</h5><h5 id="JVM的运行时内存"><a href="#JVM的运行时内存" class="headerlink" title="JVM的运行时内存"></a>JVM的运行时内存</h5><h5 id="垃圾回收与算法"><a href="#垃圾回收与算法" class="headerlink" title="垃圾回收与算法"></a>垃圾回收与算法</h5><h5 id="Java中的4种引用类型"><a href="#Java中的4种引用类型" class="headerlink" title="Java中的4种引用类型"></a>Java中的4种引用类型</h5><h5 id="分代收集算法和分区收集算法"><a href="#分代收集算法和分区收集算法" class="headerlink" title="分代收集算法和分区收集算法"></a>分代收集算法和分区收集算法</h5><h5 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h5><h5 id="Java网络编程模型"><a href="#Java网络编程模型" class="headerlink" title="Java网络编程模型"></a>Java网络编程模型</h5><h5 id="JVM的类加载机制"><a href="#JVM的类加载机制" class="headerlink" title="JVM的类加载机制"></a>JVM的类加载机制</h5><h4 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h4><h5 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h5><h5 id="异常分类及处理"><a href="#异常分类及处理" class="headerlink" title="异常分类及处理"></a>异常分类及处理</h5><h5 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h5><h5 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h5><h5 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h5><h5 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h5><h5 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h5><h4 id="Java并发编程"><a href="#Java并发编程" class="headerlink" title="Java并发编程"></a>Java并发编程</h4><h5 id="Java线程的创建方式"><a href="#Java线程的创建方式" class="headerlink" title="Java线程的创建方式"></a>Java线程的创建方式</h5><h5 id="线程池的工作原理"><a href="#线程池的工作原理" class="headerlink" title="线程池的工作原理"></a>线程池的工作原理</h5><h5 id="5种常用的线程池"><a href="#5种常用的线程池" class="headerlink" title="5种常用的线程池"></a>5种常用的线程池</h5><h5 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h5><h5 id="线程的基本方法"><a href="#线程的基本方法" class="headerlink" title="线程的基本方法"></a>线程的基本方法</h5><h5 id="Java中的锁"><a href="#Java中的锁" class="headerlink" title="Java中的锁"></a>Java中的锁</h5><h5 id="线程上下文切换"><a href="#线程上下文切换" class="headerlink" title="线程上下文切换"></a>线程上下文切换</h5><h5 id="Java阻塞队列"><a href="#Java阻塞队列" class="headerlink" title="Java阻塞队列"></a>Java阻塞队列</h5><h5 id="Java并发关键字"><a href="#Java并发关键字" class="headerlink" title="Java并发关键字"></a>Java并发关键字</h5><h5 id="多线程如何共享数据"><a href="#多线程如何共享数据" class="headerlink" title="多线程如何共享数据"></a>多线程如何共享数据</h5><h5 id="ConcurrentHashMap并发"><a href="#ConcurrentHashMap并发" class="headerlink" title="ConcurrentHashMap并发"></a>ConcurrentHashMap并发</h5><h5 id="Java中的线程调度"><a href="#Java中的线程调度" class="headerlink" title="Java中的线程调度"></a>Java中的线程调度</h5><h5 id="进程调度算法"><a href="#进程调度算法" class="headerlink" title="进程调度算法"></a>进程调度算法</h5><h5 id="什么是CAS"><a href="#什么是CAS" class="headerlink" title="什么是CAS"></a>什么是CAS</h5><h5 id="ABA问题"><a href="#ABA问题" class="headerlink" title="ABA问题"></a>ABA问题</h5><h5 id="什么是AQS"><a href="#什么是AQS" class="headerlink" title="什么是AQS"></a>什么是AQS</h5><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><h5 id="栈及其Java实现"><a href="#栈及其Java实现" class="headerlink" title="栈及其Java实现"></a>栈及其Java实现</h5><h5 id="队列及其Java实现"><a href="#队列及其Java实现" class="headerlink" title="队列及其Java实现"></a>队列及其Java实现</h5><h5 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h5><h5 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h5><h5 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h5><h5 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h5><h5 id="图"><a href="#图" class="headerlink" title="图"></a>图</h5><h5 id="位图"><a href="#位图" class="headerlink" title="位图"></a>位图</h5><h4 id="Java中的常用算法"><a href="#Java中的常用算法" class="headerlink" title="Java中的常用算法"></a>Java中的常用算法</h4><h5 id="二分查找算法"><a href="#二分查找算法" class="headerlink" title="二分查找算法"></a>二分查找算法</h5><h5 id="冒泡排序算法"><a href="#冒泡排序算法" class="headerlink" title="冒泡排序算法"></a>冒泡排序算法</h5><h5 id="插入排序算法"><a href="#插入排序算法" class="headerlink" title="插入排序算法"></a>插入排序算法</h5><h5 id="快速排序算法"><a href="#快速排序算法" class="headerlink" title="快速排序算法"></a>快速排序算法</h5><h5 id="希尔排序算法"><a href="#希尔排序算法" class="headerlink" title="希尔排序算法"></a>希尔排序算法</h5><h5 id="归并排序算法"><a href="#归并排序算法" class="headerlink" title="归并排序算法"></a>归并排序算法</h5><h5 id="桶排序算法"><a href="#桶排序算法" class="headerlink" title="桶排序算法"></a>桶排序算法</h5><h5 id="基数排序算法"><a href="#基数排序算法" class="headerlink" title="基数排序算法"></a>基数排序算法</h5><h5 id="其他算法"><a href="#其他算法" class="headerlink" title="其他算法"></a>其他算法</h5><h4 id="网络与负载均衡"><a href="#网络与负载均衡" class="headerlink" title="网络与负载均衡"></a>网络与负载均衡</h4><h5 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h5><h5 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h5><h4 id="数据库及分布式事务"><a href="#数据库及分布式事务" class="headerlink" title="数据库及分布式事务"></a>数据库及分布式事务</h4><h5 id="数据库的基本概念及原则"><a href="#数据库的基本概念及原则" class="headerlink" title="数据库的基本概念及原则"></a>数据库的基本概念及原则</h5><h5 id="数据库的并发操作和锁"><a href="#数据库的并发操作和锁" class="headerlink" title="数据库的并发操作和锁"></a>数据库的并发操作和锁</h5><h5 id="数据库分布式事务"><a href="#数据库分布式事务" class="headerlink" title="数据库分布式事务"></a>数据库分布式事务</h5><h4 id="分布式缓存的原理及应用"><a href="#分布式缓存的原理及应用" class="headerlink" title="分布式缓存的原理及应用"></a>分布式缓存的原理及应用</h4><h5 id="分布式缓存介绍"><a href="#分布式缓存介绍" class="headerlink" title="分布式缓存介绍"></a>分布式缓存介绍</h5><h5 id="Ehcache的原理及应用"><a href="#Ehcache的原理及应用" class="headerlink" title="Ehcache的原理及应用"></a>Ehcache的原理及应用</h5><h5 id="Redis的原理及应用"><a href="#Redis的原理及应用" class="headerlink" title="Redis的原理及应用"></a>Redis的原理及应用</h5><h5 id="分布式缓存设计的核心问题"><a href="#分布式缓存设计的核心问题" class="headerlink" title="分布式缓存设计的核心问题"></a>分布式缓存设计的核心问题</h5><h4 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h4><h5 id="设计模式简介"><a href="#设计模式简介" class="headerlink" title="设计模式简介"></a>设计模式简介</h5><h5 id="工厂模式的概念及Java实现"><a href="#工厂模式的概念及Java实现" class="headerlink" title="工厂模式的概念及Java实现"></a>工厂模式的概念及Java实现</h5><h5 id="抽象工厂模式的概念及Java实现"><a href="#抽象工厂模式的概念及Java实现" class="headerlink" title="抽象工厂模式的概念及Java实现"></a>抽象工厂模式的概念及Java实现</h5><h5 id="单例模式的概念及Java实现"><a href="#单例模式的概念及Java实现" class="headerlink" title="单例模式的概念及Java实现"></a>单例模式的概念及Java实现</h5><h5 id="建造者模式的概念及Java实现"><a href="#建造者模式的概念及Java实现" class="headerlink" title="建造者模式的概念及Java实现"></a>建造者模式的概念及Java实现</h5><h5 id="原型模式的概念及Java实现"><a href="#原型模式的概念及Java实现" class="headerlink" title="原型模式的概念及Java实现"></a>原型模式的概念及Java实现</h5><h5 id="适配器模式的概念及Java实现"><a href="#适配器模式的概念及Java实现" class="headerlink" title="适配器模式的概念及Java实现"></a>适配器模式的概念及Java实现</h5><h5 id="装饰者模式的概念及Java实现"><a href="#装饰者模式的概念及Java实现" class="headerlink" title="装饰者模式的概念及Java实现"></a>装饰者模式的概念及Java实现</h5><h5 id="代理模式的概念及Java实现"><a href="#代理模式的概念及Java实现" class="headerlink" title="代理模式的概念及Java实现"></a>代理模式的概念及Java实现</h5><h5 id="外观模式的概念及Java实现"><a href="#外观模式的概念及Java实现" class="headerlink" title="外观模式的概念及Java实现"></a>外观模式的概念及Java实现</h5><h5 id="桥接模式的概念及Java实现"><a href="#桥接模式的概念及Java实现" class="headerlink" title="桥接模式的概念及Java实现"></a>桥接模式的概念及Java实现</h5><h5 id="组合模式的概念及Java实现"><a href="#组合模式的概念及Java实现" class="headerlink" title="组合模式的概念及Java实现"></a>组合模式的概念及Java实现</h5><h5 id="享元模式的概念及Java实现"><a href="#享元模式的概念及Java实现" class="headerlink" title="享元模式的概念及Java实现"></a>享元模式的概念及Java实现</h5><h5 id="策略模式的概念及Java实现"><a href="#策略模式的概念及Java实现" class="headerlink" title="策略模式的概念及Java实现"></a>策略模式的概念及Java实现</h5><h5 id="模板方法模式的概念及Java实现"><a href="#模板方法模式的概念及Java实现" class="headerlink" title="模板方法模式的概念及Java实现"></a>模板方法模式的概念及Java实现</h5><h5 id="观察者模式的概念及Java实现"><a href="#观察者模式的概念及Java实现" class="headerlink" title="观察者模式的概念及Java实现"></a>观察者模式的概念及Java实现</h5><h5 id="迭代器模式的概念及Java实现"><a href="#迭代器模式的概念及Java实现" class="headerlink" title="迭代器模式的概念及Java实现"></a>迭代器模式的概念及Java实现</h5><h5 id="责任链模式的概念及Java实现"><a href="#责任链模式的概念及Java实现" class="headerlink" title="责任链模式的概念及Java实现"></a>责任链模式的概念及Java实现</h5><h5 id="命令模式的概念及Java实现"><a href="#命令模式的概念及Java实现" class="headerlink" title="命令模式的概念及Java实现"></a>命令模式的概念及Java实现</h5><h5 id="备忘录模式的概念及Java实现"><a href="#备忘录模式的概念及Java实现" class="headerlink" title="备忘录模式的概念及Java实现"></a>备忘录模式的概念及Java实现</h5><h5 id="状态模式的概念及Java实现"><a href="#状态模式的概念及Java实现" class="headerlink" title="状态模式的概念及Java实现"></a>状态模式的概念及Java实现</h5><h5 id="访问者模式的概念及Java实现"><a href="#访问者模式的概念及Java实现" class="headerlink" title="访问者模式的概念及Java实现"></a>访问者模式的概念及Java实现</h5><h5 id="中介者模式的概念及Java实现"><a href="#中介者模式的概念及Java实现" class="headerlink" title="中介者模式的概念及Java实现"></a>中介者模式的概念及Java实现</h5><h5 id="解释器模式的概念及Java实现"><a href="#解释器模式的概念及Java实现" class="headerlink" title="解释器模式的概念及Java实现"></a>解释器模式的概念及Java实现</h5>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>使用频率最高的top5000单词</title>
    <link href="/2021/01/07/2020-02-20-english/"/>
    <url>/2021/01/07/2020-02-20-english/</url>
    
    <content type="html"><![CDATA[<p>   the<br>   be<br>   and<br>   of<br>   a<br>   in<br>   to<br>   have<br>   to<br>   it<br>   I<br>   that<br>   for<br>   you<br>   he<br>   with<br>   on<br>   do<br>   say<br>   this<br>   they<br>   at<br>   but<br>   we<br>   his<br>   from<br>   that<br>   not<br>   n’t<br>   by<br>   she<br>   or<br>   as<br>   what<br>   go<br>   their<br>   can<br>   who<br>   get<br>   if<br>   would<br>   her<br>   all<br>   my<br>   make<br>   about<br>   know<br>   will<br>   as<br>   up<br>   one<br>   time<br>   there<br>   year<br>   so<br>   think<br>   when<br>   which<br>   them<br>   some<br>   me<br>   people<br>   take<br>   out<br>   into<br>   just<br>   see<br>   him<br>   your<br>   come<br>   could<br>   now<br>   than<br>   like<br>   other<br>   how<br>   then<br>   its<br>   our<br>   two<br>   more<br>   these<br>   want<br>   way<br>   look<br>   first<br>   also<br>   new<br>   because<br>   day<br>   more<br>   use<br>   no<br>   man<br>   find<br>   here<br>   thing<br>   give<br>   many<br>   well<br>   only<br>   those<br>   tell<br>   one<br>   very<br>   her<br>   even<br>   back<br>   any<br>   good<br>   woman<br>   through<br>   us<br>   life<br>   child<br>   there<br>   work<br>   down<br>   may<br>   after<br>   should<br>   call<br>   world<br>   over<br>   school<br>   still<br>   try<br>   in<br>   as<br>   last<br>   ask<br>   need<br>   too<br>   feel<br>   three<br>   when<br>   state<br>   never<br>   become<br>   between<br>   high<br>   really<br>   something<br>   most<br>   another<br>   much<br>   family<br>   own<br>   out<br>   leave<br>   put<br>   old<br>   while<br>   mean<br>   on<br>   keep<br>   student<br>   why<br>   let<br>   great<br>   same<br>   big<br>   group<br>   begin<br>   seem<br>   country<br>   help<br>   talk<br>   where<br>   turn<br>   problem<br>   every<br>   start<br>   hand<br>   might<br>   American<br>   show<br>   part<br>   about<br>   against<br>   place<br>   over<br>   such<br>   again<br>   few<br>   case<br>   most<br>   week<br>   company<br>   where<br>   system<br>   each<br>   right<br>   program<br>   hear<br>   so<br>   question<br>   during<br>   work<br>   play<br>   government<br>   run<br>   small<br>   number<br>   off<br>   always<br>   move<br>   like<br>   night<br>   live<br>   Mr<br>   point<br>   believe<br>   hold<br>   today<br>   bring<br>   happen<br>   next<br>   without<br>   before<br>   large<br>   all<br>   million<br>   must<br>   home<br>   under<br>   water<br>   room<br>   write<br>   mother<br>   area<br>   national<br>   money<br>   story<br>   young<br>   fact<br>   month<br>   different<br>   lot<br>   right<br>   study<br>   book<br>   eye<br>   job<br>   word<br>   though<br>   business<br>   issue<br>   side<br>   kind  </p><hr><p>   four<br>   head<br>   far<br>   black<br>   long<br>   both<br>   little<br>   house<br>   yes<br>   after<br>   since<br>   long<br>   provide<br>   service<br>   around<br>   friend<br>   important<br>   father<br>   sit<br>   away<br>   until<br>   power<br>   hour<br>   game<br>   often<br>   yet<br>   line<br>   political<br>   end<br>   among<br>   ever<br>   stand<br>   bad<br>   lose<br>   however<br>   member<br>   pay<br>   law<br>   meet<br>   car<br>   city<br>   almost<br>   include<br>   continue<br>   set<br>   later<br>   community<br>   much<br>   name<br>   five<br>   once<br>   white<br>   least<br>   president<br>   learn<br>   real<br>   change<br>   team<br>   minute<br>   best<br>   several<br>   idea<br>   kid<br>   body<br>   information<br>   nothing<br>   ago<br>   right<br>   lead<br>   social<br>   understand<br>   whether<br>   back<br>   watch<br>   together<br>   follow<br>   around<br>   parent<br>   only<br>   stop<br>   face<br>   anything<br>   create<br>   public<br>   already<br>   speak<br>   others<br>   read<br>   level<br>   allow<br>   add<br>   office<br>   spend<br>   door<br>   health<br>   person<br>   art<br>   sure<br>   such<br>   war<br>   history<br>   party<br>   within<br>   grow<br>   result<br>   open<br>   change<br>   morning<br>   walk<br>   reason<br>   low<br>   win<br>   research<br>   girl<br>   guy<br>   early<br>   food<br>   before<br>   moment<br>   himself<br>   air<br>   teacher<br>   force<br>   offer<br>   enough<br>   both<br>   education<br>   across<br>   although<br>   remember<br>   foot<br>   second<br>   boy<br>   maybe<br>   toward<br>   able<br>   age<br>   off<br>   policy<br>   everything<br>   love<br>   process<br>   music<br>   including<br>   consider<br>   appear<br>   actually<br>   buy<br>   probably<br>   human<br>   wait<br>   serve<br>   market<br>   die<br>   send<br>   expect<br>   home<br>   sense<br>   build<br>   stay<br>   fall<br>   oh<br>   nation<br>   plan<br>   cut<br>   college<br>   interest<br>   death<br>   course<br>   someone<br>   experience<br>   behind<br>   reach<br>   local<br>   kill<br>   six<br>   remain<br>   effect<br>   use<br>   yeah<br>   suggest<br>   class<br>   control<br>   raise<br>   care<br>   perhaps<br>   little<br>   late<br>   hard<br>   field<br>   else<br>   pass<br>   former<br>   sell<br>   major<br>   sometimes<br>   require<br>   along<br>   development<br>   themselves<br>   report<br>   role<br>   better<br>   economic<br>   effort<br>   up<br>   decide<br>   rate<br>   strong<br>   possible<br>   heart<br>   drug<br>   show<br>   leader<br>   light<br>   voice<br>   wife<br>   whole<br>   police<br>   mind<br>   finally<br>   pull<br>   return<br>   free<br>   military<br>   price<br>   report<br>   less<br>   according<br>   decision<br>   explain<br>   son<br>   hope<br>   even<br>   develop<br>   view<br>   relationship<br>   carry<br>   town<br>   road<br>   drive<br>   arm<br>   true<br>   federal<br>   break<br>   better<br>   difference<br>   thank<br>   receive<br>   value<br>   international<br>   building<br>   action<br>   full<br>   model<br>   join<br>   season<br>   society<br>   because<br>   tax<br>   director<br>   early<br>   position<br>   player<br>   agree<br>   especially<br>   record<br>   pick<br>   wear<br>   paper<br>   special<br>   space<br>   ground<br>   form<br>   support<br>   event<br>   official<br>   whose<br>   matter<br>   everyone<br>   center<br>   couple<br>   site<br>   end<br>   project<br>   hit<br>   base<br>   activity<br>   star<br>   table<br>   need<br>   court<br>   produce<br>   eat<br>   American<br>   teach<br>   oil<br>   half<br>   situation<br>   easy<br>   cost<br>   industry<br>   figure<br>   face<br>   street<br>   image<br>   itself<br>   phone<br>   either<br>   data<br>   cover<br>   quite<br>   picture<br>   clear<br>   practice<br>   piece<br>   land<br>   recent<br>   describe<br>   product<br>   doctor<br>   wall<br>   patient<br>   worker<br>   news<br>   test<br>   movie<br>   certain<br>   north<br>   love<br>   personal<br>   open<br>   support<br>   simply<br>   third<br>   technology<br>   catch<br>   step<br>   baby<br>   computer<br>   type<br>   attention<br>   draw<br>   film<br>   Republican<br>   tree<br>   source<br>   red<br>   nearly<br>   organization<br>   choose<br>   cause<br>   hair<br>   look<br>   point<br>   century<br>   evidence<br>   window<br>   difficult<br>   listen<br>   soon<br>   culture<br>   billion<br>   chance<br>   brother<br>   energy<br>   period<br>   course<br>   summer<br>   less<br>   realize<br>   hundred<br>   available<br>   plant<br>   likely<br>   opportunity<br>   term<br>   short<br>   letter<br>   condition<br>   choice<br>   place<br>   single<br>   rule<br>   daughter<br>   administration<br>   south<br>   husband<br>   Congress<br>   floor<br>   campaign<br>   material<br>   population<br>   well<br>   call<br>   economy<br>   medical<br>   hospital<br>   church<br>   close<br>   thousand<br>   risk<br>   current<br>   fire<br>   future<br>   wrong<br>   involve<br>   defense<br>   anyone<br>   increase<br>   security<br>   bank<br>   myself<br>   certainly<br>   west<br>   sport<br>   board<br>   seek<br>   per<br>   subject<br>   officer<br>   private<br>   rest<br>   behavior<br>   deal<br>   performance<br>   fight<br>   throw<br>   top<br>   quickly<br>   past<br>   goal<br>   second<br>   bed<br>   order<br>   author<br>   fill<br>   represent<br>   focus<br>   foreign<br>   drop<br>   plan<br>   blood<br>   upon<br>   agency<br>   push<br>   nature<br>   color<br>   no<br>   recently<br>   store<br>   reduce<br>   sound<br>   note<br>   fine<br>   before<br>   near<br>   movement<br>   page<br>   enter<br>   share<br>   than<br>   common<br>   poor<br>   other<br>   natural<br>   race<br>   concern<br>   series<br>   significant<br>   similar<br>   hot<br>   language<br>   each<br>   usually<br>   response<br>   dead<br>   rise<br>   animal<br>   factor<br>   decade<br>   article<br>   shoot<br>   east<br>   save<br>   seven<br>   artist<br>   away<br>   scene<br>   stock<br>   career<br>   despite<br>   central<br>   eight<br>   thus<br>   treatment<br>   beyond<br>   happy<br>   exactly<br>   protect<br>   approach<br>   lie<br>   size<br>   dog<br>   fund<br>   serious<br>   occur<br>   media<br>   ready<br>   sign<br>   thought<br>   list<br>   individual<br>   simple<br>   quality<br>   pressure<br>   accept<br>   answer<br>   hard<br>   resource<br>   identify<br>   left<br>   meeting<br>   determine<br>   prepare<br>   disease<br>   whatever<br>   success<br>   argue<br>   cup<br>   particularly<br>   amount<br>   ability<br>   staff<br>   recognize<br>   indicate<br>   character<br>   growth<br>   loss<br>   degree<br>   wonder<br>   attack<br>   herself<br>   region<br>   television<br>   box<br>   TV<br>   training<br>   pretty<br>   trade<br>   deal<br>   election<br>   everybody<br>   physical<br>   lay<br>   general<br>   feeling<br>   standard<br>   bill<br>   message<br>   fail<br>   outside<br>   arrive<br>   analysis<br>   benefit<br>   name<br>   sex<br>   forward<br>   lawyer<br>   present<br>   section<br>   environmental<br>   glass<br>   answer<br>   skill<br>   sister<br>   PM<br>   professor<br>   operation<br>   financial<br>   crime<br>   stage<br>   ok<br>   compare<br>   authority<br>   miss<br>   design<br>   sort<br>   one<br>   act<br>   ten<br>   knowledge<br>   gun<br>   station<br>   blue<br>   state<br>   strategy<br>   little<br>   clearly<br>   discuss<br>   indeed<br>   force<br>   truth<br>   song<br>   example<br>   democratic<br>   check<br>   environment<br>   leg<br>   dark<br>   public<br>   various<br>   rather<br>   laugh<br>   guess<br>   executive<br>   set<br>   study<br>   prove<br>   hang<br>   entire<br>   rock<br>   design<br>   enough<br>   forget<br>   since<br>   claim<br>   note<br>   remove<br>   manager<br>   help<br>   close<br>   sound<br>   enjoy<br>   network<br>   legal<br>   religious<br>   cold<br>   form<br>   final<br>   main<br>   science<br>   green<br>   memory<br>   card<br>   above<br>   seat<br>   cell<br>   establish<br>   nice<br>   trial<br>   expert<br>   that<br>   spring<br>   firm<br>   Democrat<br>   radio<br>   visit<br>   management<br>   care<br>   avoid<br>   imagine<br>   tonight<br>   huge<br>   ball<br>   no<br>   close<br>   finish<br>   yourself<br>   talk<br>   theory<br>   impact<br>   respond<br>   statement<br>   maintain<br>   charge<br>   popular<br>   traditional<br>   onto<br>   reveal<br>   direction<br>   weapon<br>   employee<br>   cultural<br>   contain<br>   peace<br>   head<br>   control<br>   base<br>   pain<br>   apply<br>   play<br>   measure<br>   wide<br>   shake<br>   fly<br>   interview<br>   manage<br>   chair<br>   fish<br>   particular<br>   camera<br>   structure<br>   politics<br>   perform<br>   bit<br>   weight<br>   suddenly<br>   discover<br>   candidate<br>   top<br>   production<br>   treat<br>   trip<br>   evening<br>   affect<br>   inside<br>   conference<br>   unit<br>   best<br>   style<br>   adult<br>   worry<br>   range<br>   mention<br>   rather<br>   far<br>   deep<br>   past<br>   edge<br>   individual<br>   specific<br>   writer<br>   trouble<br>   necessary<br>   throughout<br>   challenge<br>   fear<br>   shoulder<br>   institution<br>   middle<br>   sea<br>   dream<br>   bar<br>   beautiful<br>   property<br>   instead<br>   improve<br>   stuff<br>   detail<br>   method<br>   sign<br>   somebody<br>   magazine<br>   hotel<br>   soldier<br>   reflect<br>   heavy<br>   sexual<br>   cause<br>   bag<br>   heat<br>   fall<br>   marriage<br>   tough<br>   sing<br>   surface<br>   purpose<br>   exist<br>   pattern<br>   whom<br>   skin<br>   agent<br>   owner<br>   machine<br>   gas<br>   down<br>   ahead<br>   generation<br>   commercial<br>   address<br>   cancer<br>   test<br>   item<br>   reality<br>   coach<br>   step<br>   Mrs<br>   yard<br>   beat<br>   violence<br>   total<br>   tend<br>   investment<br>   discussion<br>   finger<br>   garden<br>   notice<br>   collection<br>   modern<br>   task<br>   partner<br>   positive<br>   civil<br>   kitchen<br>   consumer<br>   shot<br>   budget<br>   wish<br>   painting<br>   scientist<br>   safe<br>   agreement<br>   capital<br>   mouth<br>   nor<br>   victim<br>   newspaper<br>   instead<br>   threat<br>   responsibility<br>   smile<br>   attorney<br>   score<br>   account<br>   interesting<br>   break<br>   audience<br>   rich<br>   dinner<br>   figure<br>   vote<br>   western<br>   relate<br>   travel<br>   debate<br>   prevent<br>   citizen<br>   majority<br>   none<br>   front<br>   born<br>   admit<br>   senior<br>   assume<br>   wind<br>   key<br>   professional<br>   mission<br>   fast<br>   alone<br>   customer<br>   suffer<br>   speech<br>   successful<br>   option<br>   participant<br>   southern<br>   fresh<br>   eventually<br>   no<br>   forest<br>   video<br>   global<br>   Senate<br>   reform<br>   access<br>   restaurant<br>   judge<br>   publish<br>   cost<br>   relation<br>   like<br>   release<br>   own<br>   bird<br>   opinion<br>   credit<br>   critical<br>   corner<br>   concerned<br>   recall<br>   version<br>   stare<br>   safety<br>   effective<br>   neighborhood<br>   original<br>   act<br>   troop<br>   income<br>   directly<br>   hurt<br>   species<br>   immediately<br>   track<br>   basic<br>   strike<br>   hope<br>   sky<br>   freedom<br>   absolutely<br>   plane<br>   nobody<br>   achieve<br>   object<br>   attitude<br>   labor<br>   refer<br>   concept<br>   client<br>   powerful<br>   perfect<br>   nine<br>   therefore<br>   conduct<br>   announce<br>   conversation<br>   examine<br>   touch<br>   please<br>   attend<br>   completely<br>   vote<br>   variety<br>   sleep<br>   turn<br>   involved<br>   investigation<br>   nuclear<br>   researcher<br>   press<br>   conflict<br>   spirit<br>   experience<br>   replace<br>   British<br>   encourage<br>   argument<br>   by<br>   once<br>   camp<br>   brain<br>   feature<br>   afternoon<br>   AM<br>   weekend<br>   dozen<br>   possibility<br>   along<br>   insurance<br>   department<br>   battle<br>   beginning<br>   date<br>   generally<br>   African<br>   very<br>   sorry<br>   crisis<br>   complete<br>   fan<br>   stick<br>   define<br>   easily<br>   through<br>   hole<br>   element<br>   vision<br>   status<br>   normal<br>   Chinese<br>   ship<br>   solution<br>   stone<br>   slowly<br>   scale<br>   bit<br>   university<br>   introduce<br>   driver<br>   attempt<br>   park<br>   spot<br>   lack<br>   ice<br>   boat<br>   drink<br>   sun<br>   front<br>   distance<br>   wood<br>   handle<br>   truck<br>   return<br>   mountain<br>   survey<br>   supposed<br>   tradition<br>   winter<br>   village<br>   Soviet<br>   refuse<br>   sales<br>   roll<br>   communication<br>   run<br>   screen<br>   gain<br>   resident<br>   hide<br>   gold<br>   club<br>   future<br>   farm<br>   potential<br>   increase<br>   middle<br>   European<br>   presence<br>   independent<br>   district<br>   shape<br>   reader<br>   Ms<br>   contract<br>   crowd<br>   Christian<br>   express<br>   apartment<br>   willing<br>   strength<br>   previous<br>   band<br>   obviously<br>   horse<br>   interested<br>   target<br>   prison<br>   ride<br>   guard<br>   terms<br>   demand<br>   reporter<br>   deliver<br>   text<br>   share<br>   tool<br>   wild<br>   vehicle<br>   observe<br>   flight<br>   inside<br>   facility<br>   understanding<br>   average<br>   emerge<br>   advantage<br>   quick<br>   light<br>   leadership<br>   earn<br>   pound<br>   basis<br>   bright<br>   operate<br>   guest<br>   sample<br>   contribute<br>   tiny<br>   block<br>   protection<br>   settle<br>   feed<br>   collect<br>   additional<br>   while<br>   highly<br>   identity<br>   title<br>   mostly<br>   lesson<br>   faith<br>   river<br>   promote<br>   living<br>   present<br>   count<br>   unless<br>   marry<br>   tomorrow<br>   technique<br>   path<br>   ear<br>   shop<br>   folk<br>   order<br>   principle<br>   survive<br>   lift<br>   border<br>   competition<br>   jump<br>   gather<br>   limit<br>   fit<br>   claim<br>   cry<br>   equipment<br>   worth<br>   associate<br>   critic<br>   warm<br>   aspect<br>   result<br>   insist<br>   failure<br>   annual<br>   French<br>   Christmas<br>   comment<br>   responsible<br>   affair<br>   approach<br>   until<br>   procedure<br>   regular<br>   spread<br>   chairman<br>   baseball<br>   soft<br>   ignore<br>   egg<br>   measure<br>   belief<br>   demonstrate<br>   anybody<br>   murder<br>   gift<br>   religion<br>   review<br>   editor<br>   past<br>   engage<br>   coffee<br>   document<br>   speed<br>   cross<br>   influence<br>   anyway<br>   threaten<br>   commit<br>   female<br>   youth<br>   wave<br>   move<br>   afraid<br>   quarter<br>   background<br>   native<br>   broad<br>   wonderful<br>   deny<br>   apparently<br>   slightly<br>   reaction<br>   twice<br>   suit<br>   perspective<br>   growing<br>   blow<br>   construction<br>   kind<br>   intelligence<br>   destroy<br>   cook<br>   connection<br>   charge<br>   burn<br>   shoe<br>   view<br>   grade<br>   context<br>   committee<br>   hey<br>   mistake<br>   focus<br>   smile<br>   location<br>   clothes<br>   Indian<br>   quiet<br>   dress<br>   promise<br>   aware<br>   neighbor<br>   complete<br>   drive<br>   function<br>   bone<br>   active<br>   extend<br>   chief<br>   average<br>   combine<br>   wine<br>   below<br>   cool<br>   voter<br>   mean<br>   demand<br>   learning<br>   bus<br>   hell<br>   dangerous<br>   remind<br>   moral<br>   United<br>   category<br>   relatively<br>   victory<br>   key<br>   academic<br>   visit<br>   Internet<br>   healthy<br>   fire<br>   negative<br>   following<br>   historical<br>   medicine<br>   tour<br>   depend<br>   photo<br>   finding<br>   grab<br>   direct<br>   classroom<br>   contact<br>   justice<br>   participate<br>   daily<br>   fair<br>   pair<br>   famous<br>   exercise<br>   knee<br>   flower<br>   tape<br>   hire<br>   familiar<br>   appropriate<br>   supply<br>   fully<br>   cut<br>   will<br>   actor<br>   birth<br>   search<br>   tie<br>   democracy<br>   eastern<br>   primary<br>   yesterday<br>   circle<br>   device<br>   progress<br>   next<br>   front<br>   bottom<br>   island<br>   exchange<br>   clean<br>   studio<br>   train<br>   lady<br>   colleague<br>   application<br>   neck<br>   lean<br>   damage<br>   plastic<br>   tall<br>   plate<br>   hate<br>   otherwise<br>   writing<br>   press<br>   male<br>   start<br>   alive<br>   expression<br>   football<br>   intend<br>   attack<br>   chicken<br>   army<br>   abuse<br>   theater<br>   shut<br>   map<br>   extra<br>   session<br>   danger<br>   welcome<br>   domestic<br>   lots<br>   literature<br>   rain<br>   desire<br>   assessment<br>   injury<br>   respect<br>   northern<br>   nod<br>   paint<br>   fuel<br>   leaf<br>   direct<br>   dry<br>   Russian<br>   instruction<br>   fight<br>   pool<br>   climb<br>   sweet<br>   lead<br>   engine<br>   fourth<br>   salt<br>   expand<br>   importance<br>   metal<br>   fat<br>   ticket<br>   software<br>   disappear<br>   corporate<br>   strange<br>   lip<br>   reading<br>   urban<br>   mental<br>   increasingly<br>   lunch<br>   educational<br>   somewhere<br>   farmer<br>   above<br>   sugar<br>   planet<br>   favorite<br>   explore<br>   obtain<br>   enemy<br>   greatest<br>   complex<br>   surround<br>   athlete<br>   invite<br>   repeat<br>   carefully<br>   soul<br>   scientific<br>   impossible<br>   panel<br>   meaning<br>   mom<br>   married<br>   alone<br>   instrument<br>   predict<br>   weather<br>   presidential<br>   emotional<br>   commitment<br>   Supreme<br>   bear<br>   pocket<br>   thin<br>   temperature<br>   surprise<br>   poll<br>   proposal<br>   consequence<br>   half<br>   breath<br>   sight<br>   cover<br>   balance<br>   adopt<br>   minority<br>   straight<br>   attempt<br>   connect<br>   works<br>   teaching<br>   belong<br>   aid<br>   advice<br>   okay<br>   photograph<br>   empty<br>   regional<br>   trail<br>   novel<br>   code<br>   somehow<br>   organize<br>   jury<br>   breast<br>   Iraqi<br>   human<br>   acknowledge<br>   theme<br>   storm<br>   union<br>   record<br>   desk<br>   fear<br>   thanks<br>   fruit<br>   under<br>   expensive<br>   yellow<br>   conclusion<br>   prime<br>   shadow<br>   struggle<br>   conclude<br>   analyst<br>   dance<br>   limit<br>   like<br>   regulation<br>   being<br>   last<br>   ring<br>   largely<br>   shift<br>   revenue<br>   mark<br>   locate<br>   county<br>   appearance<br>   package<br>   difficulty<br>   bridge<br>   recommend<br>   obvious<br>   train<br>   basically<br>   e-mail<br>   generate<br>   anymore<br>   propose<br>   thinking<br>   possibly<br>   trend<br>   visitor<br>   loan<br>   currently<br>   comfortable<br>   investor<br>   but<br>   profit<br>   angry<br>   crew<br>   deep<br>   accident<br>   male<br>   meal<br>   hearing<br>   traffic<br>   muscle<br>   notion<br>   capture<br>   prefer<br>   truly<br>   earth<br>   Japanese<br>   chest<br>   search<br>   thick<br>   cash<br>   museum<br>   beauty<br>   emergency<br>   unique<br>   feature<br>   internal<br>   ethnic<br>   link<br>   stress<br>   content<br>   select<br>   root<br>   nose<br>   declare<br>   outside<br>   appreciate<br>   actual<br>   bottle<br>   hardly<br>   setting<br>   launch<br>   dress<br>   file<br>   sick<br>   outcome<br>   ad<br>   defend<br>   matter<br>   judge<br>   duty<br>   sheet<br>   ought<br>   ensure<br>   Catholic<br>   extremely<br>   extent<br>   component<br>   mix<br>   long-term<br>   slow<br>   contrast<br>   zone<br>   wake<br>   challenge<br>   airport<br>   chief<br>   brown<br>   standard<br>   shirt<br>   pilot<br>   warn<br>   ultimately<br>   cat<br>   contribution<br>   capacity<br>   ourselves<br>   estate<br>   guide<br>   circumstance<br>   snow<br>   English<br>   politician<br>   steal<br>   pursue<br>   slip<br>   percentage<br>   meat<br>   funny<br>   neither<br>   soil<br>   influence<br>   surgery<br>   correct<br>   Jewish<br>   blame<br>   estimate<br>   due<br>   basketball<br>   late<br>   golf<br>   investigate<br>   crazy<br>   significantly<br>   chain<br>   address<br>   branch<br>   combination<br>   just<br>   frequently<br>   governor<br>   relief<br>   user<br>   dad<br>   kick<br>   part<br>   manner<br>   ancient<br>   silence<br>   rating<br>   golden<br>   motion<br>   German<br>   gender<br>   solve<br>   fee<br>   landscape<br>   used<br>   bowl<br>   equal<br>   long<br>   official<br>   forth<br>   frame<br>   typical<br>   except<br>   conservative<br>   eliminate<br>   host<br>   hall<br>   trust<br>   ocean<br>   score<br>   row<br>   producer<br>   afford<br>   meanwhile<br>   regime<br>   division<br>   confirm<br>   fix<br>   appeal<br>   mirror<br>   tooth<br>   smart<br>   length<br>   entirely<br>   rely<br>   topic<br>   complain<br>   issue<br>   variable<br>   back<br>   range<br>   telephone<br>   perception<br>   attract<br>   confidence<br>   bedroom<br>   secret<br>   debt<br>   rare<br>   his<br>   tank<br>   nurse<br>   coverage<br>   opposition<br>   aside<br>   anywhere<br>   bond<br>   file<br>   pleasure<br>   master<br>   era<br>   requirement<br>   check<br>   stand<br>   fun<br>   expectation<br>   wing<br>   separate<br>   now<br>   clear<br>   struggle<br>   mean<br>   somewhat<br>   pour<br>   stir<br>   judgment<br>   clean<br>   except<br>   beer<br>   English<br>   reference<br>   tear<br>   doubt<br>   grant<br>   seriously<br>   account<br>   minister<br>   totally<br>   hero<br>   industrial<br>   cloud<br>   stretch<br>   winner<br>   volume<br>   travel<br>   seed<br>   surprised<br>   rest<br>   fashion<br>   pepper<br>   separate<br>   busy<br>   intervention<br>   copy<br>   tip<br>   below<br>   cheap<br>   aim<br>   cite<br>   welfare<br>   vegetable<br>   gray<br>   dish<br>   beach<br>   improvement<br>   everywhere<br>   opening<br>   overall<br>   divide<br>   initial<br>   terrible<br>   oppose<br>   contemporary<br>   route<br>   multiple<br>   essential<br>   question<br>   league<br>   criminal<br>   careful<br>   core<br>   upper<br>   rush<br>   necessarily<br>   specifically<br>   tired<br>   rise<br>   tie<br>   employ<br>   holiday<br>   dance<br>   vast<br>   resolution<br>   household<br>   fewer<br>   abortion<br>   apart<br>   witness<br>   match<br>   barely<br>   sector<br>   representative<br>   lack<br>   beneath<br>   beside<br>   black<br>   incident<br>   limited<br>   proud<br>   flow<br>   faculty<br>   increased<br>   waste<br>   merely<br>   mass<br>   emphasize<br>   experiment<br>   definitely<br>   bomb<br>   enormous<br>   tone<br>   liberal<br>   massive<br>   engineer<br>   wheel<br>   female<br>   decline<br>   invest<br>   promise<br>   cable<br>   towards<br>   expose<br>   rural<br>   AIDS<br>   Jew<br>   narrow<br>   cream<br>   secretary<br>   gate<br>   solid<br>   hill<br>   typically<br>   noise<br>   grass<br>   unfortunately<br>   hat<br>   legislation<br>   succeed<br>   either<br>   celebrate<br>   achievement<br>   fishing<br>   drink<br>   accuse<br>   hand<br>   useful<br>   land<br>   secret<br>   reject<br>   talent<br>   taste<br>   characteristic<br>   milk<br>   escape<br>   cast<br>   sentence<br>   unusual<br>   closely<br>   convince<br>   height<br>   physician<br>   assess<br>   sleep<br>   plenty<br>   ride<br>   virtually<br>   first<br>   addition<br>   sharp<br>   creative<br>   lower<br>   behind<br>   approve<br>   explanation<br>   outside<br>   gay<br>   campus<br>   proper<br>   live<br>   guilty<br>   living<br>   acquire<br>   compete<br>   technical<br>   plus<br>   mind<br>   potential<br>   immigrant<br>   weak<br>   illegal<br>   hi<br>   alternative<br>   interaction<br>   column<br>   personality<br>   signal<br>   curriculum<br>   list<br>   honor<br>   passenger<br>   assistance<br>   forever<br>   fun<br>   regard<br>   Israeli<br>   association<br>   twenty<br>   knock<br>   review<br>   wrap<br>   lab<br>   offer<br>   display<br>   criticism<br>   asset<br>   depression<br>   spiritual<br>   musical<br>   journalist<br>   prayer<br>   suspect<br>   scholar<br>   warning<br>   climate<br>   cheese<br>   observation<br>   childhood<br>   payment<br>   sir<br>   permit<br>   cigarette<br>   definition<br>   priority<br>   bread<br>   creation<br>   graduate<br>   request<br>   emotion<br>   scream<br>   dramatic<br>   universe<br>   gap<br>   excellent<br>   deeply<br>   prosecutor<br>   mark<br>   green<br>   lucky<br>   drag<br>   airline<br>   library<br>   agenda<br>   recover<br>   factory<br>   selection<br>   primarily<br>   roof<br>   unable<br>   expense<br>   initiative<br>   diet<br>   arrest<br>   funding<br>   therapy<br>   wash<br>   schedule<br>   sad<br>   brief<br>   housing<br>   post<br>   purchase<br>   existing<br>   dark<br>   steel<br>   regarding<br>   shout<br>   remaining<br>   visual<br>   fairly<br>   chip<br>   violent<br>   silent<br>   suppose<br>   self<br>   bike<br>   tea<br>   perceive<br>   comparison<br>   settlement<br>   layer<br>   planning<br>   far<br>   description<br>   later<br>   slow<br>   slide<br>   widely<br>   wedding<br>   inform<br>   portion<br>   territory<br>   immediate<br>   opponent<br>   abandon<br>   link<br>   mass<br>   lake<br>   transform<br>   tension<br>   display<br>   leading<br>   bother<br>   consist<br>   alcohol<br>   enable<br>   bend<br>   saving<br>   gain<br>   desert<br>   shall<br>   error<br>   release<br>   cop<br>   Arab<br>   double<br>   walk<br>   sand<br>   Spanish<br>   rule<br>   hit<br>   print<br>   preserve<br>   passage<br>   formal<br>   transition<br>   existence<br>   album<br>   participation<br>   arrange<br>   atmosphere<br>   joint<br>   reply<br>   cycle<br>   opposite<br>   lock<br>   whole<br>   deserve<br>   consistent<br>   resistance<br>   discovery<br>   tear<br>   exposure<br>   pose<br>   stream<br>   sale<br>   trust<br>   benefit<br>   pot<br>   grand<br>   mine<br>   hello<br>   coalition<br>   tale<br>   knife<br>   resolve<br>   racial<br>   phase<br>   present<br>   joke<br>   coat<br>   Mexican<br>   symptom<br>   contact<br>   manufacturer<br>   philosophy<br>   potato<br>   interview<br>   foundation<br>   quote<br>   online<br>   pass<br>   negotiation<br>   good<br>   urge<br>   occasion<br>   dust<br>   breathe<br>   elect<br>   investigator<br>   jacket<br>   glad<br>   ordinary<br>   reduction<br>   rarely<br>   shift<br>   pack<br>   suicide<br>   numerous<br>   touch<br>   substance<br>   discipline<br>   elsewhere<br>   iron<br>   practical<br>   moreover<br>   passion<br>   volunteer<br>   implement<br>   essentially<br>   gene<br>   enforcement<br>   vs<br>   sauce<br>   independence<br>   marketing<br>   priest<br>   amazing<br>   intense<br>   advance<br>   employer<br>   shock<br>   inspire<br>   adjust<br>   retire<br>   sure<br>   visible<br>   kiss<br>   illness<br>   cap<br>   habit<br>   competitive<br>   juice<br>   congressional<br>   involvement<br>   dominate<br>   previously<br>   whenever<br>   transfer<br>   analyze<br>   another<br>   attach<br>   for<br>   Indian<br>   disaster<br>   parking<br>   prospect<br>   boss<br>   complaint<br>   championship<br>   coach<br>   exercise<br>   fundamental<br>   severe<br>   enhance<br>   mystery<br>   impose<br>   poverty<br>   other<br>   entry<br>   fat<br>   spending<br>   king<br>   evaluate<br>   symbol<br>   still<br>   trade<br>   maker<br>   mood<br>   accomplish<br>   emphasis<br>   illustrate<br>   boot<br>   monitor<br>   Asian<br>   entertainment<br>   bean<br>   evaluation<br>   creature<br>   commander<br>   digital<br>   arrangement<br>   concentrate<br>   total<br>   usual<br>   anger<br>   psychological<br>   heavily<br>   peak<br>   approximately<br>   increasing<br>   disorder<br>   missile<br>   equally<br>   vary<br>   wire<br>   round<br>   distribution<br>   transportation<br>   holy<br>   ring<br>   twin<br>   command<br>   commission<br>   interpretation<br>   breakfast<br>   stop<br>   strongly<br>   engineering<br>   luck<br>   so-called<br>   constant<br>   race<br>   clinic<br>   veteran<br>   smell<br>   tablespoon<br>   capable<br>   nervous<br>   tourist<br>   light<br>   toss<br>   crucial<br>   bury<br>   pray<br>   tomato<br>   exception<br>   butter<br>   deficit<br>   bathroom<br>   objective<br>   block<br>   electronic<br>   ally<br>   journey<br>   reputation<br>   mixture<br>   surely<br>   tower<br>   smoke<br>   confront<br>   pure<br>   glance<br>   dimension<br>   toy<br>   prisoner<br>   fellow<br>   smooth<br>   nearby<br>   peer<br>   designer<br>   personnel<br>   shape<br>   educator<br>   relative<br>   immigration<br>   belt<br>   teaspoon<br>   birthday<br>   implication<br>   perfectly<br>   coast<br>   supporter<br>   accompany<br>   silver<br>   teenager<br>   recognition<br>   retirement<br>   flag<br>   recovery<br>   whisper<br>   watch<br>   gentleman<br>   corn<br>   moon<br>   inner<br>   junior<br>   rather<br>   throat<br>   salary<br>   swing<br>   observer<br>   due<br>   straight<br>   publication<br>   pretty<br>   crop<br>   dig<br>   strike<br>   permanent<br>   plant<br>   phenomenon<br>   anxiety<br>   unlike<br>   wet<br>   literally<br>   resist<br>   convention<br>   embrace<br>   supply<br>   assist<br>   exhibition<br>   construct<br>   viewer<br>   pan<br>   consultant<br>   soon<br>   line<br>   administrator<br>   date<br>   occasionally<br>   mayor<br>   consideration<br>   CEO<br>   secure<br>   pink<br>   smoke<br>   estimate<br>   buck<br>   historic<br>   poem<br>   grandmother<br>   bind<br>   fifth<br>   constantly<br>   enterprise<br>   favor<br>   testing<br>   stomach<br>   apparent<br>   weigh<br>   install<br>   sensitive<br>   suggestion<br>   mail<br>   recipe<br>   reasonable<br>   preparation<br>   wooden<br>   elementary<br>   concert<br>   aggressive<br>   false<br>   intention<br>   channel<br>   extreme<br>   tube<br>   drawing<br>   protein<br>   quit<br>   absence<br>   roll<br>   Latin<br>   rapidly<br>   jail<br>   comment<br>   diversity<br>   honest<br>   Palestinian<br>   pace<br>   employment<br>   speaker<br>   impression<br>   essay<br>   respondent<br>   giant<br>   cake<br>   historian<br>   negotiate<br>   restore<br>   substantial<br>   pop<br>   particular<br>   specialist<br>   origin<br>   approval<br>   mine<br>   quietly<br>   advise<br>   conventional<br>   drop<br>   count<br>   depth<br>   wealth<br>   disability<br>   shell<br>   general<br>   criticize<br>   fast<br>   professional<br>   effectively<br>   biological<br>   pack<br>   onion<br>   deputy<br>   flat<br>   brand<br>   assure<br>   mad<br>   award<br>   criteria<br>   dealer<br>   via<br>   alternative<br>   utility<br>   precisely<br>   arise<br>   armed<br>   nevertheless<br>   highway<br>   clinical<br>   routine<br>   schedule<br>   wage<br>   normally<br>   phrase<br>   ingredient<br>   stake<br>   Muslim<br>   dream<br>   fiber<br>   activist<br>   Islamic<br>   snap<br>   terrorism<br>   refugee<br>   incorporate<br>   hip<br>   ultimate<br>   switch<br>   corporation<br>   valuable<br>   assumption<br>   gear<br>   graduate<br>   barrier<br>   minor<br>   provision<br>   killer<br>   assign<br>   gang<br>   developing<br>   classic<br>   chemical<br>   wave<br>   label<br>   teen<br>   index<br>   vacation<br>   advocate<br>   draft<br>   extraordinary<br>   heaven<br>   rough<br>   yell<br>   pregnant<br>   distant<br>   drama<br>   satellite<br>   personally<br>   wonder<br>   clock<br>   chocolate<br>   Italian<br>   Canadian<br>   ceiling<br>   sweep<br>   advertising<br>   universal<br>   spin<br>   house<br>   button<br>   bell<br>   rank<br>   darkness<br>   ahead<br>   clothing<br>   super<br>   yield<br>   fence<br>   portrait<br>   paint<br>   survival<br>   roughly<br>   lawsuit<br>   bottom<br>   testimony<br>   bunch<br>   beat<br>   wind<br>   found<br>   burden<br>   react<br>   chamber<br>   furniture<br>   cooperation<br>   string<br>   ceremony<br>   communicate<br>   taste<br>   cheek<br>   lost<br>   profile<br>   mechanism<br>   disagree<br>   like<br>   penalty<br>   match<br>   ie<br>   advance<br>   resort<br>   destruction<br>   bear<br>   unlikely<br>   tissue<br>   constitutional<br>   pant<br>   stranger<br>   infection<br>   cabinet<br>   broken<br>   apple<br>   electric<br>   proceed<br>   track<br>   bet<br>   literary<br>   virus<br>   stupid<br>   dispute<br>   fortune<br>   strategic<br>   assistant<br>   overcome<br>   remarkable<br>   occupy<br>   statistics<br>   shopping<br>   cousin<br>   encounter<br>   wipe<br>   initially<br>   blind<br>   white<br>   port<br>   honor<br>   electricity<br>   genetic<br>   adviser<br>   pay<br>   spokesman<br>   retain<br>   latter<br>   incentive<br>   slave<br>   chemical<br>   translate<br>   accurate<br>   whereas<br>   terror<br>   though<br>   expansion<br>   elite<br>   Olympic<br>   dirt<br>   odd<br>   rice<br>   bullet<br>   tight<br>   Bible<br>   chart<br>   solar<br>   decline<br>   conservative<br>   process<br>   square<br>   stick<br>   concentration<br>   complicated<br>   gently<br>   champion<br>   scenario<br>   telescope<br>   reflection<br>   revolution<br>   strip<br>   interpret<br>   friendly<br>   tournament<br>   fiction<br>   detect<br>   balance<br>   likely<br>   tremendous<br>   lifetime<br>   recommendation<br>   flow<br>   senator<br>   market<br>   hunting<br>   salad<br>   guarantee<br>   innocent<br>   boundary<br>   pause<br>   remote<br>   satisfaction<br>   journal<br>   bench<br>   lover<br>   raw<br>   awareness<br>   surprising<br>   withdraw<br>   general<br>   deck<br>   similarly<br>   newly<br>   pole<br>   testify<br>   mode<br>   dialogue<br>   imply<br>   naturally<br>   mutual<br>   founder<br>   top<br>   advanced<br>   pride<br>   dismiss<br>   aircraft<br>   delivery<br>   mainly<br>   bake<br>   freeze<br>   platform<br>   finance<br>   sink<br>   attractive<br>   respect<br>   diverse<br>   relevant<br>   ideal<br>   joy<br>   worth<br>   regularly<br>   working<br>   singer<br>   evolve<br>   shooting<br>   partly<br>   unknown<br>   assistant<br>   offense<br>   counter<br>   DNA<br>   smell<br>   potentially<br>   transfer<br>   thirty<br>   justify<br>   protest<br>   crash<br>   craft<br>   treaty<br>   terrorist<br>   insight<br>   possess<br>   politically<br>   tap<br>   lie<br>   extensive<br>   episode<br>   double<br>   swim<br>   tire<br>   fault<br>   loose<br>   free<br>   shortly<br>   originally<br>   considerable<br>   prior<br>   intellectual<br>   mix<br>   assault<br>   relax<br>   stair<br>   adventure<br>   external<br>   proof<br>   confident<br>   headquarters<br>   sudden<br>   dirty<br>   violation<br>   tongue<br>   license<br>   hold<br>   shelter<br>   rub<br>   controversy<br>   entrance<br>   favorite<br>   practice<br>   properly<br>   fade<br>   defensive<br>   tragedy<br>   net<br>   characterize<br>   funeral<br>   profession<br>   alter<br>   spot<br>   constitute<br>   establishment<br>   squeeze<br>   imagination<br>   target<br>   mask<br>   convert<br>   comprehensive<br>   prominent<br>   presentation<br>   regardless<br>   easy<br>   load<br>   stable<br>   introduction<br>   appeal<br>   pretend<br>   not<br>   elderly<br>   representation<br>   deer<br>   split<br>   violate<br>   partnership<br>   pollution<br>   emission<br>   steady<br>   vital<br>   neither<br>   fate<br>   earnings<br>   oven<br>   distinction<br>   segment<br>   nowhere<br>   poet<br>   mere<br>   exciting<br>   variation<br>   comfort<br>   radical<br>   stress<br>   adapt<br>   Irish<br>   honey<br>   correspondent<br>   pale<br>   musician<br>   significance<br>   load<br>   round<br>   vessel<br>   storage<br>   flee<br>   mm-hmm<br>   leather<br>   distribute<br>   evolution<br>   ill<br>   tribe<br>   shelf<br>   can<br>   grandfather<br>   lawn<br>   buyer<br>   dining<br>   wisdom<br>   council<br>   vulnerable<br>   instance<br>   garlic<br>   capability<br>   poetry<br>   celebrity<br>   gradually<br>   stability<br>   doubt<br>   fantasy<br>   scared<br>   guide<br>   plot<br>   framework<br>   gesture<br>   depending<br>   ongoing<br>   psychology<br>   since<br>   counselor<br>   witness<br>   chapter<br>   fellow<br>   divorce<br>   owe<br>   pipe<br>   athletic<br>   slight<br>   math<br>   shade<br>   tail<br>   sustain<br>   mount<br>   obligation<br>   angle<br>   palm<br>   differ<br>   custom<br>   store<br>   economist<br>   fifteen<br>   soup<br>   celebration<br>   efficient<br>   damage<br>   composition<br>   satisfy<br>   pile<br>   briefly<br>   carbon<br>   closer<br>   consume<br>   scheme<br>   crack<br>   frequency<br>   tobacco<br>   survivor<br>   besides<br>   in<br>   psychologist<br>   wealthy<br>   galaxy<br>   given<br>   fund<br>   ski<br>   limitation<br>   OK<br>   trace<br>   appointment<br>   preference<br>   meter<br>   explosion<br>   arrest<br>   publicly<br>   incredible<br>   fighter<br>   rapid<br>   admission<br>   hunter<br>   educate<br>   painful<br>   friendship<br>   aide<br>   infant<br>   calculate<br>   fifty<br>   rid<br>   porch<br>   tendency<br>   uniform<br>   formation<br>   scholarship<br>   reservation<br>   efficiency<br>   waste<br>   qualify<br>   mall<br>   derive<br>   scandal<br>   PC<br>   helpful<br>   impress<br>   heel<br>   resemble<br>   privacy<br>   fabric<br>   surprise<br>   contest<br>   proportion<br>   guideline<br>   rifle<br>   maintenance<br>   conviction<br>   trick<br>   organic<br>   tent<br>   examination<br>   publisher<br>   strengthen<br>   French<br>   proposed<br>   myth<br>   sophisticated<br>   cow<br>   etc<br>   standing<br>   asleep<br>   tennis<br>   nerve<br>   barrel<br>   bombing<br>   membership<br>   ratio<br>   menu<br>   purchase<br>   controversial<br>   desperate<br>   rate<br>   lifestyle<br>   humor<br>   loud<br>   glove<br>   suspect<br>   sufficient<br>   narrative<br>   photographer<br>   helicopter<br>   Catholic<br>   modest<br>   provider<br>   delay<br>   agricultural<br>   explode<br>   stroke<br>   scope<br>   punishment<br>   handful<br>   badly<br>   horizon<br>   curious<br>   downtown<br>   girlfriend<br>   prompt<br>   request<br>   cholesterol<br>   absorb<br>   adjustment<br>   taxpayer<br>   eager<br>   principal<br>   detailed<br>   motivation<br>   assignment<br>   restriction<br>   across<br>   Palestinian<br>   laboratory<br>   workshop<br>   differently<br>   auto<br>   romantic<br>   cotton<br>   motor<br>   sue<br>   flavor<br>   overlook<br>   float<br>   undergo<br>   sequence<br>   demonstration<br>   jet<br>   orange<br>   consumption<br>   assert<br>   blade<br>   temporary<br>   medication<br>   print<br>   cabin<br>   bite<br>   relative<br>   edition<br>   valley<br>   yours<br>   pitch<br>   pine<br>   brilliant<br>   versus<br>   manufacturing<br>   risk<br>   Christian<br>   complex<br>   absolute<br>   chef<br>   discrimination<br>   offensive<br>   German<br>   suit<br>   boom<br>   register<br>   appoint<br>   heritage<br>   God<br>   terrorist<br>   dominant<br>   successfully<br>   shit<br>   lemon<br>   hungry<br>   sense<br>   dry<br>   wander<br>   submit<br>   economics<br>   naked<br>   anticipate<br>   nut<br>   legacy<br>   extension<br>   shrug<br>   fly<br>   battery<br>   arrival<br>   legitimate<br>   orientation<br>   inflation<br>   cope<br>   flame<br>   cluster<br>   host<br>   wound<br>   dependent<br>   shower<br>   institutional<br>   depict<br>   operating<br>   flesh<br>   garage<br>   operator<br>   instructor<br>   collapse<br>   borrow<br>   furthermore<br>   comedy<br>   mortgage<br>   sanction<br>   civilian<br>   twelve<br>   weekly<br>   habitat<br>   grain<br>   brush<br>   consciousness<br>   devote<br>   crack<br>   measurement<br>   province<br>   ease<br>   seize<br>   ethics<br>   nomination<br>   permission<br>   wise<br>   actress<br>   summit<br>   acid<br>   odds<br>   gifted<br>   frustration<br>   medium<br>   function<br>   physically<br>   grant<br>   distinguish<br>   shore<br>   repeatedly<br>   lung<br>   firm<br>   running<br>   correct<br>   distinct<br>   artistic<br>   discourse<br>   basket<br>   ah<br>   fighting<br>   impressive<br>   competitor<br>   ugly<br>   worried<br>   portray<br>   powder<br>   ghost<br>   persuade<br>   moderate<br>   subsequent<br>   continued<br>   cookie<br>   carrier<br>   cooking<br>   frequent<br>   ban<br>   swing<br>   orange<br>   awful<br>   admire<br>   pet<br>   miracle<br>   exceed<br>   rhythm<br>   widespread<br>   killing<br>   lovely<br>   sin<br>   charity<br>   script<br>   tactic<br>   identification<br>   transformation<br>   everyday<br>   headline<br>   crash<br>   venture<br>   invasion<br>   military<br>   nonetheless<br>   adequate<br>   piano<br>   grocery<br>   intensity<br>   exhibit<br>   high<br>   blanket<br>   margin<br>   principal<br>   quarterback<br>   mouse<br>   rope<br>   concrete<br>   prescription<br>   African-American<br>   chase<br>   document<br>   brick<br>   recruit<br>   patch<br>   consensus<br>   horror<br>   recording<br>   changing<br>   painter<br>   colonial<br>   pie<br>   sake<br>   gaze<br>   courage<br>   pregnancy<br>   swear<br>   defeat<br>   clue<br>   reinforce<br>   win<br>   confusion<br>   slice<br>   occupation<br>   dear<br>   coal<br>   sacred<br>   criminal<br>   formula<br>   cognitive<br>   collective<br>   exact<br>   uncle<br>   square<br>   captain<br>   sigh<br>   attribute<br>   dare<br>   okay<br>   homeless<br>   cool<br>   gallery<br>   soccer<br>   defendant<br>   tunnel<br>   fitness<br>   lap<br>   grave<br>   toe<br>   container<br>   virtue<br>   abroad<br>   architect<br>   dramatically<br>   makeup<br>   inquiry<br>   hay<br>   surprisingly<br>   highlight<br>   decrease<br>   indication<br>   rail<br>   anniversary<br>   couch<br>   alliance<br>   hypothesis<br>   boyfriend<br>   compose<br>   peer<br>   mess<br>   rank<br>   legend<br>   regulate<br>   adolescent<br>   shine<br>   norm<br>   upset<br>   remark<br>   resign<br>   reward<br>   gentle<br>   related<br>   organ<br>   lightly<br>   concerning<br>   invent<br>   laughter<br>   fit<br>   northwest<br>   counseling<br>   tight<br>   receiver<br>   ritual<br>   insect<br>   interrupt<br>   salmon<br>   favor<br>   trading<br>   concern<br>   magic<br>   superior<br>   combat<br>   stem<br>   surgeon<br>   acceptable<br>   physics<br>   rape<br>   counsel<br>   brush<br>   jeans<br>   hunt<br>   continuous<br>   log<br>   echo<br>   pill<br>   excited<br>   sculpture<br>   compound<br>   integrate<br>   flour<br>   bitter<br>   bare<br>   slope<br>   rent<br>   presidency<br>   serving<br>   subtle<br>   greatly<br>   bishop<br>   drinking<br>   delay<br>   cry<br>   acceptance<br>   collapse<br>   shop<br>   pump<br>   candy<br>   evil<br>   final<br>   finance<br>   pleased<br>   medal<br>   beg<br>   sponsor<br>   ethical<br>   secondary<br>   slam<br>   export<br>   experimental<br>   melt<br>   midnight<br>   net<br>   curve<br>   integrity<br>   entitle<br>   evident<br>   logic<br>   essence<br>   park<br>   exclude<br>   harsh<br>   closet<br>   suburban<br>   greet<br>   favor<br>   interior<br>   corridor<br>   murder<br>   retail<br>   pitcher<br>   march<br>   snake<br>   pitch<br>   excuse<br>   cross<br>   weakness<br>   pig<br>   cold<br>   classical<br>   estimated<br>   T-shirt<br>   online<br>   unemployment<br>   civilization<br>   fold<br>   patient<br>   pop<br>   daily<br>   reverse<br>   missing<br>   correlation<br>   humanity<br>   flash<br>   developer<br>   reliable<br>   excitement<br>   beef<br>   Islam<br>   Roman<br>   stretch<br>   architecture<br>   occasional<br>   administrative<br>   elbow<br>   deadly<br>   Muslim<br>   Hispanic<br>   allegation<br>   tip<br>   confuse<br>   airplane<br>   monthly<br>   duck<br>   dose<br>   Korean<br>   plead<br>   initiate<br>   lecture<br>   van<br>   sixth<br>   bay<br>   mainstream<br>   suburb<br>   sandwich<br>   unlike<br>   trunk<br>   rumor<br>   implementation<br>   swallow<br>   motivate<br>   render<br>   longtime<br>   trap<br>   restrict<br>   cloth<br>   seemingly<br>   legislative<br>   effectiveness<br>   enforce<br>   lens<br>   reach<br>   inspector<br>   lend<br>   plain<br>   fraud<br>   companion<br>   contend<br>   nail<br>   array<br>   strict<br>   assemble<br>   frankly<br>   rat<br>   burst<br>   hallway<br>   cave<br>   inevitable<br>   southwest<br>   monster<br>   speed<br>   protest<br>   unexpected<br>   obstacle<br>   facilitate<br>   encounter<br>   rip<br>   herb<br>   overwhelming<br>   integration<br>   crystal<br>   recession<br>   wish<br>   top<br>   written<br>   motive<br>   label<br>   flood<br>   pen<br>   ownership<br>   nightmare<br>   notice<br>   inspection<br>   supervisor<br>   consult<br>   arena<br>   laugh<br>   diagnosis<br>   possession<br>   forgive<br>   warm<br>   consistently<br>   basement<br>   project<br>   drift<br>   drain<br>   last<br>   prosecution<br>   maximum<br>   announcement<br>   warrior<br>   prediction<br>   bacteria<br>   questionnaire<br>   mud<br>   infrastructure<br>   hurry<br>   privilege<br>   temple<br>   medium<br>   outdoor<br>   suck<br>   and/or<br>   broadcast<br>   re<br>   leap<br>   random<br>   past<br>   wrist<br>   curtain<br>   monitor<br>   pond<br>   domain<br>   guilt<br>   cattle<br>   subject<br>   walking<br>   playoff<br>   minimum<br>   fiscal<br>   skirt<br>   dump<br>   hence<br>   database<br>   uncomfortable<br>   aim<br>   execute<br>   limb<br>   ideology<br>   average<br>   welcome<br>   tune<br>   continuing<br>   harm<br>   railroad<br>   endure<br>   radiation<br>   horn<br>   chronic<br>   peaceful<br>   innovation<br>   strain<br>   guitar<br>   replacement<br>   behave<br>   administer<br>   simultaneously<br>   dancer<br>   amendment<br>   guard<br>   pad<br>   transmission<br>   await<br>   retired<br>   trigger<br>   spill<br>   grateful<br>   grace<br>   virtual<br>   response<br>   colony<br>   adoption<br>   slide<br>   indigenous<br>   closed<br>   convict<br>   civilian<br>   towel<br>   modify<br>   particle<br>   award<br>   glance<br>   prize<br>   landing<br>   conduct<br>   blue<br>   boost<br>   bat<br>   alarm<br>   festival<br>   grip<br>   weird<br>   undermine<br>   freshman<br>   sweat<br>   outer<br>   European<br>   drunk<br>   survey<br>   research<br>   separation<br>   traditionally<br>   stuff<br>   govern<br>   southeast<br>   intelligent<br>   wherever<br>   ballot<br>   rhetoric<br>   convinced<br>   driving<br>   vitamin<br>   enthusiasm<br>   accommodate<br>   praise<br>   injure<br>   wilderness<br>   nearby<br>   endless<br>   mandate<br>   pause<br>   excuse<br>   respectively<br>   uncertainty<br>   chaos<br>   short<br>   mechanical<br>   canvas<br>   forty<br>   matter<br>   lobby<br>   profound<br>   format<br>   trait<br>   currency<br>   turkey<br>   reserve<br>   beam<br>   abuse<br>   astronomer<br>   corruption<br>   contractor<br>   apologize<br>   doctrine<br>   genuine<br>   thumb<br>   unity<br>   compromise<br>   horrible<br>   behavioral<br>   exclusive<br>   scatter<br>   commonly<br>   convey<br>   rush<br>   twist<br>   complexity<br>   fork<br>   disk<br>   relieve<br>   suspicion<br>   lock<br>   finish<br>   residence<br>   shame<br>   meaningful<br>   sidewalk<br>   Olympics<br>   technological<br>   signature<br>   pleasant<br>   wow<br>   suspend<br>   rebel<br>   frozen<br>   desire<br>   spouse<br>   fluid<br>   pension<br>   resume<br>   theoretical<br>   sodium<br>   blow<br>   promotion<br>   delicate<br>   forehead<br>   rebuild<br>   bounce<br>   electrical<br>   hook<br>   detective<br>   traveler<br>   click<br>   compensation<br>   signal<br>   exit<br>   attraction<br>   dedicate<br>   altogether<br>   pickup<br>   carve<br>   needle<br>   belly<br>   ship<br>   scare<br>   portfolio<br>   shuttle<br>   invisible<br>   timing<br>   engagement<br>   ankle<br>   transaction<br>   rescue<br>   counterpart<br>   historically<br>   firmly<br>   mild<br>   rider<br>   doll<br>   noon<br>   exhibit<br>   amid<br>   identical<br>   precise<br>   anxious<br>   structural<br>   residential<br>   loud<br>   diagnose<br>   carbohydrate<br>   liberty<br>   poster<br>   theology<br>   nonprofit<br>   crawl<br>   oxygen<br>   handsome<br>   magic<br>   sum<br>   provided<br>   businessman<br>   promising<br>   conscious<br>   determination<br>   donor<br>   hers<br>   pastor<br>   jazz<br>   opera<br>   Japanese<br>   bite<br>   frame<br>   evil<br>   acquisition<br>   pit<br>   hug<br>   wildlife<br>   punish<br>   giant<br>   primary<br>   equity<br>   wrong<br>   doorway<br>   departure<br>   elevator<br>   teenage<br>   guidance<br>   happiness<br>   statue<br>   pursuit<br>   repair<br>   decent<br>   gym<br>   oral<br>   clerk<br>   Israeli<br>   envelope<br>   reporting<br>   destination<br>   fist<br>   endorse<br>   exploration<br>   generous<br>   bath<br>   rescue<br>   thereby<br>   overall<br>   indicator<br>   sunlight<br>   feedback<br>   spectrum<br>   purple<br>   laser<br>   bold<br>   reluctant<br>   starting<br>   expertise<br>   practically<br>   program<br>   picture<br>   tune<br>   eating<br>   age<br>   volunteer<br>   hint<br>   sharply<br>   parade<br>   advocate<br>   realm<br>   ban<br>   strip<br>   cancel<br>   blend<br>   therapist<br>   slice<br>   peel<br>   pizza<br>   recipient<br>   hesitate<br>   flip<br>   accounting<br>   debate<br>   bias<br>   huh<br>   metaphor<br>   candle<br>   handle<br>   worry<br>   judicial<br>   entity<br>   suffering<br>   full-time<br>   feel<br>   lamp<br>   garbage<br>   servant<br>   addition<br>   regulatory<br>   diplomatic<br>   elegant<br>   inside<br>   reception<br>   vanish<br>   automatically<br>   chin<br>   trail<br>   necessity<br>   confess<br>   racism<br>   starter<br>   interior<br>   banking<br>   casual<br>   gravity<br>   enroll<br>   diminish<br>   prevention<br>   Arab<br>   value<br>   minimize<br>   chop<br>   performer<br>   intent<br>   isolate<br>   pump<br>   inventory<br>   productive<br>   assembly<br>   civic<br>   silk<br>   magnitude<br>   steep<br>   hostage<br>   collector<br>   popularity<br>   kiss<br>   alien<br>   dynamic<br>   scary<br>   equation<br>   angel<br>   switch<br>   offering<br>   rage<br>   photography<br>   repair<br>   toilet<br>   disappointed<br>   precious<br>   prohibit<br>   representative<br>   content<br>   realistic<br>   Russian<br>   hidden<br>   command<br>   tender<br>   wake<br>   gathering<br>   outstanding<br>   stumble<br>   lonely<br>   automobile<br>   artificial<br>   dawn<br>   abstract<br>   descend<br>   silly<br>   hook<br>   tide<br>   shared<br>   hopefully<br>   readily<br>   cooperate<br>   revolutionary<br>   romance<br>   hardware<br>   pillow<br>   kit<br>   cook<br>   spread<br>   continent<br>   seal<br>   circuit<br>   sink<br>   ruling<br>   shortage<br>   annually<br>   lately<br>   trap<br>   scan<br>   fool<br>   deadline<br>   rear<br>   processing<br>   ranch<br>   coastal<br>   undertake<br>   softly<br>   reserve<br>   burning<br>   verbal<br>   tribal<br>   ridiculous<br>   automatic<br>   diamond<br>   credibility<br>   import<br>   sexually<br>   spring<br>   way<br>   divine<br>   sentiment<br>   cart<br>   oversee<br>   stem<br>   elder<br>   pro<br>   inspiration<br>   Dutch<br>   quantity<br>   trailer<br>   mate<br>   o’clock<br>   Greek<br>   genius<br>   monument<br>   bid<br>   quest<br>   sacrifice<br>   invitation<br>   accuracy<br>   juror<br>   officially<br>   broker<br>   treasure<br>   loyalty<br>   credit<br>   shock<br>   talented<br>   gasoline<br>   stiff<br>   output<br>   nominee<br>   extended<br>   please<br>   diabetes<br>   slap<br>   toxic<br>   alleged<br>   jaw<br>   grief<br>   mysterious<br>   rocket<br>   donate<br>   inmate<br>   tackle<br>   dynamics<br>   bow<br>   ours<br>   senior<br>   dignity<br>   carpet<br>   parental<br>   bubble<br>   heat<br>   buddy<br>   barn<br>   sword<br>   flash<br>   seventh<br>   glory<br>   tightly<br>   protective<br>   tuck<br>   drum<br>   faint<br>   post<br>   queen<br>   dilemma<br>   input<br>   specialize<br>   northeast<br>   shallow<br>   liability<br>   sail<br>   merchant<br>   stadium<br>   improved<br>   bloody<br>   defeat<br>   associated<br>   withdrawal<br>   refrigerator<br>   nest<br>   near<br>   thoroughly<br>   lane<br>   ancestor<br>   condemn<br>   steam<br>   accent<br>   escape<br>   optimistic<br>   unite<br>   cage<br>   equip<br>   shrimp<br>   homeland<br>   exchange<br>   rack<br>   costume<br>   wolf<br>   courtroom<br>   statute<br>   cartoon<br>   besides<br>   productivity<br>   grin<br>   symbolic<br>   seal<br>   bug<br>   bless<br>   aunt<br>   agriculture<br>   rock<br>   hostile<br>   root<br>   conceive<br>   combined<br>   instantly<br>   bankruptcy<br>   vaccine<br>   bonus<br>   collaboration<br>   mixed<br>   opposed<br>   orbit<br>   grasp<br>   patience<br>   spite<br>   tropical<br>   voting<br>   patrol<br>   willingness<br>   position<br>   revelation<br>   rent<br>   calm<br>   jewelry<br>   Cuban<br>   haul<br>   concede<br>   trace<br>   wagon<br>   afterward<br>   spectacular<br>   ruin<br>   sheer<br>   prior<br>   immune<br>   reliability<br>   ass<br>   alongside<br>   bush<br>   exotic<br>   fascinating<br>   secure<br>   clip<br>   thigh<br>   bull<br>   drawer<br>   regard<br>   sheep<br>   discourage<br>   coordinator<br>   ideological<br>   runner<br>   secular<br>   intimate<br>   empire<br>   cab<br>   divorce<br>   exam<br>   documentary<br>   neutral<br>   biology<br>   flexible<br>   progressive<br>   web<br>   conspiracy<br>   catch<br>   casualty<br>   republic<br>   execution<br>   terrific<br>   whale<br>   functional<br>   star<br>   draft<br>   instinct<br>   teammate<br>   aluminum<br>   whoever<br>   ministry<br>   verdict<br>   instruct<br>   skull<br>   self-esteem<br>   ease<br>   cooperative<br>   manipulate<br>   bee<br>   practitioner<br>   loop<br>   edit<br>   whip<br>   puzzle<br>   mushroom<br>   subsidy<br>   boil<br>   tragic<br>   mathematics<br>   mechanic<br>   jar<br>   respect<br>   earthquake<br>   pork<br>   creativity<br>   safely<br>   underlying<br>   dessert<br>   sympathy<br>   fisherman<br>   incredibly<br>   isolation<br>   sock<br>   near<br>   jump<br>   eleven<br>   sexy<br>   entrepreneur<br>   syndrome<br>   bureau<br>   seat<br>   workplace<br>   ambition<br>   touchdown<br>   utilize<br>   breeze<br>   costly<br>   ambitious<br>   Christianity<br>   presumably<br>   influential<br>   translation<br>   uncertain<br>   dissolve<br>   object<br>   statistical<br>   gut<br>   metropolitan<br>   rolling<br>   aesthetic<br>   spell<br>   insert<br>   booth<br>   helmet<br>   waist<br>   expected<br>   lion<br>   accomplishment<br>   royal<br>   panic<br>   cast<br>   crush<br>   actively<br>   cliff<br>   minimal<br>   cord<br>   fortunately<br>   cocaine<br>   illusion<br>   anonymous<br>   tolerate<br>   appreciation<br>   commissioner<br>   harm<br>   flexibility<br>   instructional<br>   scramble<br>   casino<br>   tumor<br>   decorate<br>   sort<br>   charge<br>   pulse<br>   equivalent<br>   fixed<br>   experienced<br>   donation<br>   diary<br>   sibling<br>   irony<br>   spoon<br>   midst<br>   alley<br>   upset<br>   interact<br>   soap<br>   cute<br>   rival<br>   short-term<br>   punch<br>   pin<br>   hockey<br>   passing<br>   persist<br>   supplier<br>   known<br>   momentum<br>   purse<br>   shed<br>   liquid<br>   icon<br>   elephant<br>   consequently<br>   legislature<br>   associate<br>   franchise<br>   correctly<br>   mentally<br>   foster<br>   bicycle<br>   encouraging<br>   cheat<br>   access<br>   heal<br>   fever<br>   filter<br>   rabbit<br>   coin<br>   exploit<br>   accessible<br>   organism<br>   sensation<br>   partially<br>   stay<br>   upstairs<br>   dried<br>   minimum<br>   pro<br>   conservation<br>   shove<br>   backyard<br>   charter<br>   stove<br>   consent<br>   comprise<br>   reminder<br>   alike<br>   placement<br>   dough<br>   grandchild<br>   dam<br>   reportedly<br>   well-known<br>   surrounding<br>   ecological<br>   outfit<br>   unprecedented<br>   columnist<br>   workout<br>   preliminary<br>   patent<br>   shy<br>   quote<br>   trash<br>   disabled<br>   gross<br>   damn<br>   hormone<br>   texture<br>   counter<br>   pencil<br>   associate<br>   frontier<br>   spray<br>   bet<br>   disclose<br>   custody<br>   banker<br>   beast<br>   interfere<br>   oak<br>   case<br>   eighth<br>   notebook<br>   outline<br>   gaze<br>   attendance<br>   speculation<br>   uncover<br>   behalf<br>   innovative<br>   shark<br>   reward<br>   mill<br>   installation<br>   stimulate<br>   tag<br>   vertical<br>   swimming<br>   fleet<br>   catalog<br>   outsider<br>   sacrifice<br>   desperately<br>   stance<br>   compel<br>   sensitivity<br>   someday<br>   instant<br>   debut<br>   proclaim<br>   worldwide<br>   hike<br>   required<br>   confrontation<br>   colorful<br>   ideal<br>   constitution<br>   trainer<br>   Thanksgiving<br>   scent<br>   stack<br>   eyebrow<br>   sack<br>   cease<br>   inherit<br>   tray<br>   pioneer<br>   organizational<br>   textbook<br>   uh<br>   nasty<br>   shrink<br>   model<br>   emerging<br>   dot<br>   wheat<br>   fierce<br>   envision<br>   rational<br>   kingdom<br>   aisle<br>   weaken<br>   protocol<br>   exclusively<br>   vocal<br>   marketplace<br>   openly<br>   unfair<br>   terrain<br>   deploy<br>   risky<br>   pasta<br>   genre<br>   distract<br>   merit<br>   planner<br>   depressed<br>   chunk<br>   closest<br>   discount<br>   no<br>   ladder<br>   jungle<br>   migration<br>   breathing<br>   invade<br>   hurricane<br>   retailer<br>   classify<br>   wound<br>   coup<br>   aid<br>   ambassador<br>   density<br>   supportive<br>   curiosity<br>   skip<br>   aggression<br>   stimulus<br>   journalism<br>   robot<br>   flood<br>   dip<br>   likewise<br>   informal<br>   Persian<br>   feather<br>   sphere<br>   tighten<br>   boast<br>   pat<br>   perceived<br>   sole<br>   publicity<br>   major<br>   unfold<br>   joke<br>   well-being<br>   validity<br>   ecosystem<br>   strictly<br>   partial<br>   collar<br>   weed<br>   compliance<br>   streak<br>   supposedly<br>   added<br>   builder<br>   glimpse<br>   premise<br>   specialty<br>   deem<br>   artifact<br>   sneak<br>   monkey<br>   mentor<br>   two-thirds<br>   listener<br>   lightning<br>   legally<br>   sleeve<br>   disappointment<br>   disturb<br>   rib<br>   excessive<br>   high-tech<br>   debris<br>   pile<br>   rod<br>   logical<br>   liberal<br>   ash<br>   socially<br>   parish<br>   slavery<br>   blank<br>   commodity<br>   cure<br>   mineral<br>   hunger<br>   dying<br>   developmental<br>   faster<br>   spare<br>   halfway<br>   cure<br>   equality<br>   cemetery<br>   harassment<br>   deliberately<br>   fame<br>   regret<br>   striking<br>   likelihood<br>   carrot<br>   atop<br>   toll<br>   rim<br>   embarrassed<br>   fucking<br>   cling<br>   isolated<br>   blink<br>   suspicious<br>   wheelchair<br>   squad<br>   eligible<br>   processor<br>   plunge<br>   this<br>   sponsor<br>   grin<br>   color<br>   demographic<br>   rain<br>   chill<br>   refuge<br>   steer<br>   legislator<br>   rally<br>   programming<br>   cheer<br>   outlet<br>   intact<br>   vendor<br>   thrive<br>   peanut<br>   chew<br>   elaborate<br>   intellectual<br>   conception<br>   auction<br>   steak<br>   comply<br>   triumph<br>   shareholder<br>   comparable<br>   transport<br>   conscience<br>   calculation<br>   considerably<br>   interval<br>   scratch<br>   awake<br>   jurisdiction<br>   inevitably<br>   feminist<br>   constraint<br>   emotionally<br>   expedition<br>   allegedly<br>   compromise<br>   strain<br>   similarity<br>   butt<br>   lid<br>   dumb<br>   bulk<br>   sprinkle<br>   mortality<br>   philosophical<br>   conversion<br>   patron<br>   municipal<br>   any<br>   liver<br>   harmony<br>   solely<br>   tolerance<br>   instant<br>   goat<br>   arm<br>   blessing<br>   banana<br>   running<br>   palace<br>   formerly<br>   peasant<br>   neat<br>   grandparent<br>   lawmaker<br>   supermarket<br>   cruise<br>   mobile<br>   plain<br>   part<br>   calendar<br>   widow<br>   deposit<br>   beard<br>   brake<br>   downtown<br>   screening<br>   impulse<br>   forbid<br>   fur<br>   brutal<br>   predator<br>   poke<br>   opt<br>   voluntary<br>   trouble<br>   valid<br>   forum<br>   dancing<br>   happily<br>   soar<br>   removal<br>   autonomy<br>   enact<br>   round<br>   thread<br>   light<br>   landmark<br>   unhappy<br>   offender<br>   coming<br>   privately<br>   fraction<br>   distinctive<br>   tourism<br>   threshold<br>   calm<br>   routinely<br>   suite<br>   remark<br>   regulator<br>   straw<br>   theological<br>   apart<br>   exhaust<br>   globe<br>   fragile<br>   objection<br>   chemistry<br>   old-fashioned<br>   crowded<br>   circle<br>   blast<br>   prevail<br>   overnight<br>   denial<br>   rental<br>   fantastic<br>   fragment<br>   level<br>   screw<br>   warmth<br>   undergraduate<br>   liquid<br>   headache<br>   policeman<br>   yield<br>   projection<br>   battle<br>   suitable<br>   mention<br>   graduation<br>   drill<br>   cruel<br>   mansion<br>   regard<br>   grape<br>   authorize<br>   cottage<br>   driveway<br>   charm<br>   sexuality<br>   loyal<br>   clay<br>   pound<br>   balloon<br>   invention<br>   ego<br>   fare<br>   homework<br>   disc<br>   sofa<br>   guarantee<br>   availability<br>   radar<br>   frown<br>   regain<br>   leave<br>   permit<br>   sweater<br>   rehabilitation<br>   rubber<br>   retreat<br>   molecule<br>   freely<br>   favorable<br>   steadily<br>   veteran<br>   integrated<br>   ha<br>   youngster<br>   broadcast<br>   premium<br>   accountability<br>   overwhelm<br>   one-third<br>   contemplate<br>   update<br>   spark<br>   ironically<br>   fatigue<br>   beyond<br>   speculate<br>   marker<br>   low<br>   preach<br>   bucket<br>   bomb<br>   blond<br>   confession<br>   provoke<br>   marble<br>   substantially<br>   twist<br>   defender<br>   fish<br>   explicit<br>   transport<br>   disturbing<br>   surveillance<br>   magnetic<br>   technician<br>   mutter<br>   devastating<br>   depart<br>   arrow<br>   trauma<br>   neighboring<br>   soak<br>   ribbon<br>   meantime<br>   transmit<br>   screen<br>   harvest<br>   consecutive<br>   republican<br>   coordinate<br>   worldwide<br>   within<br>   spy<br>   slot<br>   riot<br>   nutrient<br>   citizenship<br>   severely<br>   sovereignty<br>   ridge<br>   brave<br>   lighting<br>   specify<br>   contributor<br>   frustrate<br>   crowd<br>   articulate<br>   importantly<br>   transit<br>   dense<br>   seminar<br>   electronics<br>   sunny<br>   shorts<br>   swell<br>   accusation<br>   soften<br>   photograph<br>   straighten<br>   terribly<br>   cue<br>   sudden<br>   bride<br>   biography<br>   hazard<br>   compelling<br>   seldom<br>   tile<br>   economically<br>   honestly<br>   troubled<br>   bow<br>   twentieth<br>   balanced<br>   foreigner<br>   launch<br>   convenience<br>   delight<br>   weave<br>   timber<br>   till<br>   accurately<br>   plea<br>   bulb<br>   copy<br>   flying<br>   sustainable<br>   devil<br>   bolt<br>   cargo<br>   spine<br>   seller<br>   skilled<br>   managing<br>   public<br>   marine<br>   dock<br>   organized<br>   fog<br>   diplomat<br>   boring<br>   sometime<br>   summary<br>   missionary<br>   epidemic<br>   fatal<br>   trim<br>   warehouse<br>   accelerate<br>   butterfly<br>   bronze<br>   drown<br>   inherent<br>   praise<br>   nationwide<br>   spit<br>   harvest<br>   kneel<br>   vacuum<br>   selected<br>   dictate<br>   stereotype<br>   sensor<br>   laundry<br>   manual<br>   pistol<br>   naval<br>   plaintiff<br>   kid<br>   middle-class<br>   apology<br>   till</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2019年终总结</title>
    <link href="/2021/01/07/2019-12-31-all/"/>
    <url>/2021/01/07/2019-12-31-all/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;呀真是太快了，忽然就想起上初三换新学校开学时新教室里阳光明媚的画面，恍如昨日。可惜，也<del>鲜有</del>没有还联系的初中同学了。</p><p>&emsp;&emsp;日子过的有多快呢？我还没写几个2019的时候，还在习惯写2018的时候，接着该写2020了。2020年给我一种不太真实的感觉，一谈起2020年就有一种未来的感觉，不知道我那印着2020年我国进入全面小康社会的思想品德课本在何方，如果它有思想的话估计也要自惭形秽了，进没进小康不知道，全不全面不知道，反正百万的房贷我和银行是知道的💔。</p><p>&emsp;&emsp;比较一下今年和往年的不同，总结一下今年的收获呀。</p><p>&emsp;&emsp;今年是第一波90后而立前的最后一年，小道新闻的营销也丝毫未变，终于没有放过90后，网络上和朋友圈里又开始传播”30岁了，你该知道的道理”等类似的各类鸡汤文（请勿对号入座），忍着呕吐我翻看了其中一篇，发现竟与我五六年前看的相差无几，一通无从辨认真伪的废话之后无半点事实作为支撑。</p><p>&emsp;&emsp;今年是读书最多的一年。今年刘某终于从理论读书演变成实际读书。不过书读多了不一定好，依然没有逃出我是个傻逼的怪圈，更没有实现王老板给年轻人定制的一个亿小目标，反而平添了不少疑问，不少烦恼，不少困惑。中国的谚语有太多太多夸赞读书的，我觉得大多是谬赞，实在是言过其实，书中并没有颜如玉，更没有黄金屋，想通过读书去获取高额财富更是无稽之谈，它就是一本书，仅此而已，如果把它当作实现一切目标的源泉，未免太过于难为书籍了。关于为什么读书，我觉得胡适先生的《胡适谈读书》总结的一针见血，让人心悦诚服：读书可以开阔人的思想，保持思想上的自由独立。阅读不应该是一件神圣的事，它应该是一件平常事，它应该像吃饭一样自然，同呼吸一般顺畅。今年读过的书：</p><blockquote><p>《少有人走的路》《每天最重要的2小时》《人生海海》《精力管理》《最重要的事只有一件》《断舍离》《金融炼金术》《工作漂流》《万物皆有伤心处》《有味》<br>《贫穷的本质》《智商税》《绝对笑喷之企业医生日志》《焦虑你好》《从早”茫”到晚》《股票大作手操盘术》《你的眼界，决定你的全世界》《初学者的冥想书》《跳槽圣经》《图书思考与表达的20堂课》<br>《反脆弱》《大开眼界的科学知识》《麦肯锡精英高效阅读法》《长安十二时辰》《我希望自己足够渺小》《低风险创业》《认识身体》《年轻人，你就是想太多》《本能》《你总说没事，但我知道你偷偷哭过很多次》<br>《财务自由之路》《寂寞的游戏》《蝉》《树下长椅》《悠哉悠哉》《这里》《财富自由之路》《韭菜的自我修养》《如何用Kindle高效学习》</p></blockquote><p>数了一下，刚好39本，今年的第一个阅读小高峰是发现在mac上epub格式的书籍观感如此好，暗黑色的主题看起来又极为舒适和方便，<del>mac左滑右滑又是这么好用，以至于上班摸鱼看书都舒适极了,</del>远不是什么pdf这些妖艳贱货能比的；第二个阅读小高峰是我发现mac再方便，也只能在上班的时候看，平常携带电脑总不是那么方便，而我的Kindle又是当时最丑最土最磕碜的入门版，实在不符合我作为一个爱<del>吃泡面</del>读书人的身份，于是，也没咋咬牙跺脚，就入了当前最高大上的Kindle oasis，然后发现真香，于是从当时只有上班能看，变成了上下班都能看；第三个阅读小高峰是最小的，也就是买入ipad pro后的一个小高峰，它最大的用处就是<del>再大的泡面碗它都可以盖过来</del>让pdf格式的妖艳贱货变成端正的大家闺秀，至少看起来终于达到了在mac上epub的观感，而实用性更有过之而无不及，当然这归功于Notability。明年的目标是阅读52本非专业书籍，并减少新书的比重，扩大譬如《史记》《沉思录》等经典书籍和大部头名著，减少譬如《如何用kindle高效学习》等价值较低的书籍。目标还算不上计划，最多算个「口号」，经验告诉我，口号除了好听以外，没啥实际作用，关键还是口号怎么转化成实际行动。假如「安全至上」这句口号有用，还要那么多流程和安检干啥？<br><br>&emsp;&emsp;其中的专业书籍没有放入阅读完的书单中，专业书籍如同教科书，更多得到的是技能的提升而非思想和认知上的提升。查看今年阅读完的书时，发觉有的书籍对自身影响甚多，有的则影响不大，甚至现在根据书名回忆其中内容竟无法详细道来。<br><br>&emsp;&emsp;山下英子的《断舍离》是其中对生活和观念影响较大的书籍，以至于后来我每次买东西时都在思考，我真的需要这个商品吗？当然，最后大脑给出的反应大多数时候是需要😭，这也是因为我不够理性的原因，希望明年能够有所改观。但这丝毫不影响断舍离对我产生的影响，我基本学会了对生活做减法—那些实际上无用却舍不得扔的东西；那些点头之交却长期占据微信好友的”好友”；那些毫无意义只会让人生活在过去的纪念物品。<br><br>&emsp;&emsp;麦家的《人生海海》是其中对人生感悟影响较大的小说，我觉得上校并不是一个例外，他是一个时代的缩影，他是千万万个普通人中的一员。去了解一下每个普通人波涛汹涌的内心世界，就会发现千万万个”上校”。上校有他的喜怒哀乐，有他不愿提起的伤疤，有让他崩溃的事情，有属于他自己的传奇。他懒洋洋的猫，他摇摇晃晃的躺椅，他咯吱咯吱的木地板，他上香的老母亲，他有肉有酒的小桌子，拼成了一段恬淡温馨的小时光。上校是人们口中经历过大起大落的人，其实每个人的人生何尝不经历过很多起起落落，但正如书中所言：人生像大海一样变幻不定、起落浮沉，但总还是要好好地活下去。<br><br>&emsp;&emsp;博多•舍费尔的《财务自由之路》是其中对观点影响较大的书籍。最重要的莫过于舍费尔苦口婆心的教你承担责任，中国有句老话：能力越大，责任越大。舍费尔则教你把这句话反过来照样行得通：责任越大，能力越大。不仅如此，舍费尔还扩展了责任的范围：你要积极的承担责任，包括你的观点和对他人行为的反应。这个对我影响是最大的，甚至可以说是推翻了我之前的观点，我之前不自觉地就暗暗吐槽甚至小声的诅咒不文明的行为或者在我看来不正确的做法。舍费尔则告诉我：你要为对吐槽别人的行为这件事承担责任，即你要为你对他人行为作出的反应这件事承担责任。第二件事则是舍费尔的金钱观，他把金钱的多少分为三个档次，第一个档次是财务保障，第二个档次是财务安全，第三个档次则是财务自由。这是一个循序渐进的过程。</p><p>&emsp;&emsp;今年是消费最多的一年。为工作买的mbp，15寸512固态。为<del>优酷</del>学习买的iPad pro，12.9寸1t硬盘。为<del>泡面</del>学习买的Kindle oasis，32g存储。为<del>我也不知道为什么</del>学习买的apple pencil。为<del>装逼</del>工作学习方便买的AirPods。还有<del>方便回家喝豆浆</del>母亲节礼物破壁机。嗯，还有当当网的一堆没有看完的实体书，还有亚马逊的一堆没有看完的电子书。明年还是做好预算，可控制的花钱吧。明年的装修预算必须要考虑进去的：粉刷，实木地板，窗帘，马桶，抽烟机，洗碗机，洗衣机，床，沙发,投影仪，桌子。嗯，算了一下，怀疑我以前没有预算是怎么活下来的，还是不做了😼</p><p>&emsp;&emsp;今年是工资最高的一年。还是借用日剧里东山结衣的台词吧：相比于加班，我更喜欢热乎的小笼包。没错，我就是那种不要996福报的人。不要跟我谈理想，我的理想是不上班。明年的目标是有一定的储蓄和稳定增长的投资，逐渐明白，抛开储蓄谈工资譬如薄冰上行走。</p><p>&emsp;&emsp;今年是忧虑最多的一年。忧虑是两个词：担忧，焦虑。好处大概就是因为忧虑进而想从书中寻找答案，进而读了几本书，知道并不是我一个人焦虑😄<del>哈哈哈哈哈哈哈哈</del>；而坏处是最浅而易见的，冬天头冷😊。明年一定要开源节流，兼之持续不断的学习与成长。</p><p>&emsp;&emsp;今年是由急功近利变得淡泊的一年。年初还想去一线，快点成长快点赚钱，十一则只想快点回家，早些混吃等死。突然想起一句很煽情的话：小时候,总想着仗剑走天涯;现在,只想赖在妈妈身边,细数年华。</p><p>&emsp;&emsp;今年是脾气变得暴躁的一年，也是尝试慢慢开始收敛脾气的一年。年初我还把自己当老板的爹，老板说啥都不行，你得考虑我的意见；年末已然变成了一个木得感情的无脸人，老板说啥我做啥，多给钱多给工期你就是爹。明年一定要对身边的人多些随和，少些脾气，多些帮助，少些抱怨。</p><p>&emsp;&emsp;今年是运动上最懒、最少运动的一年。明年要告别运动上的懒惰，保持现在良好的作息时间。还是需要立个flag，明年一定要把体重控制到75-80kg之间。</p><p>嗯，就这样吧。2020年不要急着干掉我，我还要在2020年内小康呀，希望你们都踏入全面小康社会啦！</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
